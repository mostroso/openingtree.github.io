{"version":3,"sources":["app/Analytics.js","app/OpeningTreeSerializer.js","pres/loader/Common.js","app/Constants.js","pres/loader/Filters.js","pres/loader/Actions.js","app/PGNReaderWorker.js","pres/loader/TimeControlLabels.js","pres/loader/FilterLabels.js","pres/loader/AdvancedFilters.js","app/PGNReader.js","app/util.js","app/OpeningGraph.js","app/OpeningManager.js","pres/Navigator.js","pres/GlobalHeader.js","pres/loader/Source.js","pres/loader/Dropzone.js","pres/loader/NotableChessGames.js","pres/loader/User.js","pres/loader/PGNLoader.js","pres/Settings.js","pres/ReportControls.js","pres/MovesList.js","pres/ControlsContainer.js","pres/StateManagement.js","pres/SnackbarContentWrapper.js","pres/MainContainer.js","index.js","app/Common.js","app/SitePolicy.js"],"names":["trackPageView","ReactGA","pageview","window","location","pathname","trackEvent","category","action","label","value","event","initialize","serializeOpeningTree","treeData","filename","callback","chunkedArray","chunks","chunk","header","index","arraySizes","arrays","map","arr","length","forEach","array","Array","prototype","push","apply","chunkSize","startIndex","i","chunkIndex","slice","chunkArray","deflatedChunks","packControlWord","remainingChunks","hasError","zlib","deflate","Buffer","JSON","stringify","error","data","byteLength","saveAs","Blob","type","deserializeOpeningTree","file","reader","FileReader","onload","evt","target","result","version","unpackControlWord","numChunks","handleInflate","console","log","parse","e","sortedChunks","sort","a","b","flattenedChunks","el","flat","size","reconstructObjectFromChunks","inflate","from","getInflatedChunks","onerror","name","message","readAsArrayBuffer","control","view","DataView","getUint16","getUint32","buffer","ArrayBuffer","setUint16","setUint32","ExpansionPanel","withStyles","root","border","boxShadow","borderBottom","display","margin","expanded","MuiExpansionPanel","getNumberIcon","n","alt","className","src","height","advancedFilters","state","createSubObjectWithProperties","Constants","copyText","elementId","document","getElementById","select","setSelectionRange","execCommand","TIME_CONTROL_ULTRA_BULLET","TIME_CONTROL_BULLET","TIME_CONTROL_BLITZ","TIME_CONTROL_RAPID","TIME_CONTROL_CLASSICAL","TIME_CONTROL_CORRESPONDENCE","TIME_CONTROL_DAILY","FILTER_NAME_RATED","FILTER_NAME_SELECTED_TIMEFRAME","FILTER_NAME_DOWNLOAD_LIMIT","FILTER_NAME_ELO_RANGE","SITE_LICHESS","SITE_CHESS_DOT_COM","SITE_PGN_FILE","SITE_EVENT_DB","SITE_PLAYER_DB","SITE_OPENING_TREE_FILE","MAX_DOWNLOAD_LIMIT","MAX_ELO_RATING","EVENT_CATEGORY_PGN_LOADER","EVENT_CATEGORY_MOVES_LIST","EVENT_CATEGORY_CONTROLS","EVENT_CATEGORY_NAVIGATOR","EVENT_CATEGORY_CHESSBOARD","EVENT_CATEGORY_MESSAGE_SHOWN","ROOT_FEN","PLAYER_COLOR_WHITE","PLAYER_COLOR_BLACK","LOADER_ANIMATION_DURATION_MS","OPENING_TREE_EMAIL","OPENNIG_TREE_REDDIT","OPENING_TREE_LICHESS","OPENING_TREE_CHESS_COM","OPENING_TREE_DISCORD","OPENING_TREE_FILE_CURRENT_VERSION","ERROR_ACTION_VISIT_OLD_SITE","User","props","playerColor","isAdvancedFiltersOpen","timeframeSteps","Object","assign","defaultAdvancedFilters","this","rated","setState","property","newState","site","SitePolicy","setImmediate","setFilters","bind","checked","newValue","colorError","filtersChange","isDisabled","areAdvancedFiltersApplied","newProps","entries","key","deepEqual","playerName","selectedNotablePlayer","expandedPanel","TransitionComponent","MuiCollapse","TransitionProps","timeout","onChange","handleExpansionChange","disabled","expandIcon","getSummary","component","playerColorChange","color","onClick","toggleState","icon","faCaretUp","faCaretDown","isOpen","toggleRated","handleTimeControlChange","handleTimeframeChange","handleEloRangeChange","handleDownloadLimitChange","React","Component","Actions","unload","pgnReader","stopDownloading","isGamesSubsectionOpen","exportingInProgress","addEventListener","removeEventListener","importOpeningTree","files","err","subMesage","showError","success","importOpeningTreeObject","showInfo","exportOpeningTree","exportOpeningTreeObject","info","shouldDownloadToFile","PGNReader","then","readerInstance","proxy","notify","fetchPGNFromSite","selectedNotableEvent","readPgn","gamesProcessed","clear","loadedSite","setDownloading","importTreeClicked","variant","startIcon","disableElevation","downloadDisabledReason","isDownloading","load","download","placement","title","exportTreeClicked","stopDownloadingAction","switchToMovesTab","faList","openingTreeLoadActions","regularActions","mainComponent","in","wrap","Worker","timeClasses","selectedTimeControls","unselectedTimeControls","includesAll","subArray","every","v","includes","getTimeControlLabel","timeControlState","getTimeControlsArray","Common","timeClass","filter","join","lichessTimeControlLabel","AdvancedFilters","currentlyOpenAdvancedFilter","timeframeMarks","downloadLimitMarks","eloRangeMarks","filterName","subSectionComponent","setCurrentlyOpenAdvancedFilter","Collapse","getTimeControlFilters","timeframe","getSelectedTimeFrameData","getTimeFrameFilters","selectedEloRange","getEloRangeFilters","downloadLimit","getDownloadLimitFilters","Slider","valueLabelDisplay","valueLabelFormat","val","step","min","marks","max","firstRow","middleRow","lastRow","colWidth","FormControl","FormGroup","Container","getTimeControlFilterRow","controls","firstColumnWidth","position","clsName","Row","Col","sm","FormControlLabel","Checkbox","changeCallback","children","getFilters","module","exports","mainObject","properties","subObject","simplifiedFen","fen","fenComponents","split","selected","timeControl","monthLabels","getTimeframeSteps","steps","year","startYear","currentYear","Date","getFullYear","currentMonth","getMonth","toLongLabel","fromLongLabel","month","fromIndex","toIndex","fromTimeframe","toTimeframe","currentDate","fromMonth","fromYear","fromTimeStamp","getTimeStampInfoFor","toYear","toMonth","toTimeStamp","minOrMax","getTime","getDate","getDaysInMonth","getPerformanceDetails","totalElo","white","draws","black","totalGames","averageElo","Math","round","playerWins","playerLosses","score","scorePercentage","ratingChange","results","performanceRating","Number","isInteger","toFixed","abs","isDateMoreRecentThan","date","than","OpeningGraph","graph","Graph","hasMoves","arrayEntries","pgnStats","parsedMoves","lastFen","parsedMove","addMoveForFen","sourceFen","targetFen","moveSan","addGameResultOnFen","addStatsToRoot","fullFen","resultIndex","currNode","getNodeFromGraph","gameResults","targetNode","details","blackWins","whiteWins","totalOpponentElo","lastPlayed","newDetails","getUpdatedMoveDetails","updateCalculatedValues","bestWin","bestWinGame","bestWinElo","getOpponentElo","worstLoss","worstLossGame","worstLossElo","lastPlayedGame","count","fullSourceFen","fullTargetFen","move","resultObject","playedByMax","getTargetDetailsCount","playedBy","targetDetails","nodes","get","GraphNode","set","currentMoveDetails","whiteWin","blackWin","draw","resultInt","opponentElo","currentBestWinGame","parseInt","currentWorstLossGame","currentLastPlayedGame","blackElo","whiteElo","entry","chess","Chess","sloppy","targetNodeDetails","getDetailsForFen","orig","dest","to","level","levelFor","san","moveCount","maxCount","Map","openingGraph","OpeningManager","plys","pgn","currentIndex","pgnAsList","moveForward","pgnList","pgnSoFar","pgnListSoFar","moveNumber","whitePly","blackPly","currMove","floor","moveTo","Navigator","openingManager","currentMove","keyHandler","keyCode","previous","next","addPly","device","moveBack","opening","ChessEcoCodes","openingCode","code","lg","Button","faStepBackward","faStepForward","GlobalHeader","useState","setIsOpen","modal","setModal","toggleModal","launch","url","open","Navbar","light","expand","width","NavbarBrand","href","NavbarToggler","navbar","Nav","NavItem","NavLink","faDiscord","toggleFeedback","faComments","UncontrolledDropdown","DropdownToggle","nav","DropdownMenu","right","DropdownItem","divider","Modal","toggle","ModalHeader","ListGroup","ListGroupItem","tag","ModalFooter","Source","source","addNumber","Badge","ExpansionPanelSummary","aria-controls","id","getSourceOption","ExpansionPanelDetails","RadioGroup","siteChange","Radio","Divider","Dropzone","newFiles","filesChange","acceptedFiles","dropzoneText","handleFileChange","dropzoneParagraphClass","showFileNames","useChipsForPreview","previewChipProps","dropzoneClass","filesLimit","maxFileSize","NotableChessGames","updateDetails","option","profile","imageUrl","subText","list","options","selectedDetail","placeholder","renderOption","renderDetails","selectedPlayer","selectedEvent","playerNameError","player","validateInputDetailsSet","playerDetailsChange","finalPlayerName","helperText","TextField","editPlayerName","onKeyUp","playerNameKeyUp","setPlayerDetails","notablePlayers","notablePlayerChange","notableEvents","notableEventChange","getPlayerNameInput","Card","CardBody","CardTitle","faInfoCircle","CardText","getPgnFileSelection","getGoatDBEventSelection","getGoatDBSelection","getOpeningTreeSelection","getInputsToShow","ExpansionPanelActions","PGNLoader","settings","panel","newExpanded","timestamp","now","playername","openingTreeSave","saveVersion","setEntries","importCallback","request","response","gamesDetails","body","newSite","fetchGOATGames","filters","pgnUrl","Filters","SettingsView","eventName","reset","faRetweet","clearAction","faTrashAlt","resetAction","faFastBackward","analyse","faDesktop","ControlsContainer","stopPropagation","simplifiedView","multiline","rowsMax","inputProps","style","fontSize","spellCheck","copyFen","moveDetails","getFenField","switchToUserTab","faUser","performanceDetails","Table","eatClicks","isNaN","TableHead","TableRow","TableCell","TableBody","launchGame","faExternalLinkAlt","removeQuestionMarksFromDate","TableFooter","colSpan","rel","indexOf","MovesList","openPerformanceIndex","onMove","prevProps","prevState","turnColor","moveIndex","movesToShow","resultsTable","movesTable","whitePlayer","blackPlayer","elo","performancePopoverOpen","openMove","Popover","trigger","togglePerformancePopover","sampleResultWhite","sampleResultBlack","sampleResult","getPopover","Progress","multi","bar","activeTab","activeGame","game","tab","headers","tabs","classnames","active","faChartBar","faCog","TabContent","TabPane","tabId","settingsChange","updateProcessedGames","turn","brushes","forBrushes","againstBrushes","calcMovable","dests","SQUARES","s","ms","moves","square","verbose","m","free","orientation","promotion","lastMove","onMoveAction","navigateTo","previousMove","parsedGame","totalGamesProcessed","addPGN","latestFen","downloadingGames","moveToShape","brush","autoShapes","shapes","fillArray","movesForFen","gameResultsForFen","len","trackingEvent","subMessage","errorActionText","errorAction","messageSeverity","trackingLabel","closeError","diagnosticsOpen","feedbackOpen","diagnosticsDataOpen","toggleDiagnosticsData","copyDiagnostics","importGameState","importState","getChessboardWidth","innerWidth","getDiagnosticsValue","navigator","userAgent","getRedditLink","getSubject","getBody","getEmailLink","addStateManagement","obj","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","InfoIcon","theme","backgroundColor","green","palette","dark","primary","amber","iconVariant","opacity","marginRight","spacing","alignItems","classes","onClose","actionText","showReportButton","other","Icon","SnackbarContent","clsx","aria-describedby","IconButton","aria-label","close","MainContainer","chessboardWidth","lastMoveArray","snackBarOpen","order","xs","movable","drawable","enabled","visible","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ModalBody","ReactDOM","render","LICHESS_TIME_CONTROLS","CHESS_DOT_COM_TIME_CONTROLS","TIME_CONTROL_LABELS","DP_TABLE","isAdvancedFiltersEnabled","isFilterPanelEnabled","treeSaveDisabledReason","selectedSite","exportFileName","extension"],"mappings":"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","file":"static/js/main.8686e957.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\nReactGA.initialize('UA-159149755-1');\n\nexport function trackPageView() {\n    ReactGA.pageview(window.location.pathname);\n}\n\nexport function trackEvent(category, action, label, value) {\n    ReactGA.event({\n        category: category,\n        action: action,\n        label: label,\n        value: value\n      })\n}","import zlib from 'zlib'\nimport {Buffer} from 'buffer'\nimport { saveAs } from 'file-saver';\n\nexport function serializeOpeningTree(treeData, filename, callback) {\n    let chunkedArray = chunk(treeData)\n    let deflatedChunks = []\n    //push version number 1 for later backward compatibility\n    deflatedChunks.push(packControlWord(0x1))\n    deflatedChunks.push(packControlWord(chunkedArray.length))\n    let remainingChunks = chunkedArray.length\n    let hasError = false;\n    chunkedArray.forEach((chunk)=>{\n        zlib.deflate(\n            new Buffer(JSON.stringify(chunk)), \n            (error,data)=>{\n                remainingChunks--\n                if(error) {\n                    hasError = true\n                }\n                deflatedChunks.push(packControlWord(data.byteLength))\n                deflatedChunks.push(data)\n                if(remainingChunks<=0) {\n                    if(hasError) {\n                        callback(\"Could not save file\")\n                        return\n                    }\n                    saveAs(new Blob(deflatedChunks, {type: \"application/octet-stream\"}), filename)\n                    callback(null, `Saved opening tree to file ${filename}`)\n                }\n            });\n        })\n}\n\nexport function deserializeOpeningTree(file, callback) {\n    let reader = new FileReader()\n    reader.onload = function(evt) {\n        let data = evt.target.result\n        let index = 0\n        let version = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        if(version !== 0x1) {\n            callback(\"File is not an openingtree save file.\", null,\"Are you loading the correct file?\")\n            return\n        }\n        let numChunks = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        if(!numChunks) {\n            callback(\"Input file not in correct format\", null)\n            return\n        }\n        getInflatedChunks(data, index, numChunks, callback)\n    };\n    reader.onerror = function(e) {\n        callback(\"Failed to read openingtree file\", null, `${e.target.error.name}:${e.target.error.message}`)\n    }\n    reader.readAsArrayBuffer(file)\n}\n\nfunction getInflatedChunks(data, startIndex, numChunks, callback) {\n    let index = startIndex\n    let deflatedChunks = []\n    let remainingChunks = numChunks\n    let hasError=false\n    let handleInflate = (error, data)=> {\n        remainingChunks--\n        if(error) {\n            console.log(error)\n            hasError=true\n        }\n        try {\n            deflatedChunks.push(JSON.parse(data))\n        } catch (e) {\n            console.log(e)\n            hasError=true\n        }\n        if(remainingChunks===0) {\n            if(hasError) {\n                callback(\"Input file seems corrupted\", null)\n            }\n            \n            callback(null, reconstructObjectFromChunks(deflatedChunks))\n        }\n        \n    }\n    while(numChunks>0) {\n        let chunkSize = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        zlib.inflate(\n            Buffer.from(data,index,chunkSize), handleInflate)\n        index = index + chunkSize\n        numChunks--\n    }\n}\n\nfunction reconstructObjectFromChunks(deflatedChunks) {\n    let sortedChunks = deflatedChunks.sort((a,b)=>a.index-b.index)\n    let flattenedChunks = sortedChunks.slice(1).map(el=>el.chunk).flat()\n    let header = sortedChunks[0]\n    let arrays = []\n    let index = 0\n    header.arraySizes.forEach((size)=>{\n        arrays.push(flattenedChunks.slice(index,index+size))\n        index+=size\n    })\n    return {\n        header:header.chunk,\n        arrays:arrays\n    }\n}\n\nfunction unpackControlWord(control) {\n    let view = new DataView(control)\n    if(view.getUint16(0)!==0x1337 || view.getUint16(6)!==0xC0D3) {\n        return null\n    }\n    return view.getUint32(2)\n}\n\nfunction packControlWord(control) {\n    var buffer = new ArrayBuffer(8); \n    var view = new DataView(buffer); \n    view.setUint16(0, 0x1337)\n    view.setUint32(2, control>>>0)\n    view.setUint16(6, 0xC0D3)\n    return buffer\n}\n\nfunction chunk(treeData) {\n    let chunk1 = {chunk:treeData.header, index:0, \n        arraySizes:treeData.arrays.map(arr=>arr.length)}\n    let chunks = [chunk1]\n    treeData.arrays.forEach((array)=>{\n        Array.prototype.push.apply(chunks, chunkArray(array, 1000, chunks.length));\n    })\n    return chunks\n}\n\nfunction chunkArray(array, chunkSize, startIndex) {\n    let chunkedArray=[]\n    \n    for (let i=0, chunkIndex=1; i<array.length; i+=chunkSize, chunkIndex++) {\n        chunkedArray.push({chunk:array.slice(i,i+chunkSize), index:startIndex+chunkIndex});\n    }\n    return chunkedArray\n}\n","import { withStyles } from '@material-ui/core/styles';\nimport MuiExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport React from 'react'\nimport { createSubObjectWithProperties } from '../../app/util'\nimport * as Constants from '../../app/Constants'\n\nexport const ExpansionPanel = withStyles({\n    root: {\n        border: '1px solid rgba(0, 0, 0, .125)',\n        boxShadow: 'none',\n        '&:not(:last-child)': {\n            borderBottom: 0,\n        },\n        '&:before': {\n            display: 'none',\n        },\n        '&$expanded': {\n            margin: 'auto',\n        },\n    },\n    expanded: {},\n})(MuiExpansionPanel);\n\nexport function getNumberIcon(n) {\n    return <img alt={`step ${n}`} className = 'lowOpacity styledNumbers' src={`/images/styled-${n}.png`} height={24}/>\n}\n\nexport function advancedFilters(state) {\n    return createSubObjectWithProperties(state,\n        [Constants.TIME_CONTROL_ULTRA_BULLET, Constants.TIME_CONTROL_BULLET,\n        Constants.TIME_CONTROL_BLITZ, Constants.TIME_CONTROL_RAPID,\n        Constants.TIME_CONTROL_CORRESPONDENCE, Constants.TIME_CONTROL_DAILY,\n        Constants.TIME_CONTROL_CLASSICAL, Constants.FILTER_NAME_RATED,\n        Constants.FILTER_NAME_SELECTED_TIMEFRAME, Constants.FILTER_NAME_DOWNLOAD_LIMIT,\n        Constants.FILTER_NAME_ELO_RANGE])\n}\n\nexport function copyText(elementId) {\n    /* Get the text field */\n    var copyText = document.getElementById(elementId);\n    try {\n        /* Select the text field */\n        copyText.select();\n        copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n        /* Copy the text inside the text field */\n        document.execCommand(\"copy\");\n        return true\n    } catch(e) {\n        return false\n    }\n}","export const TIME_CONTROL_ULTRA_BULLET = \"ultraBullet\"\nexport const TIME_CONTROL_BULLET = \"bullet\"\nexport const TIME_CONTROL_BLITZ = \"blitz\"\nexport const TIME_CONTROL_RAPID = \"rapid\"\nexport const TIME_CONTROL_CLASSICAL = \"classical\"\nexport const TIME_CONTROL_CORRESPONDENCE = \"correspondence\"\nexport const TIME_CONTROL_DAILY = \"daily\"\nexport const FILTER_NAME_RATED = \"rated\"\nexport const FILTER_NAME_SELECTED_TIMEFRAME = \"selectedTimeframe\"\nexport const FILTER_NAME_DOWNLOAD_LIMIT = \"downloadLimit\"\nexport const FILTER_NAME_ELO_RANGE = \"eloRange\"\n\nexport const SITE_LICHESS = \"lichess\"\nexport const SITE_CHESS_DOT_COM = \"chesscom\"\nexport const SITE_PGN_FILE = \"pgnfile\"\nexport const SITE_EVENT_DB = \"eventdb\"\nexport const SITE_PLAYER_DB = \"playerdb\"\nexport const SITE_OPENING_TREE_FILE = \"opntfile\"\n\nexport const MAX_DOWNLOAD_LIMIT = 2000\nexport const MAX_ELO_RATING = 3000\n\nexport const EVENT_CATEGORY_PGN_LOADER = \"loader\"\nexport const EVENT_CATEGORY_MOVES_LIST = \"moves\"\nexport const EVENT_CATEGORY_CONTROLS = \"controls\"\nexport const EVENT_CATEGORY_NAVIGATOR = \"navigator\"\nexport const EVENT_CATEGORY_CHESSBOARD = \"chessboard\"\nexport const EVENT_CATEGORY_ERROR = \"error\"\nexport const EVENT_CATEGORY_MESSAGE_SHOWN = \"message\"\n\nexport const ROOT_FEN = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\n\nexport const PLAYER_COLOR_WHITE = 'white'\nexport const PLAYER_COLOR_BLACK = 'black'\n\nexport const LOADER_ANIMATION_DURATION_MS = 500\n\nexport const OPENING_TREE_EMAIL = 'feedback@openingtree.com'\nexport const OPENNIG_TREE_REDDIT = 'opening_tree'\nexport const OPENING_TREE_LICHESS = 'vannooz'\nexport const OPENING_TREE_CHESS_COM = 'vannooz'\nexport const OPENING_TREE_DISCORD = 'https://discord.gg/hCwKkN8'\n\nexport const OPENING_TREE_FILE_CURRENT_VERSION = 2\n\nexport const ERROR_ACTION_REPORT = 'report'\nexport const ERROR_ACTION_VISIT_OLD_SITE = 'visitOld'","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport {ExpansionPanel} from './Common'\nimport * as Constants from '../../app/Constants'\nimport { Collapse } from 'reactstrap'\nimport { trackEvent } from '../../app/Analytics'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Button as MaterialUIButton } from '@material-ui/core'\nimport { faCaretDown, faCaretUp} from '@fortawesome/free-solid-svg-icons'\nimport AdvancedFilters from './AdvancedFilters'\nimport {advancedFilters} from './Common'\nimport MuiCollapse from '@material-ui/core/Collapse';\nimport * as SitePolicy from '../../app/SitePolicy'\nimport { Radio, FormControlLabel, RadioGroup, FormHelperText, FormControl, FormLabel} from '@material-ui/core';\nimport deepEqual from 'deep-equal'\n\nexport default class User extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerColor: this.props.playerColor,\n            isAdvancedFiltersOpen: false\n        }\n        this.timeframeSteps=this.props.timeframeSteps\n        Object.assign(this.state, this.props.advancedFilters)\n        this.defaultAdvancedFilters = this.props.advancedFilters\n    }\n\n    toggleRated() {\n        if (this.state.rated === 'all') {\n            this.setState({ rated: 'rated' })\n        } else if (this.state.rated === 'rated') {\n            this.setState({ rated: 'casual' })\n        } else {\n            this.setState({ rated: 'all' })\n        }\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"AdvancedFilterChange\", \"rated\")\n    }\n    toggleState(property) {\n        return () => {\n            let newState = {}\n            newState[property] = !this.state[property]\n            this.setState(newState)\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ToggleAdvancedFilters\", this.state.site)\n        }\n    }\n    playerColorChange(event) {\n        let playerColor = event.target.value\n        this.setState({ playerColor: playerColor })\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ColorChange\", playerColor)\n        if(!SitePolicy.isAdvancedFiltersEnabled(this.props.site)) {\n            setImmediate(this.setFilters.bind(this))\n        }\n}\n    handleTimeControlChange(event) {\n        this.setState({ [event.target.name]: event.target.checked });\n    }\n    handleTimeframeChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_SELECTED_TIMEFRAME]: newValue });\n    }\n    handleEloRangeChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_ELO_RANGE]: newValue });\n    }\n    handleDownloadLimitChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_DOWNLOAD_LIMIT]: newValue });\n    }\n\n    setFilters(){\n        if(!this.state.playerColor) {\n            this.setState({colorError:\"Please select a color\"})\n            return\n        }\n        this.setState({colorError:\"\", isAdvancedFiltersOpen:false})\n        this.props.filtersChange(this.state)\n    }\n    getSummary(isDisabled) {\n        if(this.props.playerColor && !isDisabled) {\n            return <span>\n                {getNumberIcon('done')}\n                Color: <b>{this.props.playerColor===Constants.PLAYER_COLOR_WHITE?\"White\":\"Black\"} </b>\n                {this.areAdvancedFiltersApplied()?<span className=\"smallText\">(Filters applied)</span>:null}</span>\n\n        }\n        return <span>{getNumberIcon(3)} Color and filters</span>\n    }\n    componentWillReceiveProps(newProps) {\n        this.setState({...newProps.advancedFilters, playerColor:newProps.playerColor})\n    }\n\n    areAdvancedFiltersApplied(){\n        for (let [key, value] of Object.entries(this.defaultAdvancedFilters)) {\n            if(this.props.advancedFilters[key]===value) {\n                continue\n            }\n            if(!deepEqual(this.props.advancedFilters[key], value)) {\n                return true\n            } \n        }\n        return false\n    }\n\n    \n    render(){\n        let isDisabled = !SitePolicy.isFilterPanelEnabled(this.props.site, this.props.playerName, this.props.selectedNotablePlayer)\n        return <ExpansionPanel expanded={this.props.expandedPanel === 'filters'}\n                    TransitionComponent={MuiCollapse}\n                    TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n            onChange={this.props.handleExpansionChange}\n            disabled={isDisabled}>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>{this.getSummary(isDisabled)}</ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <div className=\"pgnloaderfirstsection\">\n                <FormControl component=\"fieldset\" error={!!this.state.colorError}>\n                    <FormLabel component=\"legend\">Games where <b>{this.props.playerName}</b> is playing as:</FormLabel>\n                    <RadioGroup onChange={this.playerColorChange.bind(this)} value={this.state.playerColor}>\n                        <FormControlLabel className=\"whitelabel\" control={<Radio color=\"primary\" />} value={Constants.PLAYER_COLOR_WHITE} label={this.state.playerColor === Constants.PLAYER_COLOR_WHITE?<b>White</b>:\"White\"}/>\n                        <FormControlLabel className=\"blacklabel\" control={<Radio color=\"primary\" />} value={Constants.PLAYER_COLOR_BLACK} label={this.state.playerColor === Constants.PLAYER_COLOR_BLACK?<b>Black</b>:\"Black\"}/>\n                    </RadioGroup>\n                    <FormHelperText>{this.state.colorError}</FormHelperText>\n                </FormControl>\n                </div>\n                {SitePolicy.isAdvancedFiltersEnabled(this.props.site)?<div className=\"pgnloadersection\"><span className=\"linkStyle\" onClick={this.toggleState('isAdvancedFiltersOpen').bind(this)}>Advanced filters <FontAwesomeIcon icon={this.state.isAdvancedFiltersOpen ? faCaretUp : faCaretDown} /></span>\n                    <Collapse isOpen={this.state.isAdvancedFiltersOpen}>\n                            <AdvancedFilters\n                                site={this.props.site}\n                                toggleRated={this.toggleRated.bind(this)}\n                                handleTimeControlChange={this.handleTimeControlChange.bind(this)}\n                                handleTimeframeChange={this.handleTimeframeChange.bind(this)}\n                                handleEloRangeChange={this.handleEloRangeChange.bind(this)}\n                                timeframeSteps={this.timeframeSteps}\n                                handleDownloadLimitChange={this.handleDownloadLimitChange.bind(this)}\n                                advancedFilters={advancedFilters(this.state)}\n                            />\n                    </Collapse>\n                </div>:null}\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions>\n                    <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.setFilters.bind(this)}>Continue</MaterialUIButton>\n                </ExpansionPanelActions></ExpansionPanel>\n    \n    }\n}","import React from 'react'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Button as MaterialUIButton } from '@material-ui/core'\nimport PGNReader from '../../app/PGNReaderWorker'\nimport { faList} from '@fortawesome/free-solid-svg-icons'\nimport GetApp from '@material-ui/icons/GetApp'\nimport Equalizer from '@material-ui/icons/Equalizer'\nimport Fade from '@material-ui/core/Fade'\nimport Save from '@material-ui/icons/Save';\nimport * as SitePolicy from '../../app/SitePolicy'\nimport {Tooltip} from '@material-ui/core'\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport {serializeOpeningTree, deserializeOpeningTree} from '../../app/OpeningTreeSerializer'\nimport {proxy} from 'comlink'\n\nexport default class Actions extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {\n            isGamesSubsectionOpen : false,\n            exportingInProgress : false\n        }\n    }\n    unload = () => {\n        if (this.pgnReader) {\n            this.pgnReader.stopDownloading()\n        }\n    }\n    componentDidMount() {\n        window.addEventListener(\"beforeunload\", this.unload);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"beforeunload\", this.unload);\n    }\n    importTreeClicked() {\n        this.setState({exportingInProgress:true})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"LoadTree\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n        setImmediate(this.importOpeningTree.bind(this))\n    }\n    importOpeningTree() {\n        deserializeOpeningTree(this.props.files[0], \n            (err,data, subMesage)=> {\n                if(err) {\n                    this.props.showError(err, null, subMesage)\n                    this.setState({exportingInProgress:false})\n                    return\n                }\n                let success = this.props.importOpeningTreeObject(data)\n                this.setState({exportingInProgress:false})\n                if(success) {\n                    this.props.showInfo(\"Successfuly loaded openingtree\")                \n                }\n            })\n    }\n    exportTreeClicked() {\n        this.setState({exportingInProgress:true})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"SaveTree\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n        setImmediate(this.exportOpeningTree.bind(this))\n    }\n    exportOpeningTree() {\n        serializeOpeningTree(this.props.exportOpeningTreeObject(), \n            SitePolicy.exportFileName(this.props.site, this.props.playerName, this.props.playerColor, null, \"tree\"), \n            (err, info) => {\n                if(err) {\n                    this.props.showError(err)                    \n                } else {\n                    this.props.showInfo(info)\n                }\n                this.setState({exportingInProgress:false})\n            })\n    }\n\n\n    readPgn(shouldDownloadToFile) {\n        new PGNReader().then((readerInstance) => {\n            this.pgnReader = readerInstance\n            let proxycb = proxy(this.props.notify)\n            this.pgnReader.fetchPGNFromSite(this.props.playerName,\n                this.props.playerColor,\n                this.props.site,\n                this.props.selectedNotablePlayer,\n                this.props.selectedNotableEvent,\n                shouldDownloadToFile,\n                this.props.advancedFilters,\n                proxy(this.props.notify),\n                null, //this.props.showError,\n                null,//this.stopDownloading.bind(this),\n                this.props.files)\n        })\n\n\n\n    }\n\n    download() {\n        this.readPgn(true)\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"Download\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n\n    }\n\n    getPlayerName() {\n        if(this.props.site === Constants.SITE_PLAYER_DB) {\n            return this.props.selectedNotablePlayer.name\n        }\n        return this.props.playerName\n    }\n    componentWillReceiveProps(newProps) {\n        if(newProps.gamesProcessed>0) {\n            this.setState({isGamesSubsectionOpen:true})\n        }\n    }\n\n    load() {\n        this.props.clear()\n        this.setState({ isGamesSubsectionOpen: true, loadedSite:this.props.site })\n        // set the player name and color in the global state\n        this.props.onChange(\"playerName\", this.props.playerName)\n        this.props.onChange(\"playerColor\", this.props.playerColor)\n        this.readPgn(false)\n        this.props.setDownloading(true)\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"Load\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n    }\n    stopDownloading() {\n        this.props.setDownloading(false)\n    }\n    stopDownloadingAction() {\n        this.stopDownloading()\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"StopDownloading\", this.props.site)\n    }\n    openingTreeLoadActions() {\n        return <div className=\"pgnloadersection\">\n            <MaterialUIButton\n            onClick={this.importTreeClicked.bind(this)}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={this.state.exportingInProgress?<HourglassEmptyIcon/>:<GetApp/>}\n            className=\"mainButton\" disableElevation\n            disabled={this.state.exportingInProgress}\n            >\n                {this.state.exportingInProgress?\"Loading from file\":\"Load openingtree\"}\n        </MaterialUIButton></div>\n    }\n    regularActions() {\n        let downloadDisabledReason = SitePolicy.treeSaveDisabledReason(\n                                        this.state.loadedSite, \n                                        this.props.site,\n                                        this.props.gamesProcessed, \n                                        this.props.isDownloading)\n        return <div>\n        <div className=\"pgnloadersection\"><MaterialUIButton\n            onClick={this.load.bind(this)}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Equalizer />}\n            className=\"mainButton\" disableElevation\n        >\n            Analyze games\n        </MaterialUIButton></div>\n        <div className=\"pgnloadersection\"><MaterialUIButton\n            onClick={this.download.bind(this)}\n            variant=\"contained\"\n            color=\"default\"\n            startIcon={<GetApp />}\n            className=\"mainButton\" disableElevation\n        >\n            Export as PGN\n        </MaterialUIButton></div>\n        {\n            <div className=\"pgnloadersection\"><Tooltip placement=\"top\" title={downloadDisabledReason||\"Save a .tree file locally for faster reload later\"}>\n                <span><MaterialUIButton\n                onClick={this.exportTreeClicked.bind(this)}\n                variant=\"contained\"\n                color=\"default\"\n                startIcon={this.state.exportingInProgress?<HourglassEmptyIcon/>:<Save/>}\n                className=\"mainButton\" disableElevation\n                disabled={!!downloadDisabledReason || this.state.exportingInProgress}\n                >\n                    {this.state.exportingInProgress?\"Saving to file\":\"Save openingtree\"}\n                </MaterialUIButton></span></Tooltip></div>\n            }\n        {\n            this.state.isGamesSubsectionOpen ?\n                <div>\n                    <div className=\"pgnloadersection\">\n                        {!this.props.playerColor?\"Games\":this.props.playerColor === Constants.PLAYER_COLOR_WHITE?\"White games\":\"Black games\"}{` loaded: ${this.props.gamesProcessed} `}{this.props.isDownloading ? <span className=\"stopDownloading\">[<span className=\"linkStyle\" onClick={this.stopDownloadingAction.bind(this)}><img alt=\"loading spinner\" src=\"./spinner.gif\" height=\"15\" />stop</span>]</span> : \"\"}\n                    </div>\n                    <div onClick={() => this.props.switchToMovesTab()} className=\"navLinkButton pgnloadersection\">\n                        <FontAwesomeIcon icon={faList} /> View Moves>>\n                </div>\n                </div>\n                : \"\"\n        }\n        </div>\n    }\n    mainComponent() {\n        if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            return this.openingTreeLoadActions()\n        }\n        return this.regularActions()\n    }\n    render(){\n        if(this.props.expandedPanel) {\n            return <Fade timeout={Constants.LOADER_ANIMATION_DURATION_MS*2}>\n            {this.mainComponent()}\n        </Fade>\n        }\n        return <Fade in timeout={Constants.LOADER_ANIMATION_DURATION_MS*3}>\n            {this.mainComponent()}\n        </Fade>\n    }\n}","import {wrap} from 'comlink'\n\nconst PGNReader = wrap(new Worker('./PGNReader.js', { type: 'module' }))\n\nexport default PGNReader","import * as Constants from '../../app/Constants'\nimport * as Common from '../../app/Common'\nimport {getTimeControlsArray} from '../../app/util'\n\nlet timeClasses = [\n    {\n        label:\"Fast time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ]\n    },\n    {\n        label:\"Slow time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ\n        ]\n    },\n    {\n        label:\"Reasonable time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BLITZ,\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET\n        ]\n    },\n    {\n        label:\"Exclude slow time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ,\n            Constants.TIME_CONTROL_RAPID\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ]\n    }\n]\n        \n\n\nexport function timeControlLabel(site, timeControlState) {\n    let selectedTimeControls = getTimeControlsArray(site, timeControlState, true)\n    let unselectedTimeControls = getTimeControlsArray(site, timeControlState, false)\n    if(unselectedTimeControls.length === 0 || selectedTimeControls.length === 0) {\n        return \"All time controls\"\n    }\n    if(selectedTimeControls.length === 1) {\n        return Common.TIME_CONTROL_LABELS[selectedTimeControls[0]]\n    }\n    if(unselectedTimeControls.length === 1) {\n        return `All except ${Common.TIME_CONTROL_LABELS[unselectedTimeControls[0]]}`\n    }\n    if(selectedTimeControls.length === 2) {\n        return `${Common.TIME_CONTROL_LABELS[selectedTimeControls[0]]} and ${Common.TIME_CONTROL_LABELS[selectedTimeControls[1]]}`\n    }\n\n    return lichessTimeControlLabel(selectedTimeControls, unselectedTimeControls)\n}\n\nfunction lichessTimeControlLabel(selectedTimeControls, unselectedTimeControls) {\n    let timeClass = timeClasses.filter(\n        (timeClass) => {\n            return includesAll(unselectedTimeControls,timeClass.unselectedTimeControls)\n                && includesAll(selectedTimeControls,timeClass.selectedTimeControls)\n    })\n    if(timeClass.length) {\n        return timeClass[0].label\n    } \n    return selectedTimeControls.map(control=>Common.TIME_CONTROL_LABELS[control]).join(', ')\n}\n\nfunction includesAll(arr, subArray) {\n    return subArray.every(v => arr.includes(v));\n}\n","import {timeControlLabel} from './TimeControlLabels'\nimport {getSelectedTimeFrameData} from '../../app/util'\nimport * as Constants from '../../app/Constants'\n\nexport const getTimeControlLabel = timeControlLabel\n\nexport function getRatedLabel(rated) {\n    if(rated === 'all') {\n        return \"Rated and casual\"\n    } else if (rated === 'rated') {\n        return \"Rated only\"\n    } else if (rated === 'casual') {\n        return \"Casual only\"\n    }\n}\n\nexport function getWhenPlayedLabel(timeframe, timeframeSteps) {\n    return getSelectedTimeFrameData(timeframe, timeframeSteps).label\n}\n\nexport function getELORangeLabel(selectedEloRange) {\n    if(selectedEloRange[0] === 0 && selectedEloRange[1]===Constants.MAX_ELO_RATING) {\n        return \"All elo ratings\"\n    } else if (selectedEloRange[0] === 0) {\n        return `Below ${selectedEloRange[1]}`\n    } else if (selectedEloRange[1] === Constants.MAX_ELO_RATING) {\n        return `Above ${selectedEloRange[0]}`\n    } else {\n        return `Between ${selectedEloRange[0]} and ${selectedEloRange[1]}`\n    }\n}\nexport function getDownloadLimitLabel(downloadLimit) {\n    return downloadLimit>= Constants.MAX_DOWNLOAD_LIMIT?\"No limit\":`${downloadLimit} games`\n}\n","import FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport React from 'react'\nimport {Collapse, Container, Row, Col} from 'reactstrap'\nimport { FormControlLabel,Slider } from '@material-ui/core';\nimport * as Constants from '../../app/Constants'\nimport {getTimeControlLabel, getELORangeLabel, getRatedLabel, getWhenPlayedLabel, getDownloadLimitLabel} from './FilterLabels'\nimport * as Common from '../../app/Common'\nimport {trackEvent} from '../../app/Analytics'\n\nexport default class AdvancedFilters extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentlyOpenAdvancedFilter:'',\n        }\n        this.timeframeMarks=[\n            {\n                value:0,\n                label:\"Big bang\"\n            }, {\n                value:props.timeframeSteps.length-1,\n                label:\"Now\"\n            }]\n        this.downloadLimitMarks=[\n            {\n                value:0,\n                label:\"0\"\n            }, {\n                value:Constants.MAX_DOWNLOAD_LIMIT,\n                label:`No limit`\n            }]\n        this.eloRangeMarks=[\n            {\n                value:0,\n                label:\"0\"\n            }, {\n                value:Constants.MAX_ELO_RATING,\n                label:`No limit`\n            }]\n    \n    }\n    setCurrentlyOpenAdvancedFilter(filterName) {\n        return () => {\n            if(this.state.currentlyOpenAdvancedFilter === filterName) {\n                //close if already open\n                filterName = ''\n            }\n            this.setState({currentlyOpenAdvancedFilter:filterName})\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"AdvancedFilterChange\", filterName)\n        }\n    }\n\n    getFilters(site){\n        return <div>\n            {this.subSectionComponent('Mode', getRatedLabel(this.props.advancedFilters.rated), this.props.toggleRated)}\n            {this.subSectionComponent('Time control', getTimeControlLabel(this.props.site, this.props.advancedFilters), \n                    this.setCurrentlyOpenAdvancedFilter('timeControl').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'timeControl'}>\n                    {this.getTimeControlFilters(site, 4)}\n                </Collapse>\n            )}\n            {this.subSectionComponent('When played', getWhenPlayedLabel(this.props.advancedFilters[Constants.FILTER_NAME_SELECTED_TIMEFRAME], this.props.timeframeSteps), \n                this.setCurrentlyOpenAdvancedFilter('whenPlayed').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'whenPlayed'}>\n                    {this.getTimeFrameFilters()}\n                </Collapse>)}\n            {this.subSectionComponent('Opponent elo range', getELORangeLabel(this.props.advancedFilters[Constants.FILTER_NAME_ELO_RANGE]), \n                this.setCurrentlyOpenAdvancedFilter('eloRange').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'eloRange'}>\n                    {this.getEloRangeFilters()}\n                </Collapse>)}\n            {this.subSectionComponent('Download limit', getDownloadLimitLabel(this.props.advancedFilters[Constants.FILTER_NAME_DOWNLOAD_LIMIT]), \n                this.setCurrentlyOpenAdvancedFilter('downloadLimit').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'downloadLimit'}>\n                    {this.getDownloadLimitFilters()}\n                </Collapse>)}\n      </div>\n    }\n\n    getDownloadLimitFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_DOWNLOAD_LIMIT]}\n            onChange={this.props.handleDownloadLimitChange}\n            valueLabelDisplay=\"auto\"\n            valueLabelFormat={(val)=>val>=Constants.MAX_DOWNLOAD_LIMIT?\"All\":val}\n            step={100}\n            min={0}\n            marks={this.downloadLimitMarks}\n            max={Constants.MAX_DOWNLOAD_LIMIT}\n        />\n    }\n\n    getTimeFrameFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_SELECTED_TIMEFRAME]}\n            onChange={this.props.handleTimeframeChange}\n            valueLabelDisplay=\"off\"\n            valueLabelFormat={(val)=>this.props.timeframeSteps[val].label}\n            step={1}\n            marks={this.timeframeMarks}\n            min={0}\n            max={this.props.timeframeSteps.length-1}\n        />\n    }\n\n    getEloRangeFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_ELO_RANGE]}\n            onChange={this.props.handleEloRangeChange}\n            valueLabelDisplay=\"off\"\n            marks={this.eloRangeMarks}\n            min={0}\n            max={Constants.MAX_ELO_RATING}\n        />\n    }\n\n    getTimeControlFilters(site){\n        let firstRow = null, middleRow = null, lastRow = null\n        let colWidth = null\n        if(site === 'lichess') {\n            firstRow = [Constants.TIME_CONTROL_BULLET,\n                        Constants.TIME_CONTROL_ULTRA_BULLET]\n            middleRow = [Constants.TIME_CONTROL_BLITZ,\n                        Constants.TIME_CONTROL_CLASSICAL]\n            lastRow = [Constants.TIME_CONTROL_RAPID,\n                        Constants.TIME_CONTROL_CORRESPONDENCE]\n            colWidth = '4'\n                    \n        } else {\n            firstRow = [Constants.TIME_CONTROL_BULLET,\n                        Constants.TIME_CONTROL_BLITZ]\n            lastRow = [Constants.TIME_CONTROL_RAPID, \n                        Constants.TIME_CONTROL_DAILY]\n            colWidth = '6'\n        }\n        return <FormControl><FormGroup><Container>\n            {this.getTimeControlFilterRow(firstRow,colWidth,'first')}\n            {middleRow?this.getTimeControlFilterRow(middleRow,colWidth,'middle'):null}\n            {this.getTimeControlFilterRow(lastRow,colWidth,'last')}\n          </Container>\n        </FormGroup></FormControl>\n      \n    }\n\n    getTimeControlFilterRow(controls,firstColumnWidth, position){\n        let clsName = 'topBottomNegativeMargin'\n        if(position === \"first\") {\n            clsName = 'bottomNegativeMargin'\n        } else if (position === \"last\") {\n            clsName = 'topNegativeMargin'\n        } \n        return <Row className={clsName}>\n            {controls.map((control) => \n            <Col sm={firstColumnWidth} key={`ctrl${control}`}>\n                \n            <FormControlLabel className = \"nomargin\"\n                control={<Checkbox checked={this.props.advancedFilters[control]} color=\"primary\" \n                onChange={this.props.handleTimeControlChange} name={control} />}\n                label={Common.TIME_CONTROL_LABELS[control]}\n          /></Col>)}</Row>\n    }\n\n    subSectionComponent(title, label, changeCallback, children) {\n        return <div className=\"pgnloadersection\">{title}: <span className=\"smallText\">[<span className=\"linkStyle\" onClick={changeCallback}>change</span>]</span>\n        <div><b>{label}</b></div>{children}\n        </div>\n    }\n\n\n    render() {\n        return this.getFilters(this.props.site)\n    }\n\n}","module.exports = __webpack_public_path__ + \"static/js/0.7e5de2e5.chunk.worker.js\"","import * as Constants from '../app/Constants'\nimport * as Common from '../app/Common'\n\nexport function createSubObjectWithProperties(mainObject, properties) {\n    let subObject = {}\n    properties.forEach(property => {\n        subObject[property] = mainObject[property]\n    });\n    return subObject\n}\nexport function simplifiedFen(fen) {\n    let fenComponents = fen.split(' ')\n    if(fenComponents.length <=4) {\n        return fen\n    }\n    //exclude move and halfMove components\n    return `${fenComponents[0]} ${fenComponents[1]} ${fenComponents[2]}`\n}\n\nexport function getTimeControlsArray(site,timeControlState, selected) {\n    let allTimeControls = site === Constants.SITE_LICHESS ? \n        Common.LICHESS_TIME_CONTROLS : Common.CHESS_DOT_COM_TIME_CONTROLS\n    return allTimeControls.filter((timeControl)=>!!timeControlState[timeControl] === selected)\n}\nlet monthLabels = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n]\nexport function getTimeframeSteps() {\n    let steps = [{\n        year:2007,\n        value:0\n    }]\n    let value = 1;\n    let startYear = 2010\n    let currentYear = new Date().getFullYear()\n    let currentMonth = new Date().getMonth()\n    while(startYear < currentYear-1) {\n        steps.push({\n            toLongLabel:`${monthLabels[11]} ${startYear}`,\n            fromLongLabel:`${monthLabels[0]} ${startYear}`,\n            year:startYear,\n            value:value\n        })\n        startYear++\n        value++\n    }\n    for(let i=11;i>0;i--) {\n\n        let month = (currentMonth+12-i)%12\n        let year = month<currentMonth?currentYear:currentYear-1\n        steps.push({\n            fromLongLabel: `${monthLabels[month]} ${year}`,\n            toLongLabel: `${monthLabels[month]} ${year}`,\n            month:month,\n            year: year,\n            value:value\n        })\n        value++\n    }\n    steps.push({\n        month:12,\n        year: currentYear,\n        value:value\n    })\n    return steps\n}\n\nexport function getSelectedTimeFrameData(timeframe, timeframeSteps) {\n    let fromIndex = timeframe[0]\n    let toIndex = timeframe[1]\n    let fromTimeframe = timeframeSteps[fromIndex]\n    let toTimeframe = timeframeSteps[toIndex]\n    \n    if(fromIndex === timeframeSteps.length-1 && toIndex === timeframeSteps.length-1) {\n        let currentDate = new Date()\n        return {\n            label:\"Current month\",\n            fromMonth:currentDate.getMonth(),\n            fromYear:currentDate.getFullYear(),\n            fromTimeStamp:getTimeStampInfoFor(currentDate.getMonth(), currentDate.getFullYear(), \"min\")\n        }\n    }\n    if(fromIndex === 0 && toIndex === 0) {\n        return {label:\"Anytime\"}\n    }\n    if(fromIndex === 0 && toIndex === timeframeSteps.length-1) {\n        return {label:\"Anytime\"}\n    }\n    if(toIndex === timeframeSteps.length-1) {\n        let month = fromTimeframe.month ? fromTimeframe.month : 0\n        return {\n            label:`Since ${fromTimeframe.fromLongLabel}`,\n            fromYear: fromTimeframe.year,\n            fromMonth: month,\n            fromTimeStamp: getTimeStampInfoFor(month, fromTimeframe.year, \"min\")\n        }\n    }\n    if(fromIndex === 0) {\n        let month = toTimeframe.month ? toTimeframe.month : 11\n        return {\n            label:`Until ${toTimeframe.toLongLabel}`,\n            toYear: toTimeframe.year,\n            toMonth: month,\n            toTimeStamp: getTimeStampInfoFor(month, toTimeframe.year, \"max\")\n        }\n    }\n    let fromMonth = fromTimeframe.month ? fromTimeframe.month : 0\n    let toMonth = toTimeframe.month ? toTimeframe.month : 11\n    return {\n        label:`From ${fromTimeframe.fromLongLabel} to ${toTimeframe.toLongLabel}`,\n        fromYear: fromTimeframe.year,\n        fromMonth: fromMonth,\n        fromTimeStamp: getTimeStampInfoFor(fromMonth, fromTimeframe.year, \"min\"),\n        toYear: toTimeframe.year,\n        toMonth: toMonth,\n        toTimeStamp: getTimeStampInfoFor(toMonth, toTimeframe.year, \"max\")\n    }\n}\n\nfunction getTimeStampInfoFor(month, year, minOrMax) {\n    if(minOrMax === \"min\") {\n        return new Date(year, month).getTime()\n    } else {\n        return new Date(year,month,getDaysInMonth(year, month)).getTime()\n    }\n}\n\nfunction getDaysInMonth(year,month) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function getPerformanceDetails(totalElo, white, draws, black, playerColor) {\n    let totalGames = white + draws + black\n    let averageElo = Math.round(totalElo/totalGames)\n    let playerWins = playerColor === Constants.PLAYER_COLOR_WHITE?white:black\n    let playerLosses = playerColor !== Constants.PLAYER_COLOR_WHITE?white:black\n    let score = playerWins+(draws/2)\n    let scorePercentage = Math.round(score*100/totalGames)\n    let ratingChange = Common.DP_TABLE[scorePercentage]\n    return {\n        results:`+${playerWins}-${playerLosses}=${draws}`,\n        performanceRating:averageElo+ratingChange,\n        averageElo: averageElo,\n        score:`${Number.isInteger(score)?score:score.toFixed(1)}/${totalGames}`,\n        ratingChange:`${ratingChange===0?'':(ratingChange>0?'+':'-')}${Math.abs(ratingChange)}`\n    }\n}\n\nexport function isOpponentEloInSelectedRange(elo, range) {\n    if(range[1]===Constants.MAX_ELO_RATING) {\n        return elo>=range[0]\n    }\n    return elo<=range[1] && elo>=range[0]\n}\n\nexport function isDateMoreRecentThan(date, than) {\n    // give priority to game which has a date\n    if(!than) {\n        return false\n    }\n    if(!date) {\n        return true\n    } \n    return new Date(date)>new Date(than)\n}","import {simplifiedFen, isDateMoreRecentThan} from './util'\nimport * as Constants from './Constants'\nimport Chess from 'chess.js'\n\nclass OpeningGraph {\n    constructor() {\n        this.graph=new Graph()\n        this.hasMoves = false\n    }\n    setEntries(arrayEntries, pgnStats){\n        this.graph=new Graph(arrayEntries, pgnStats)\n        this.hasMoves = true\n    }\n\n    clear() {\n        this.graph = new Graph()\n        this.hasMoves = false\n    }\n\n    addPGN(pgnStats, parsedMoves, lastFen, playerColor) {\n        pgnStats.index = this.graph.pgnStats.length\n        this.graph.pgnStats.push(pgnStats)\n        this.graph.playerColor = playerColor\n        this.hasMoves = true\n        parsedMoves.forEach(parsedMove => {\n            this.addMoveForFen(parsedMove.sourceFen, parsedMove.targetFen, parsedMove.moveSan, pgnStats)\n        })\n        this.addGameResultOnFen(lastFen, pgnStats.index)\n        this.addStatsToRoot(pgnStats)\n    }\n\n    addGameResultOnFen(fullFen, resultIndex) {\n        var currNode = this.getNodeFromGraph(fullFen)\n        if(!currNode.gameResults) {\n            currNode.gameResults = []\n        }\n        currNode.gameResults.push(resultIndex)\n    }\n    addStatsToRoot(pgnStats) {\n        var targetNode = this.getNodeFromGraph(Constants.ROOT_FEN)\n        if(!targetNode.details) {\n            targetNode.details = emptyDetails()\n        }\n        let newDetails = this.getUpdatedMoveDetails(targetNode.details, pgnStats)\n        targetNode.details = newDetails\n    }\n\n    getDetailsForFen(fullFen) {\n        let details = this.getNodeFromGraph(simplifiedFen(fullFen)).details\n        if (Number.isInteger(details)) {\n            details = this.getUpdatedMoveDetails(emptyDetails(), this.graph.pgnStats[details])\n        } else if(!details) {\n            return emptyDetails()\n        }\n        details = this.updateCalculatedValues(details)   \n        return details\n    }\n\n    updateCalculatedValues(details) {\n        if(Number.isInteger(details.bestWin)) {\n            details.bestWinGame = this.graph.pgnStats[details.bestWin]\n            details.bestWinElo = this.getOpponentElo(this.graph.playerColor,details.bestWinGame)\n        }\n        if(Number.isInteger(details.worstLoss)) {\n            details.worstLossGame = this.graph.pgnStats[details.worstLoss]\n            details.worstLossElo = this.getOpponentElo(this.graph.playerColor,details.worstLossGame)\n        }\n        if(Number.isInteger(details.lastPlayed)) {\n            details.lastPlayedGame = this.graph.pgnStats[details.lastPlayed]\n        }\n        details.count = details.whiteWins+details.blackWins+details.draws\n        return details\n\n    }\n\n    addMoveForFen(fullSourceFen, fullTargetFen, move, resultObject) {\n        var targetNode = this.getNodeFromGraph(fullTargetFen)\n        let newDetails = this.getUpdatedMoveDetails(targetNode.details, resultObject)\n        targetNode.details = newDetails\n\n        var currNode = this.getNodeFromGraph(fullSourceFen)\n        currNode.playedByMax = Math.max(currNode.playedByMax, this.getTargetDetailsCount(targetNode.details))\n        if(!currNode.playedBy) {\n            currNode.playedBy = {}\n        }\n        currNode.playedBy[move] = ''\n    }\n\n    getTargetDetailsCount(targetDetails) {\n        if(!targetDetails) {\n            return 0\n        }\n        if(Number.isInteger(targetDetails)) {\n            //if details is an integer, then this has been played once\n            return 1\n        }\n        return targetDetails.draws+targetDetails.blackWins+targetDetails.whiteWins\n    }\n\n    getNodeFromGraph(fullFen) {\n        let fen = simplifiedFen(fullFen)\n        var currNode = this.graph.nodes.get(fen)\n        if(!currNode) {\n            currNode = new GraphNode()\n            currNode.fen = fen\n            this.graph.nodes.set(fen, currNode)\n        }\n        return currNode\n    }\n\n    getUpdatedMoveDetails(currentMoveDetails, resultObject) {\n        if(Number.isInteger(currentMoveDetails)) {\n            // if this is the second stat object being added\n            // calculate the first move details and then merge it with the second one\n            currentMoveDetails = this.getUpdatedMoveDetails(emptyDetails(),\n                            this.graph.pgnStats[currentMoveDetails])\n        } else if(!currentMoveDetails) {\n            // if this is the first stat being added to this node,\n            // just write the index to calculate the stats later\n            return resultObject.index\n        }\n        \n        let whiteWin = 0, blackWin = 0, draw = 0, resultInt = 0;\n        let playerColor = this.graph.playerColor\n        if(resultObject.result === '1-0') {\n            whiteWin = 1\n            resultInt = playerColor === Constants.PLAYER_COLOR_WHITE? 1 : -1\n        } else if (resultObject.result === '0-1') {\n            blackWin = 1\n            resultInt = playerColor === Constants.PLAYER_COLOR_BLACK? 1 : -1\n        } else {\n            draw = 1\n        }\n\n        let opponentElo = this.getOpponentElo(playerColor, resultObject)\n        if(resultInt === 1) {\n            let currentBestWinGame = null\n            if(Number.isInteger(currentMoveDetails.bestWin)) {\n                currentBestWinGame = this.graph.pgnStats[currentMoveDetails.bestWin]\n            }\n            if(!currentBestWinGame || parseInt(opponentElo)>parseInt(this.getOpponentElo(playerColor, currentBestWinGame))) {\n                currentMoveDetails.bestWin = resultObject.index\n            }\n        }\n        if(resultInt === -1) {\n            let currentWorstLossGame = null\n            if(Number.isInteger(currentMoveDetails.worstLoss)) {\n                currentWorstLossGame = this.graph.pgnStats[currentMoveDetails.worstLoss]\n            }\n            if(!currentWorstLossGame || parseInt(opponentElo)<parseInt(this.getOpponentElo(playerColor, currentWorstLossGame))) {\n                currentMoveDetails.worstLoss = resultObject.index\n            }\n        }\n        let currentLastPlayedGame = null\n        if(Number.isInteger(currentMoveDetails.lastPlayed)) {\n            currentLastPlayedGame = this.graph.pgnStats[currentMoveDetails.lastPlayed]\n        }\n        if(!currentLastPlayedGame || \n            isDateMoreRecentThan(resultObject.date, currentLastPlayedGame.date)) {\n                currentMoveDetails.lastPlayed = resultObject.index\n        }\n        currentMoveDetails.blackWins += blackWin\n        currentMoveDetails.whiteWins += whiteWin\n        currentMoveDetails.draws += draw\n        currentMoveDetails.totalOpponentElo += parseInt(opponentElo)\n        return currentMoveDetails\n    }\n\n    getOpponentElo(playerColor, resultObject) {\n        if(playerColor === Constants.PLAYER_COLOR_WHITE) {\n            return resultObject.blackElo\n        }\n        return resultObject.whiteElo\n    }\n\n    gameResultsForFen(fullFen) {\n        let fen = simplifiedFen(fullFen)\n\n        var currNode = this.graph.nodes.get(fen)\n        if(currNode && currNode.gameResults) {\n            return currNode.gameResults.map((index)=>this.graph.pgnStats[index])\n        }\n        return null\n    }\n    movesForFen(fullFen) {\n        let fen = simplifiedFen(fullFen)\n\n        var currNode = this.graph.nodes.get(fen)\n        if(currNode) {\n            return Array.from(Object.entries(currNode.playedBy)).map((entry)=> {\n                let chess = new Chess(fullFen)\n                let move = chess.move(entry[0], {sloppy: true})\n                let targetNodeDetails = this.getDetailsForFen(chess.fen())\n                return {\n                    orig:move.from,\n                    dest:move.to,\n                    level:this.levelFor(targetNodeDetails.count, currNode.playedByMax),\n                    san:move.san,\n                    details:targetNodeDetails\n                }\n            })\n        }        \n        return null\n    }\n\n    levelFor(moveCount, maxCount){\n        if(maxCount <= 0 ||moveCount/maxCount > 0.8) {\n            return 2\n        }\n        if(moveCount/maxCount>0.3) {\n            return 1\n        }\n        return 0\n    }\n\n}\n\n\nclass Graph {\n    constructor(arrayEntries, pgnStats){\n        this.nodes = new Map()\n        this.pgnStats = []\n        this.playerColor = ''\n        if(arrayEntries) {\n            arrayEntries.forEach((entry)=> {\n                this.nodes.set(entry[0],entry[1])\n            })\n        }\n        if(pgnStats) {\n            this.pgnStats = pgnStats\n        }\n    }\n}\n\nclass GraphNode {\n            playedByMax = 0 // used to keep track of how many times the most frequent move is played for ease of calculation later\n            //playedBy = {}\n            //gameResults = []\n}\n\nfunction emptyDetails() {\n    return {\n//        count: 0,\n        blackWins: 0,\n        whiteWins: 0,\n        draws: 0,\n        totalOpponentElo: 0,\n//        bestWin:null,\n//        bestWinGame:null,\n//        worstLoss:null,\n//        worstLossGame:null,\n        lastPlayed:null\n//        lastPlayedGame:null\n    }\n}\n\nexport const openingGraph = new OpeningGraph()","import * as Constants from './Constants'\n\nexport default class OpeningManager {\n    plys = [{pgn:'', fen:Constants.ROOT_FEN, move:null}]\n    currentIndex = 0\n    addPly(fen,move) {\n        if(this.currentIndex<this.plys.length-1 && this.plys[this.currentIndex+1].move.san === move.san) {\n            this.moveForward()\n            return\n        }\n        this.plys = this.plys.slice(0,this.currentIndex+1)\n        this.plys.push({\n            pgnAsList:this.pgnAsList(move.san),\n            fen: fen,\n            move: move\n        })\n        this.currentIndex++;\n        return this.plys[this.currentIndex]\n    }\n\n    pgnAsList(san) {\n        let pgnSoFar = this.pgnListSoFar()\n        let pgnList\n        if (!pgnSoFar) {\n            pgnList = []\n        } else {\n            pgnList = [...pgnSoFar]\n        }\n        let numPlys = this.plys.length\n        if(numPlys%2 !== 0) {\n            pgnList.push({\n                moveNumber:pgnList.length+1,\n                whitePly:san,\n                blackPly:''\n            })\n        } else {\n            let currMove = pgnList[pgnList.length-1]\n            currMove.blackPly = san\n            pgnList[pgnList.length-1] = currMove\n        }\n        return pgnList\n    }\n\n    currentMove() {\n        return Math.floor((this.currentIndex-1)/2);\n    }\n\n    pgnListSoFar(){\n        return this.plys[this.plys.length-1].pgnAsList\n    }\n\n    fen(){\n        return this.plys[this.currentIndex].fen\n    }\n\n    moveForward() {\n        return this.moveTo(this.currentIndex+1)\n    }\n    moveBack() {\n        return this.moveTo(this.currentIndex-1)\n    }\n    moveTo(index) {\n        if(index>=0 && index<this.plys.length) {\n            this.currentIndex = index\n        }\n        return this.plys[this.currentIndex]\n    }\n\n}","import React from 'react'\nimport ChessEcoCodes from 'chess-eco-codes'\nimport OpeningManager from '../app/OpeningManager'\nimport {Container, Row, Col, Button} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStepForward, faStepBackward } from '@fortawesome/free-solid-svg-icons'\nimport * as Constants from '../app/Constants'\nimport {trackEvent} from '../app/Analytics'\n\nexport default class Navigator extends React.Component {\n    \n    constructor(props){\n        super(props)\n        this.openingManager = new OpeningManager()\n        this.state = {\n            currentMove:0,\n          }      \n          window.addEventListener(\"keydown\",this.keyHandler.bind(this))\n  \n    }\n    keyHandler(e){\n        switch(e.keyCode) {\n          case 37:\n            this.previous(e, \"keyboard\")\n          break\n          case 39:\n            this.next(e, \"keyboard\")\n            break\n          default:\n            break\n\n        }\n      }\n    \n    shouldComponentUpdate(newProps) {\n        //console.log(newProps)\n        if(newProps.fen !== this.openingManager.fen()) {\n            if(newProps.move === null) {\n                this.openingManager = new OpeningManager()\n                return true\n            }\n            this.openingManager.addPly(newProps.fen, newProps.move)\n            return true\n        }\n        return true\n    }\n\n    previous(e, device) {\n        let newState = this.openingManager.moveBack()\n        this.props.onChange(newState.fen, newState.move)\n        this.setState({currentMove:this.openingManager.currentMove()})\n        trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"Previous\", device?device:\"mouse\")\n    }\n\n    next(e, device) {\n        let newState = this.openingManager.moveForward()\n        this.props.onChange(newState.fen, newState.move)\n        this.setState({currentMove:this.openingManager.currentMove()})\n        trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"Next\", device?device:\"mouse\")\n    }\n\n    moveTo(index) {\n        return () => {\n            let newState = this.openingManager.moveTo(index*2+1)\n            this.props.onChange(newState.fen, newState.move)\n            this.setState({currentMove:this.openingManager.currentMove()})\n            trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"move\", null, index)\n        }\n    }\n\n    render(){\n        let opening = ChessEcoCodes(this.openingManager.fen())\n        if (opening) {\n            this.opening = opening.name\n            this.openingCode = opening.code\n        }\n        if(!this.openingManager.pgnListSoFar()) {\n            return <div></div>\n        }\n        return <Container>\n            <Row>\n            <Col lg=\"6\" className=\"navSection\"><Button color=\"\" className= \"settingButton\" onClick= {this.previous.bind(this)}><FontAwesomeIcon icon={faStepBackward} /> prev</Button> </Col>\n            <Col lg=\"6\" className=\"navSection\"><Button color=\"\" className= \"settingButton\" onClick = {this.next.bind(this)}>next <FontAwesomeIcon icon={faStepForward} /></Button></Col></Row>\n            <Row className=\"greyText\">{this.openingCode}: {this.opening}</Row>\n            {\n                this.openingManager.pgnListSoFar().map((move, index)=>\n                    <Row key={`${move.moveNumber}`} onClick={this.moveTo(index).bind(this)} className={`navCol ${this.openingManager.currentMove() === index? 'selectedMove':''}`}>\n                        <Col sm=\"12\" className = \"navMove border\">{`${move.moveNumber}. ${move.whitePly} ${move.blackPly}`}</Col>\n                    </Row>)\n            }\n        </Container>\n    }\n}","import React, { useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faComments, faCaretDown} from '@fortawesome/free-solid-svg-icons'\nimport { faDiscord } from '@fortawesome/free-brands-svg-icons'\nimport * as Constants from '../app/Constants'\n\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalFooter,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  NavItem, NavLink\n} from 'reactstrap'\n\nconst GlobalHeader = (props) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen)\n  const toggleModal = () => setModal(!modal)\n\n  const launch = (url) => {\n    return () => {\n      window.open(url, \"_blank\")\n    }\n  }\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <img src=\"/opening-tree-logo.png\" height=\"32px\" width=\"32px\" alt=\"Logo\"/>\n        <NavbarBrand href=\"/\">&nbsp;OpeningTree.com</NavbarBrand>\n        <NavbarToggler onClick={toggle}/>\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n          <NavItem><NavLink className=\"navLinkButton\" onClick={launch(\"https://www.youtube.com/watch?v=AJ66-HqdpXE\")}>\"It's so powerful\" - IM Eric Rosen <span className=\"smallText\">[Watch video]</span></NavLink></NavItem>\n          </Nav>\n          <Nav className=\"ml-auto\" navbar>\n          <NavItem><NavLink className=\"navLinkButton\" onClick={launch(Constants.OPENING_TREE_DISCORD)}><FontAwesomeIcon icon={faDiscord} className=\"discordIcon\"/> Join our discord</NavLink></NavItem>\n          </Nav>\n          <Nav className=\"\" navbar>\n          <NavItem><NavLink className=\"navLinkButton\" onClick={props.toggleFeedback}><FontAwesomeIcon icon={faComments} className=\"feedbackIcon\"/> Send feedback</NavLink></NavItem>\n          </Nav>\n          <UncontrolledDropdown>\n              <DropdownToggle className=\"bootNavColor\" nav>\n              <FontAwesomeIcon icon={faCaretDown} className=\"moreIcon\"/>More\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem onClick={toggleModal}>\n                  Acknowledgements\n                </DropdownItem>\n                <DropdownItem onClick={launch(\"https://www.openingtree.com/old\")}>\n                  Old version\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem onClick={launch(\"https://lichess.org/\")}>\n                  Lichess\n                </DropdownItem>\n                <DropdownItem onClick={launch(\"https://www.lichess4545.com/\")}>\n                  Lichess4545\n                </DropdownItem>\n                <DropdownItem onClick={launch(\"https://www.chess.com\")}>\n                  Chess.com\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n        </Collapse>\n      </Navbar>\n      \n      <Modal isOpen={modal} toggle={toggleModal}>\n        <ModalHeader toggle={toggleModal}>Acknowledgements</ModalHeader>\n        <ListGroup className=\"acknowledgement\">\n        <ListGroupItem tag=\"a\" href=\"https://lichess.org/api\" target=\"_blank\" action>Lichess API</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.chess.com/club/chess-com-developer-community\" target=\"_blank\" action>Chess.com API</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/ruilisi/react-chessground\" target=\"_blank\" action>ChessGround</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/jhlywa/chess.js\" target=\"_blank\" action>Chess.js</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/niklasf/eco\" target=\"_blank\" action>Eco</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/jimmywarting/StreamSaver.js\" target=\"_blank\" action>StreamSaver.js</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.flaticon.com/authors/google/\" target=\"_blank\" action>Icons made by google</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.flaticon.com/\" target=\"_blank\" action>FlatIcons.com</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.freelogodesign.org\" target=\"_blank\" action>Free logo design</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/kevinludwig/pgn-parser\" target=\"_blank\" action>PGN Parser</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.npmjs.com/package/material-ui-dropzone\" target=\"_blank\" action>Dropzone</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.pgnmentor.com\" target=\"_blank\" action>PGN Mentor</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.twitch.tv/imrosen\" target=\"_blank\" action>IM Eric Rosen</ListGroupItem>\n        </ListGroup>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>Done</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  )\n}\n\nexport default GlobalHeader\n","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport { Radio, FormControlLabel, RadioGroup } from '@material-ui/core';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport {ExpansionPanel} from './Common'\nimport * as Constants from '../../app/Constants'\nimport Backup from '@material-ui/icons/Backup';\nimport People from '@material-ui/icons/People';\nimport Save from '@material-ui/icons/Save';\nimport Divider from '@material-ui/core/Divider';\nimport DateRange from '@material-ui/icons/DateRange';\nimport {Badge} from 'reactstrap'\n\nexport default class Source extends React.Component {\n    getSourceOption(source, addNumber) {\n        if (source === Constants.SITE_LICHESS) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<img alt=\"lichess\" className=\"siteimage\" src=\"./lichesslogo.png\" /><span className=\"sourceName\"> lichess.org </span></span>\n        } else if (source === Constants.SITE_CHESS_DOT_COM) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<img alt=\"chess.com\" className=\"siteimage\" src=\"./chesscomlogo.png\" /></span>\n        } else if (source === Constants.SITE_PGN_FILE) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<Backup className=\"lowOpacity\"/><span className=\"sourceName\"> Upload PGN file</span></span>\n        } else if (source === Constants.SITE_EVENT_DB) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<DateRange className=\"lowOpacity\"/><span className=\"sourceName\"> Notable chess events</span></span>\n        } else if (source === Constants.SITE_PLAYER_DB) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<People className=\"lowOpacity\"/><span className=\"sourceName\"> Notable chess players</span></span>\n        }  else if (source === Constants.SITE_OPENING_TREE_FILE) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<Save className=\"lowOpacity\"/><span className=\"sourceName\"> Openingtree file <Badge className=\"sourceName\" color=\"secondary\">New</Badge></span></span>\n        }\n        return <span>{getNumberIcon(1, addNumber)}Select a source</span>\n    }\n\n    render() {\n        return <ExpansionPanel TransitionComponent={Collapse}\n            TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n            expanded={this.props.expandedPanel === 'source'}\n            onChange={this.props.handleExpansionChange}>\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <div>\n                    {this.getSourceOption(this.props.site, true)}\n                </div>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <RadioGroup onChange={this.props.siteChange} value={this.props.site}>\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_LICHESS} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_LICHESS)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_CHESS_DOT_COM} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_CHESS_DOT_COM)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_OPENING_TREE_FILE} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_OPENING_TREE_FILE)} />\n                    <Divider className=\"dividerMargin\"/>\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_PLAYER_DB} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_PLAYER_DB)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_EVENT_DB} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_EVENT_DB)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_PGN_FILE} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_PGN_FILE)} />\n               </RadioGroup>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n        \n    }\n}","import React from 'react'\nimport {DropzoneArea} from 'material-ui-dropzone'\nimport { trackEvent } from '../../app/Analytics'\nimport * as Constants from '../../app/Constants'\n\nexport default class Dropzone extends React.Component{\n    handleFileChange(newFiles) {\n      trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"FileSaved\", newFiles.length>0?newFiles[0].name:null)\n      this.props.filesChange(newFiles)\n    }\n    render(){\n      return (\n        <DropzoneArea \n        acceptedFiles={[]}\n        dropzoneText={this.props.dropzoneText}\n          onChange={this.handleFileChange.bind(this)}\n          dropzoneParagraphClass=\"dropzonetext\"\n          showFileNames={true}\n          useChipsForPreview={true}\n          previewChipProps={{className:\"previewChip\"}}\n          dropzoneClass=\"dropzone\"\n          filesLimit={this.props.filesLimit}\n          maxFileSize={3000000000000}\n          />\n      )  \n    }\n  } ","import SelectSearch from 'react-select-search';\nimport React from 'react'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nexport default class NotableChessGames extends React.Component {\n\n    updateDetails = (value) => {\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"NotableGameSelected\", value.value)\n        this.props.onChange(value)\n    }\n    \n    renderDetails(option) {\n        return (<div>\n                <span><LazyLoadImage alt={option.name} className=\"profilePicture\" width=\"40\" height=\"40\" src={option.profile.imageUrl} /></span>\n                <div>{option.name}</div>\n                <div className=\"smallText\">{option.profile.subText}</div>\n                </div>);\n    }\n    render() {\n        if(!this.props.list) {\n            return <div className=\"lowOpacity textCenter\"><img alt=\"loading\" width='25' height='25' src=\"./spinner.gif\"/> Loading List</div>\n        } else if(!this.props.list.length) {\n            return <div className=\"lowOpacity textCenter\"> Could not fetch list</div>\n        }\n        let options = this.props.list.map(option=>{return {...option, value:option.name}})\n        return <SelectSearch\n            name=\"goatPlayers\"\n            value={this.props.selectedDetail.value}\n            options={options}\n            placeholder={this.props.placeholder}\n            renderOption={this.renderDetails}\n            onChange={this.updateDetails}\n        />\n    }\n}\n","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport { Button as MaterialUIButton, TextField } from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport {ExpansionPanel} from './Common'\nimport * as Constants from '../../app/Constants'\nimport Collapse from '@material-ui/core/Collapse';\nimport Dropzone from './Dropzone'\nimport NotableChessGames from './NotableChessGames';\nimport {Card, CardBody, CardText, CardTitle} from 'reactstrap'\n\nexport default class User extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerName:'',\n            files:[],\n            selectedPlayer:{},\n            selectedEvent:{}\n        }\n    }\n\n    editPlayerName(event) {\n        this.setState({\n            playerName: event.target.value,\n            playerNameError:''\n        })\n    }\n\n    filesChange(files) {\n        this.setState({files:files})\n    }\n\n    notablePlayerChange(player) {\n        this.setState({\n            selectedPlayer:player})\n    }\n    notableEventChange(event) {\n        this.setState({\n            selectedEvent:event})\n    }\n\n    componentWillReceiveProps() {\n        this.setState({playerNameError:''})\n    }\n\n    validateInputDetailsSet() {\n        if(this.props.site === Constants.SITE_EVENT_DB){\n            if(!this.state.selectedEvent){\n                this.props.showError(\"Please select an event\")\n                return false\n            } \n        } else if(this.props.site === Constants.SITE_PLAYER_DB){\n            if(!this.state.selectedPlayer){\n                this.props.showError(\"Please select a player\")\n                return false\n            } \n        } else if(this.props.site === Constants.SITE_LICHESS ||\n            this.props.site === Constants.SITE_CHESS_DOT_COM) {\n                if(!this.state.playerName){\n                    this.setState({\n                        playerNameError:'Please enter a username'\n                    })\n                    return false\n                } \n        } else if(this.props.site === Constants.SITE_PGN_FILE) {\n            if(this.state.files.length === 0) {\n                this.props.showError(\"Please upload a PGN file\")\n                return false\n            }\n        } else if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            if(this.state.files.length === 0) {\n                this.props.showError(\"Please upload an openingtree file\")\n                return false\n            }\n        } \n        return true\n    }\n    finalPlayerName(source, playerName, selectedNotablePlayer) {\n        if(source === Constants.SITE_PLAYER_DB) {\n            return selectedNotablePlayer.name\n        }\n        if(source === Constants.SITE_EVENT_DB) {\n            return ''\n        }\n        return playerName\n    }\n    setPlayerDetails() {\n         if(this.validateInputDetailsSet()) {\n            this.props.playerDetailsChange(\n                this.finalPlayerName(\n                    this.props.site, \n                    this.state.playerName,\n                    this.state.selectedPlayer), \n                this.state.files, \n                this.state.selectedEvent, \n                this.state.selectedPlayer)\n        }\n    }\n    \n    getSummary() {\n        if(this.props.site === Constants.SITE_PLAYER_DB){\n            if(this.props.selectedPlayer && this.props.selectedPlayer.name) {\n                return <span>\n                        {getNumberIcon('done')}\n                        {this.props.selectedPlayer.profile.title}{'\\u00A0'}\n                        <b>{this.props.selectedPlayer.name}</b>\n                    </span>\n            }\n        } else if(this.props.site === Constants.SITE_LICHESS || \n            this.props.site === Constants.SITE_CHESS_DOT_COM){\n            if(this.props.playerName) {\n                return <span>{getNumberIcon('done')}User: <b>{this.props.playerName}</b></span>\n            }\n        } else if(this.props.site === Constants.SITE_PGN_FILE || \n            this.props.site === Constants.SITE_OPENING_TREE_FILE){\n            if(this.props.files.length===1) {\n                return <span>{getNumberIcon('done')}File: <b>{this.props.files[0].name}</b></span>\n            }\n            if(this.props.files.length>1) {\n                return <span>{getNumberIcon('done')}{this.props.files.length} PGN files uploaded</span>\n            }\n        } else if(this.props.site === Constants.SITE_EVENT_DB) {\n            if(this.props.selectedEvent && this.props.selectedEvent.name) {\n                return <span>{getNumberIcon('done')}{this.props.selectedEvent.name}</span>\n            }\n        }\n        return <span>{getNumberIcon(2)}Player details</span>\n    }\n\n    getPlayerNameInput(label, helperText) {\n        return <TextField\n            className=\"playernameField\" name=\"playerName\" id=\"playerNameTextBox\" \n            margin=\"dense\" onChange={this.editPlayerName.bind(this)}\n            label={label} variant=\"outlined\" value={this.state.playerName}\n            helperText={this.state.playerNameError? this.state.playerNameError:helperText}\n            error={this.state.playerNameError?true:false} onKeyUp={this.playerNameKeyUp.bind(this)}/>\n    }\n\n    playerNameKeyUp(evt) {\n        if(evt.keyCode === 13) { // enter key pressed\n            this.setPlayerDetails()\n        }\n    }\n    getGoatDBSelection(){\n        return <NotableChessGames \n            list={this.props.notablePlayers} \n            placeholder=\"Select a player\"\n            onChange={this.notablePlayerChange.bind(this)}\n            selectedDetail={this.state.selectedPlayer}/>\n    }\n    getGoatDBEventSelection(){\n        return <NotableChessGames \n            list={this.props.notableEvents} \n            placeholder=\"Select an event\"\n            onChange={this.notableEventChange.bind(this)}\n            selectedDetail={this.state.selectedEvent}/>\n    }\n\n    getPgnFileSelection() {\n        return <div><Dropzone filesChange={this.filesChange.bind(this)} filesLimit={10}\n        dropzoneText=\"Drag and drop up to 10 pgn files here or click here to select files\"\n                />\n                {this.getPlayerNameInput('player name in PGN', 'Leave blank to load all games')}\n                </div>\n    }\n\n    getOpeningTreeSelection() {\n        return <div>\n            <Card>\n                <CardBody className=\"singlePadding\">\n                <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> How it works</CardTitle>\n                <CardText className=\"smallText\">\n                    If you plan to revisit the same player, you can save a <b>.tree</b> file locally by loading a tree and then clicking <i>\"Save Openingtree\"</i>.\n                    To reload the same tree, drop the <b>.tree</b> file in the dropzone below.\n                </CardText>\n                </CardBody>\n                </Card><br/>\n            <Dropzone filesChange={this.filesChange.bind(this)} filesLimit={1}\n                    dropzoneText=\"Drag and drop openingtree save file here or click here to select a file\"\n                />\n        </div>\n    }\n\n    getInputsToShow() {\n        if(this.props.site === Constants.SITE_PGN_FILE) {\n            return this.getPgnFileSelection()\n        } else if (this.props.site === Constants.SITE_LICHESS) {\n            return this.getPlayerNameInput('lichess username')\n        } else if (this.props.site === Constants.SITE_CHESS_DOT_COM) {\n            return this.getPlayerNameInput('chess.com username')\n        } else if (this.props.site === Constants.SITE_EVENT_DB) {\n            return this.getGoatDBEventSelection()\n        } else if (this.props.site === Constants.SITE_PLAYER_DB) {\n            return this.getGoatDBSelection()\n        } else if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            return this.getOpeningTreeSelection()\n        }\n        return <div/>\n    }\n\n    render() {\n        return <ExpansionPanel expanded={this.props.expandedPanel === 'user'}\n                TransitionComponent={Collapse}\n                TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n                onChange={this.props.handleExpansionChange} \n                disabled={this.props.site===''}>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>{this.getSummary()}</ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                        {this.getInputsToShow()}\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions>\n                    <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.setPlayerDetails.bind(this)}>Continue</MaterialUIButton>\n                </ExpansionPanelActions></ExpansionPanel>\n            \n    }\n}","import React from 'react'\nimport { createSubObjectWithProperties, getTimeframeSteps } from '../../app/util'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics'\nimport Source from './Source'\nimport User from './User'\nimport Filters from './Filters'\nimport Actions from './Actions'\nimport request from 'request'\nimport * as SitePolicy from '../../app/SitePolicy'\nimport {openingGraph} from '../../app/OpeningGraph'\n\nexport default class PGNLoader extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerName: '',\n            site: '',\n            playerColor: this.props.settings.playerColor,\n            isAdvancedFiltersOpen: false,\n            isGamesSubsectionOpen: false,\n            expandedPanel: 'source',\n            notablePlayers:null,\n            notableEvents:null,\n            files:[],\n            selectedNotableEvent:{},\n            selectedNotablePlayer:{}\n\n        }\n        this.timeframeSteps = getTimeframeSteps()\n        this.state[Constants.FILTER_NAME_SELECTED_TIMEFRAME] = [0, this.timeframeSteps.length - 1]\n        this.state[Constants.FILTER_NAME_DOWNLOAD_LIMIT] = Constants.MAX_DOWNLOAD_LIMIT\n        this.state[Constants.TIME_CONTROL_ULTRA_BULLET] = true\n        this.state[Constants.TIME_CONTROL_BULLET] = true\n        this.state[Constants.TIME_CONTROL_BLITZ] = true\n        this.state[Constants.TIME_CONTROL_RAPID] = true\n        this.state[Constants.TIME_CONTROL_CLASSICAL] = true\n        this.state[Constants.TIME_CONTROL_CORRESPONDENCE] = true\n        this.state[Constants.TIME_CONTROL_DAILY] = true\n        this.state[Constants.FILTER_NAME_RATED] = \"all\"\n        this.state[Constants.FILTER_NAME_ELO_RANGE] = [0, Constants.MAX_ELO_RATING]\n    }\n\n\n    advancedFilters() {\n        return createSubObjectWithProperties(this.state,\n            [Constants.TIME_CONTROL_ULTRA_BULLET, Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_BLITZ, Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CORRESPONDENCE, Constants.TIME_CONTROL_DAILY,\n            Constants.TIME_CONTROL_CLASSICAL, Constants.FILTER_NAME_RATED,\n            Constants.FILTER_NAME_SELECTED_TIMEFRAME, Constants.FILTER_NAME_DOWNLOAD_LIMIT,\n            Constants.FILTER_NAME_ELO_RANGE])\n    }\n\n\n    handleExpansionChange(panel) {\n        return (event, newExpanded) => {\n            this.setState({ expandedPanel: newExpanded ? panel : false });\n        };\n    }\n\n    exportOpeningTreeObject(){\n        return {\n            header:{\n                version:2,// current openingtree file version. used to check compatibility of files\n                timestamp:Math.floor(Date.now() / 1000),\n                gamesProcessed:this.props.gamesProcessed,\n                settings:this.props.settings,\n                playerName:this.state.playername,\n                site: this.state.site,\n                advancedFilters:this.advancedFilters()\n            },\n            arrays: [[...this.props.openingGraph.graph.nodes.entries()],\n                        [...this.props.openingGraph.graph.pgnStats]]\n        }\n    }\n\n    importOpeningTreeObject(openingTreeSave) {\n        let saveVersion = 1;\n        if(openingTreeSave.header.version) {\n            saveVersion = openingTreeSave.header.version\n        }\n        if(saveVersion < Constants.OPENING_TREE_FILE_CURRENT_VERSION) {\n            this.props.showError(\"This is an old format of openingtree file.\", null, \n                \"You can try loading it by visiting the old website\", Constants.ERROR_ACTION_VISIT_OLD_SITE)\n            return false\n        }\n        this.setState({\n            ...openingTreeSave.header.advancedFilters,\n            playerColor:openingTreeSave.header.settings.playerColor,\n            site:openingTreeSave.header.site,\n            playerName:openingTreeSave.header.settings.playerName\n        })\n        openingGraph.setEntries(openingTreeSave.arrays[0], openingTreeSave.arrays[1])\n        this.props.importCallback({\n            settings:openingTreeSave.header.settings,\n            gamesProcessed:openingTreeSave.header.gamesProcessed,\n            openingGraph:openingGraph\n        })\n        return true\n    }\n\n    playerDetailsChange(playerName, files, selectedNotableEvent, selectedNotablePlayer) {\n        this.setState({\n            playerName: playerName,\n            expandedPanel:SitePolicy.isFilterPanelEnabled(this.state.site, playerName, selectedNotablePlayer)?'filters':'',\n            files:files,\n            selectedNotableEvent:selectedNotableEvent,\n            selectedNotablePlayer:selectedNotablePlayer,\n            playerColor:''\n        })\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"PlayerNameSaved\")\n    }\n    fetchGOATGames(url, callback){\n        request.get(url, (error, response) =>{\n            if(error) {\n                this.props.showError(\"Could not fetch player list. Failed to connect to DB.\")\n                callback([])\n                return \n            }\n            let gamesDetails\n            try{\n                gamesDetails = JSON.parse(response.body).list\n            } catch (e) {\n                console.log(e)\n            }\n            if(!gamesDetails) {\n                this.props.showError(\"Failed to load games.\")\n                callback([])\n            } else {\n                callback(gamesDetails)\n            }\n        })\n    }\n\n    siteChange(event) {\n        let newSite = event.target.value\n        if(newSite === Constants.SITE_PLAYER_DB && !this.state.notablePlayers) {\n            this.fetchGOATGames('https://goatchess.github.io/list.json', (gamesDetails)=>{\n                this.setState({notablePlayers:gamesDetails})\n            })\n        }\n        if(newSite === Constants.SITE_EVENT_DB && !this.state.notableEvents) {\n            this.fetchGOATGames('https://goatevents.github.io/list.json', (gamesDetails)=>{\n                this.setState({notableEvents:gamesDetails})\n            })\n        }\n        this.setState({ site: newSite, expandedPanel:'user'})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ChangeSite\", newSite)\n    }\n\n    filtersChange(filters) {\n        this.setState({...filters, expandedPanel:''})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"FitlersSaved\", this.state.site)\n    }\n\n    render() {\n        return <div><div className=\"pgnloadersection\">\n            <Source expandedPanel={this.state.expandedPanel}\n                handleExpansionChange={this.handleExpansionChange('source').bind(this)}\n                site={this.state.site} siteChange={this.siteChange.bind(this)}/>\n            <User expandedPanel={this.state.expandedPanel} playerName={this.state.playerName}\n                handleExpansionChange={this.handleExpansionChange('user').bind(this)} \n                showError={this.props.showError} files={this.state.files} notablePlayers={this.state.notablePlayers}\n                notableEvents={this.state.notableEvents} site={this.state.site} playerDetailsChange={this.playerDetailsChange.bind(this)}\n                pgnUrl={this.state.pgnUrl} selectedPlayer={this.state.selectedNotablePlayer} selectedEvent={this.state.selectedNotableEvent}/>\n            <Filters expandedPanel={this.state.expandedPanel} playerColor={this.state.playerColor}\n                handleExpansionChange={this.handleExpansionChange('filters').bind(this)}\n                site={this.state.site} playerName={this.state.playerName} advancedFilters={this.advancedFilters()}\n                timeframeSteps={this.timeframeSteps} filtersChange={this.filtersChange.bind(this)}\n                selectedNotablePlayer={this.state.selectedNotablePlayer} />\n            </div>\n            <Actions expandedPanel={this.state.expandedPanel} playerColor={this.state.playerColor} files={this.state.files}\n                playerName={this.state.playerName} site={this.state.site} advancedFilters={this.advancedFilters()}\n                notify={this.props.notify} showError={this.props.showError} onChange={this.props.onChange}\n                setDownloading={this.props.setDownloading} clear={this.props.clear} isDownloading={this.props.isDownloading}\n                switchToMovesTab={this.props.switchToMovesTab} gamesProcessed={this.props.gamesProcessed} \n                selectedNotablePlayer={this.state.selectedNotablePlayer} selectedNotableEvent={this.state.selectedNotableEvent}\n                exportOpeningTreeObject={this.exportOpeningTreeObject.bind(this)} showInfo={this.props.showInfo}\n                importOpeningTreeObject={this.importOpeningTreeObject.bind(this)}/>\n        </div>\n    }\n\n}","import React from 'react'\nimport {Button} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faRetweet, faTrashAlt, faFastBackward, faDesktop } from '@fortawesome/free-solid-svg-icons'\nimport {Container, Row, Col} from 'reactstrap'\nimport {trackEvent} from '../app/Analytics'\nimport * as Constants from '../app/Constants'\n\nexport default class SettingsView extends React.Component {\n    toggle(eventName){\n        return (()=> {\n            let newValue = this.props.settings[eventName] === Constants.PLAYER_COLOR_WHITE ? Constants.PLAYER_COLOR_BLACK:Constants.PLAYER_COLOR_WHITE\n            this.props.onChange(eventName, newValue)\n            trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"ChangeOrientation\")\n        })\n    }\n    analyse() {\n        window.open(`https://www.lichess.org/analysis/standard/${this.props.fen}`, '_blank');\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"AnalyzeGame\")\n\n    }\n    resetAction() {\n        this.props.reset()\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"Reset\")\n    }\n    clearAction() {\n        this.props.clear()\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"Clear\")\n    }\n\n    render() {\n        return <div>\n            <Container>\n                <Row sm=\"12\">\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.toggle('orientation')} color=\"\"><h3><FontAwesomeIcon icon={faRetweet} /></h3> Flip board</Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.clearAction.bind(this)} color=\"\"><h3><FontAwesomeIcon icon={faTrashAlt} /></h3> Clear games</Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.resetAction.bind(this)} color=\"\"><h3><FontAwesomeIcon icon={faFastBackward} /></h3> Starting position</Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.analyse.bind(this)} color=\"\"><h3><FontAwesomeIcon icon={faDesktop} /></h3> Computer analysis</Button>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    }\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExternalLinkAlt, faUser } from '@fortawesome/free-solid-svg-icons'\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableFooter, TextField } from '@material-ui/core';\nimport React from 'react'\nimport {getPerformanceDetails} from '../app/util'\nimport {copyText} from './loader/Common'\n\nexport default class ControlsContainer extends React.Component {\n    eatClicks(e) {\n        e.stopPropagation()\n    }\n\n    copyFen() {\n        copyText(\"fenField\")/* Get the text field */\n        /* Alert the copied text */\n        this.props.showInfo(\"FEN copied\");\n    }\n\n    getFenField() {\n        return this.props.simplifiedView?null:\n            <div className=\"fenDiv\">\n            <TextField\n                id=\"fenField\"\n                multiline\n                label=\"FEN\"\n                rowsMax=\"2\"\n                value={this.props.fen} \n                inputProps={{\n                    style: {fontSize: 12},\n                    spellCheck: false,\n                  }} \n                  variant=\"outlined\"\n                className=\"fenField\"\n                margin=\"dense\"\n                onClick = {this.copyFen.bind(this)}\n                /></div>\n    }\n\n      \n    render() {\n        if(!this.props.moveDetails.lastPlayedGame) {\n            return <div>{this.getFenField()}<div className = \"infoMessage\" >No data to show. Please enter a lichess or chess.com user name in the \n                <span className = \"navLinkButton\" onClick={()=>this.props.switchToUserTab()}> <FontAwesomeIcon icon={faUser} /> User</span> tab and click \"Load\"</div>\n                </div>\n        }\n        let performanceDetails = {}\n        if(this.props.isOpen) {\n            performanceDetails = getPerformanceDetails(this.props.moveDetails.totalOpponentElo, \n                                                        this.props.moveDetails.whiteWins, \n                                                        this.props.moveDetails.draws, \n                                                        this.props.moveDetails.blackWins, \n                                                        this.props.settings.playerColor)\n        } \n\n        return <div>\n            {this.getFenField()}\n            <Table onClick={this.eatClicks}>\n            {isNaN(performanceDetails.performanceRating)?null:            <TableHead className={`performanceRatingRow${this.props.simplifiedView?\" performanceHeader\":\"\"}`}><TableRow>\n                <TableCell className=\"performanceRatingRow\"><b>Performance</b></TableCell>\n                <TableCell className=\"performanceRatingRow\"><b>{performanceDetails.performanceRating}</b></TableCell>\n                </TableRow></TableHead>}\n            <TableBody>\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Results</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.results}</TableCell>\n            </TableRow>\n            {isNaN(performanceDetails.averageElo)?null:\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Avg opponent</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.averageElo}</TableCell>\n            </TableRow>}\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Score</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.score}</TableCell>\n            </TableRow>\n            {this.props.simplifiedView || isNaN(performanceDetails.averageElo)?null:\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Rating change</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.ratingChange}</TableCell>\n            </TableRow>\n            }\n            {!this.props.simplifiedView && this.props.moveDetails.bestWinElo?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Best win</TableCell>\n                <TableCell className=\"performanceRatingRow\">{this.props.moveDetails.bestWinElo} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(this.props.moveDetails.bestWinGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            {!this.props.simplifiedView && this.props.moveDetails.worstLossElo?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Worst loss</TableCell>\n                <TableCell className=\"performanceRatingRow\">{this.props.moveDetails.worstLossElo} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(this.props.moveDetails.worstLossGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Last played</TableCell>\n                <TableCell className=\"performanceRatingRow\">{this.removeQuestionMarksFromDate(this.props.moveDetails.lastPlayedGame.date)} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(this.props.moveDetails.lastPlayedGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>\n            </TableBody>\n            {this.props.simplifiedView?null:\n            <TableFooter>\n                <TableRow>\n                    <TableCell colSpan=\"2\">Calculated based on <a href=\"https://handbook.fide.com/chapter/B022017\" target=\"_blank\" rel=\"noopener noreferrer\">FIDE regulations</a></TableCell>\n                </TableRow>\n            </TableFooter>\n            }\n        </Table></div>\n    }\n\n    removeQuestionMarksFromDate(date) {\n        if(date.indexOf('?') === -1) {\n            return date\n        }\n        return date.slice(0, date.indexOf('.'))\n    }\n}","import {Progress, Popover } from \"reactstrap\"\nimport React from 'react'\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableFooter } from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser, faExternalLinkAlt, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\nimport * as Constants from '../app/Constants'\nimport {trackEvent} from '../app/Analytics'\nimport ReportControls from './ReportControls'\n\nexport default class MovesList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            openPerformanceIndex: null\n        }\n    }\n\n    move(from, to) {\n        return () => {\n            this.props.onMove(from, to)\n            trackEvent(Constants.EVENT_CATEGORY_MOVES_LIST, \"MoveClicked\")\n        }\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.turnColor !== this.props.turnColor) {\n            this.setState({\n                openPerformanceIndex: null,\n            })\n        }\n    }\n    togglePerformancePopover(moveIndex) {\n        return (e) => {\n            if(this.state.openPerformanceIndex !== null) {\n                this.setState({openPerformanceIndex:null})\n            } else {\n                this.setState({openPerformanceIndex: moveIndex})\n            }\n            e.stopPropagation()\n        }\n    }\n    render(){\n        if(!this.props.movesToShow) {\n            return <div className = \"infoMessage\" >No moves to show. Please select a source from the \n                <span className = \"navLinkButton\" onClick={()=>this.props.switchToUserTab()}> <FontAwesomeIcon icon={faUser} /> User</span> tab and enter the details.</div>\n        }\n    return <div>{(this.props.gameResults && this.props.gameResults.length>0)?this.resultsTable():null}\n                {this.movesTable()}</div>\n    }\n    resultsTable() {\n        return <Table>\n            <TableBody>\n                {\n                this.props.gameResults.map(result => {\n                    let whitePlayer = this.player(result.white, result.whiteElo)\n                    let blackPlayer = this.player(result.black, result.blackElo)\n                    return <TableRow className=\"moveRow\" key = {`${result.url}`} onClick={this.props.launchGame(result)}>\n                        <TableCell>\n                            {result.result===\"1-0\"?<b>{whitePlayer}</b>:whitePlayer} {result.result} {result.result === \"0-1\"?<b>{blackPlayer}</b>:blackPlayer}\n                        </TableCell>\n                    </TableRow>\n                })}\n            </TableBody>\n        </Table>\n    }\n    player(name, elo) {\n        return `${name}${elo?`(${elo})`:''}`\n    }\n    getPopover(moveIndex) {\n        let performancePopoverOpen = this.state.openPerformanceIndex === moveIndex\n        let openMove = this.props.movesToShow[moveIndex]\n\n        return <Popover trigger=\"hover\" placement=\"right\" isOpen={performancePopoverOpen} target={`performancePopover${moveIndex}`} toggle={this.togglePerformancePopover(moveIndex)}>\n                <ReportControls moveDetails={openMove.details} simplifiedView={true} isOpen = {performancePopoverOpen} launchGame={this.props.launchGame} settings={this.props.settings}/>\n            </Popover>\n    }\n    movesTable() {\n        let hasMoves = (this.props.movesToShow && this.props.movesToShow.length>0)\n        return <Table>\n            {hasMoves?\n        <TableHead>\n        <TableRow>\n            <TableCell size=\"small\" className=\"smallCol\"><b>Move</b></TableCell>\n            <TableCell size=\"small\" className=\"smallCol\"><b>Games</b></TableCell>\n            <TableCell><b>Results</b></TableCell>\n        </TableRow></TableHead>  \n        :null}\n        {hasMoves?\n        <TableBody>\n        {\n        this.props.movesToShow.map((move, moveIndex) => {\n            let sampleResultWhite = this.player(move.details.lastPlayedGame.white, move.details.lastPlayedGame.whiteElo)\n            let sampleResultBlack = this.player(move.details.lastPlayedGame.black, move.details.lastPlayedGame.blackElo)\n            let sampleResult = move.details.lastPlayedGame.result\n\n            return move.details.count > 1?<TableRow className=\"moveRow\" key = {`${move.orig}${move.dest}`} onClick={this.move(move.orig, move.dest)}>\n                <TableCell size=\"small\" className=\"smallCol\">{move.san} </TableCell>\n                <TableCell size=\"small\" id={`performancePopover${moveIndex}`} className=\"smallCol\" onClick ={this.togglePerformancePopover(moveIndex)}>\n                    {move.details.count} <FontAwesomeIcon className=\"lowOpacity\" icon={faInfoCircle}/>\n                    {this.getPopover(moveIndex)}\n                </TableCell>\n                <TableCell>\n                    <Progress className = \"border\" multi>\n                        <Progress bar className=\"whiteMove\" value={`${move.details.whiteWins/move.details.count*100}`}>{move.details.whiteWins/move.details.count>0.1?move.details.whiteWins:''}</Progress>\n                        <Progress bar className=\"grayMove\" value={`${move.details.draws/move.details.count*100}`}>{move.details.draws/move.details.count>0.1?move.details.draws:''}</Progress>\n                        <Progress bar className=\"blackMove\" value={`${move.details.blackWins/move.details.count*100}`}>{move.details.blackWins/move.details.count>0.1?move.details.blackWins:''}</Progress>\n                    </Progress>\n                </TableCell>\n            </TableRow>:\n            <TableRow className=\"moveRow\" key = {`${move.orig}${move.dest}`} onClick={this.move(move.orig, move.dest)}>\n                <TableCell size=\"small\" className=\"smallCol\">{move.san}</TableCell>\n                <TableCell colSpan = \"2\">\n        {sampleResultWhite} {sampleResult} {sampleResultBlack} {<FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(move.details.lastPlayedGame)} icon={faExternalLinkAlt}/>}\n                </TableCell>\n            </TableRow>\n            }\n        )}\n    </TableBody>\n    :null}\n        <TableFooter><TableRow>\n        {this.props.settings.playerName?\n\n            hasMoves?\n                <TableCell colSpan=\"3\">\n                Showing moves that have been \n                played {this.props.turnColor === this.props.settings.playerColor? \"by\" : \"by others against\"} <b>{this.props.settings.playerName}</b> in \n                this position. <b>{this.props.settings.playerName}</b> is playing as <b>{this.props.settings.playerColor}</b>.\n                </TableCell>:\n                <TableCell colSpan=\"3\">\n                No moves found played by {this.props.turnColor === this.props.settings.playerColor? \"by\" : \"by others against\"} <b>{this.props.settings.playerName}</b> in \n                this position. <b>{this.props.settings.playerName}</b> is playing as <b>{this.props.settings.playerColor}</b>.\n                </TableCell>\n            :\n            hasMoves?\n                <TableCell colSpan=\"3\">\n                Showing all moves that have been \n                played by <b>{this.props.turnColor}</b> in \n                this position.\n                </TableCell>:                \n                <TableCell colSpan=\"3\">\n                No moves found \n                played by <b>{this.props.turnColor}</b> in \n                this position.\n                </TableCell>\n\n\n        }</TableRow></TableFooter>\n    </Table>\n    }\n}","import React from 'react'\nimport PGNLoader from './loader/PGNLoader'\nimport SettingsView from './Settings'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col,Button } from 'reactstrap';\nimport classnames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser, faList, faCog, faChartBar } from '@fortawesome/free-solid-svg-icons'\nimport MovesList from './MovesList';\nimport {trackEvent} from '../app/Analytics'\nimport * as Constants from '../app/Constants'\nimport ReportControls from './ReportControls'\nimport {Modal, ModalHeader, ModalFooter} from 'reactstrap'\nimport {Table, TableRow, TableBody, TableCell} from '@material-ui/core'\n\nexport default class ControlsContainer extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {\n          activeTab:'user',\n          activeGame:null\n      }\n      this.toggleModal = ()=>{\n        this.setState({activeGame:null})\n      }\n    }\n    \n\n    launchGame(game) {\n      if(game.url) {\n          return (e) => {\n              e.stopPropagation()\n              window.open(game.url, '_blank');\n              trackEvent(Constants.EVENT_CATEGORY_MOVES_LIST, \"ViewGameExternal\")\n          }\n      }\n      return ((e) => {\n        e.stopPropagation()\n        this.setState({activeGame:game})\n      })\n    }\n\n    toggle(tab) {\n        if(this.state.activeTab !== tab) {\n            this.setState({activeTab:tab})\n            trackEvent(Constants.EVENT_CATEGORY_CONTROLS,`activeTab:${tab}`)\n        }\n    }\n    switchToUserTab() {\n      this.toggle('user')\n    }\n    switchToMovesTab() {\n      this.toggle('moves')\n    }\n\n    render(){\n        return <div>\n              <Modal isOpen={this.state.activeGame} toggle={this.toggleModal}>\n              <ModalHeader toggle={this.toggleModal}>Game details</ModalHeader>\n              {!this.state.activeGame?null:\n              <Table>\n                \n                <TableBody>\n                  {\n                    Object.entries(this.state.activeGame.headers).map((entry)=>!entry[1]?null:<TableRow className=\"performanceRatingRow\">\n                        <TableCell className=\"performanceRatingRow\">{entry[0]}</TableCell>\n                        <TableCell className=\"performanceRatingRow\">{entry[1]}</TableCell>\n                    </TableRow>\n                    )}\n                  \n                </TableBody>\n              </Table>\n              }\n              <ModalFooter>\n          <Button color=\"secondary\" onClick={this.toggleModal}>Done</Button>\n        </ModalFooter>\n              </Modal>\n            <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'user' })}\n            onClick={() => { this.toggle('user'); }}\n          >\n            <FontAwesomeIcon icon={faUser} /> {this.state.activeTab === 'user'?\"User\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'moves' })}\n            onClick={() => { this.toggle('moves'); }}\n          >\n            <FontAwesomeIcon icon={faList} /> {this.state.activeTab === 'moves'?\"Moves\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'report' })}\n            onClick={() => { this.toggle('report'); }}\n          >\n            <FontAwesomeIcon icon={faChartBar} /> {this.state.activeTab === 'report'?\"Report\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'settings' })}\n            onClick={() => { this.toggle('settings'); }}\n          >\n            <FontAwesomeIcon icon={faCog} /> {this.state.activeTab === 'settings'?\"Controls\":\"\"}\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={this.state.activeTab}>\n        <TabPane tabId=\"user\">\n            <PGNLoader \n              switchToMovesTab={this.switchToMovesTab.bind(this)} \n              clear = {this.props.clear} \n              gamesProcessed = {this.props.gamesProcessed} \n              settings = {this.props.settings} \n              onChange = {this.props.settingsChange} \n              notify = {this.props.updateProcessedGames}\n              showError = {this.props.showError}\n              showInfo = {this.props.showInfo}\n              setDownloading = {this.props.setDownloading}\n              isDownloading = {this.props.isDownloading}\n              openingGraph={this.props.openingGraph}\n              importCallback={this.props.importCallback}\n              />\n            </TabPane>\n        <TabPane tabId=\"moves\">\n            <MovesList \n              switchToUserTab={this.switchToUserTab.bind(this)} \n              movesToShow={this.props.movesToShow} \n              gameResults={this.props.gameResults}\n              onMove={this.props.onMove}\n              settings={this.props.settings}\n              turnColor={this.props.turnColor}\n              settingsChange={this.props.settingsChange}\n              launchGame = {this.launchGame.bind(this)}\n              />\n        </TabPane>\n        <TabPane tabId=\"report\">\n          <ReportControls fen={this.props.fen} simplifiedView = {false}\n            moveDetails = {this.props.openingGraph.getDetailsForFen(this.props.fen)}\n            launchGame={this.launchGame.bind(this)} settings={this.props.settings}\n            switchToUserTab={this.switchToUserTab.bind(this)} \n            isOpen = {this.state.activeTab === \"report\"}\n            showInfo = {this.props.showInfo}/>\n        </TabPane>\n        <TabPane tabId=\"settings\">\n          <Row>\n            <Col sm=\"6\">\n            <SettingsView fen={this.props.fen} settings={this.props.settings} isOpen = {true} clear = {this.props.clear} reset = {this.props.reset} onChange = {this.props.settingsChange}/>\n            \n            </Col>\n          </Row>\n        </TabPane>\n      </TabContent>\n        </div>\n    }\n}","import Chess from 'chess.js'\nimport * as Constants from '../app/Constants'\nimport {trackEvent} from '../app/Analytics'\nimport {copyText} from './loader/Common'\n\nfunction turnColor() {\n    return fullTurnName(this.chess.turn())\n}\n\nfunction fullTurnName(shortName) {\n    return shortName === 'w' ? Constants.PLAYER_COLOR_WHITE : Constants.PLAYER_COLOR_BLACK\n}\n\nfunction playerColor() {\n    return this.state.settings.playerColor\n}\n\nfunction brushes() {\n    if(this.playerColor() === this.turnColor()) {\n        return this.forBrushes\n    }\n    return this.againstBrushes\n}\n\nfunction calcMovable() {\nconst dests = {}\n    this.chess.SQUARES.forEach(s => {\n        const ms = this.chess.moves({square: s, verbose: true})\n        if (ms.length) dests[s] = ms.map(m => m.to)\n    })\n    return {\n        free: false,\n        dests,\n        color: this.turnColor()\n    }\n}\n\nfunction orientation() {\n    return this.state.settings.orientation\n}\n\nfunction onMove(from, to) {\n    const chess = this.chess\n    let move = chess.move({ from, to, promotion: 'q'})\n    this.setState({ fen: chess.fen(), lastMove: move})\n}\n\n\nfunction onMoveAction(from, to) {\n    this.onMove(from,to)\n    trackEvent(Constants.EVENT_CATEGORY_CHESSBOARD, \"Move\")\n}\n\nfunction navigateTo(fen, previousMove){\n    this.chess = new Chess(fen)\n    this.setState({fen:fen, lastMove:previousMove})\n}\nfunction updateProcessedGames(downloadLimit, n, parsedGame) {\n    let totalGamesProcessed = this.state.gamesProcessed+n\n    this.state.openingGraph.addPGN(parsedGame.pgnStats, parsedGame.parsedMoves,\n            parsedGame.latestFen,parsedGame.playerColor)\n    this.setState({\n        gamesProcessed: totalGamesProcessed,\n        downloadingGames: (totalGamesProcessed<downloadLimit || downloadLimit>=Constants.MAX_DOWNLOAD_LIMIT)?this.state.downloadingGames:false\n    })\n    // continue to download games if \n    // 1. we have not reached download limit OR\n    //    there is no download limit set (downloadLimit>MAX condition)\n    // 2. user did not hit stop button\n    return (totalGamesProcessed < downloadLimit || downloadLimit>=Constants.MAX_DOWNLOAD_LIMIT)&& this.state.downloadingGames\n}\nfunction moveToShape(move) {\n    return {\n        orig:move.orig,\n                    dest: move.dest,\n                    brush: this.brushes()[move.level]\n    }\n}\n\nfunction autoShapes() {\n    var moves = this.movesToShow()\n    if(moves) {\n        var shapes = moves.map(this.moveToShape.bind(this))\n        return this.fillArray(shapes,  25)\n    }\n    return this.fillArray([], 25) // dummy arrow to clear out existing arrows\n}\n\nfunction movesToShow() {\n    if(!this.state.openingGraph.hasMoves) {\n        return null;\n    }\n    var moves = this.state.openingGraph.movesForFen(this.chess.fen())\n    return moves?moves.sort((a,b)=>b.details.count-a.details.count):[]\n}\n\n\n\nfunction gameResults() {\n    return this.state.openingGraph.gameResultsForFen(this.chess.fen())\n}\n\nfunction fillArray(arr, len) {\n    for (var i = arr.length; i < len; i++) {\n        arr.push({'orig':'i'+i, 'dest':'i'+(i+1), brush:this.brushes()[0]});\n    }\n    return arr;\n}\n\nfunction reset() {\n    this.chess = new Chess()\n    this.setState({fen: this.chess.fen(), lastMove:null})\n}\n\nfunction clear() {\n    this.state.openingGraph.clear()\n    this.state.gamesProcessed = 0\n    this.reset()\n}\n\nfunction settingsChange(name, value) {\n    let settings = this.state.settings\n    settings[name] = value;\n    this.setState({\n        'settings':settings\n    })\n}\n\nfunction launch(url) {\n    return () => {\n      window.open(url, \"_blank\")\n    }\n  }\n\n\nfunction showError(message, trackingEvent, subMessage, action) {\n    let errorActionText, errorAction\n    if(action === Constants.ERROR_ACTION_VISIT_OLD_SITE) {\n        errorActionText=\"Visit old site\"\n        errorAction = launch(\"https://www.openingtree.com/old\")\n    } else {\n        errorActionText=\"Report this\"\n        errorAction = this.toggleFeedback(true)\n    }\n    this.setState({message:message, subMessage:subMessage,\n        errorAction:errorAction, errorActionText:errorActionText,\n        messageSeverity:\"error\"})\n    let eventName = \"errorShown\"\n    if(trackingEvent) {\n        eventName = eventName+\":\"+trackingEvent\n    }\n    trackEvent(Constants.EVENT_CATEGORY_MESSAGE_SHOWN,eventName, message)\n}\n\nfunction showInfo(message, trackingLabel) {\n    this.setState({message:message, messageSeverity:\"success\"})\n    trackEvent(Constants.EVENT_CATEGORY_MESSAGE_SHOWN,\"infoShown\",\n        trackingLabel?trackingLabel:message)\n}\n\n\nfunction closeError() {\n    this.setState({message:'', subMessage:''})\n}\n\nfunction toggleFeedback(diagnosticsOpen) {\n    return () => {\n        let feedbackOpen = this.state.feedbackOpen\n        this.closeError()\n        this.setState({feedbackOpen:!feedbackOpen,\n                diagnosticsDataOpen:diagnosticsOpen})\n    }\n}\n\nfunction setDownloading(val) {\n    this.setState({downloadingGames:val})\n}\n\nfunction toggleDiagnosticsData() {\n    this.setState({diagnosticsDataOpen:!this.state.diagnosticsDataOpen})\n}\n\nfunction copyDiagnostics() {\n    copyText(\"diagnosticsText\")\n    this.showInfo(\"Copied Diagnostics data\")\n}\n\n\nfunction importGameState(importState) {\n    this.setState({\n      settings:importState.settings,\n      openingGraph:importState.openingGraph,\n      gamesProcessed:importState.gamesProcessed\n    })\n  }\n  function getChessboardWidth(){\n    // have to manually set the width to pixels instead of \"vw\" value\n    // this is because chessground component does not behave well with \"vw\" values\n    if (window.innerWidth<=768) {\n      return `${Math.round(window.innerWidth*95/100)}px` //95vw\n    } else if ((window.innerWidth<=1024)) {\n      return `${Math.round(window.innerWidth*40/100)}px` // 40vw\n    } else {\n      return \"512px\"\n    }\n\n  }\n\nfunction getDiagnosticsValue() {\n  return `--------------------\n  ${navigator.userAgent}\n  -------------------\n  ${JSON.stringify(this.state)}\n  -------------------\n  `\n}\nfunction getRedditLink() {\n    return `https://www.reddit.com/message/compose/?to=${Constants.OPENNIG_TREE_REDDIT}&subject=${this.getSubject()}&message=%0D%0A%0D%0A%0D%0A${this.getBody()}`\n}\n\nfunction getEmailLink() {\n    return `mailto:${Constants.OPENING_TREE_EMAIL}?subject=${this.getSubject()}&body=%0D%0A%0D%0A%0D%0A${this.getBody()}`\n}\n\nfunction getSubject() {\n    return this.state.diagnosticsDataOpen?\"Possible Openingtree bug\":\"Feedback on Openingtree\"\n}\nfunction getBody() {\n    return this.state.diagnosticsDataOpen?this.getDiagnosticsValue():\"\"\n}\n\n\nfunction addStateManagement(obj){\n    obj.orientation  = orientation\n    obj.turnColor = turnColor\n    obj.calcMovable = calcMovable\n    obj.onMove = onMove\n    obj.onMoveAction = onMoveAction\n    obj.autoShapes = autoShapes\n    obj.updateProcessedGames = updateProcessedGames\n    obj.settingsChange = settingsChange\n    obj.reset = reset\n    obj.clear = clear\n    obj.navigateTo = navigateTo\n    obj.playerColor = playerColor\n    obj.fillArray = fillArray\n    obj.brushes = brushes\n    obj.moveToShape = moveToShape\n    obj.movesToShow = movesToShow\n    obj.gameResults = gameResults\n    obj.showError = showError\n    obj.showInfo = showInfo\n    obj.closeError = closeError\n    obj.toggleFeedback = toggleFeedback.bind(obj)\n    obj.setDownloading = setDownloading\n    obj.toggleDiagnosticsData = toggleDiagnosticsData.bind(obj)\n    obj.copyDiagnostics = copyDiagnostics.bind(obj)\n    obj.importGameState = importGameState\n    obj.getDiagnosticsValue = getDiagnosticsValue\n    obj.getChessboardWidth = getChessboardWidth\n    obj.getEmailLink = getEmailLink\n    obj.getSubject = getSubject\n    obj.getBody = getBody.bind(obj)\n    obj.getRedditLink = getRedditLink\n}\n\nexport {addStateManagement}","import green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Button from '@material-ui/core/Button'\nimport {withStyles} from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, subMessage, action, actionText, showReportButton, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <div><span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message} \n                    \n                </span>\n                {!subMessage?null:<div className=\"smallText\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{subMessage}</div>}\n                </div>\n            }\n            action={[ \n                !showReportButton?null:<Button key=\"report\" onClick = {action} color=\"inherit\" size=\"small\">\n                  {actionText}\n                </Button>,\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.close}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    onReport: PropTypes.func,\n    subMessage: PropTypes.string,\n    showReportButton: PropTypes.bool,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles)(SnackbarContentWrapper);","import React from 'react'\nimport Chess from 'chess.js'\nimport Chessground from 'react-chessground'\nimport 'react-chessground/dist/styles/chessground.css'\nimport {openingGraph} from '../app/OpeningGraph'\nimport Navigator from './Navigator'\nimport GlobalHeader from './GlobalHeader'\nimport {Container, Row, Col} from 'reactstrap'\nimport ControlsContainer from './ControlsContainer'\nimport {addStateManagement} from './StateManagement'\nimport {Snackbar, TextField} from '@material-ui/core'\nimport SnackbarContentWrapper from './SnackbarContentWrapper'\nimport * as Constants from '../app/Constants'\nimport {  Modal, ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Button,Collapse\n} from 'reactstrap'\n\nimport {FormControlLabel, Checkbox} from '@material-ui/core'\n\nexport default class MainContainer extends React.Component {\n  \n  constructor(props){\n    super(props)\n    this.chess = new Chess()\n    addStateManagement(this)\n    this.state = {\n        fen: this.chess.fen(),\n        lastMove: null,\n        gamesProcessed:0,\n        openingGraph:openingGraph,\n        settings:{\n          playerName:'',\n          orientation:Constants.PLAYER_COLOR_WHITE,\n          playerColor:''\n        },\n        message:'',\n        downloadingGames:false,\n        feedbackOpen:false,\n        diagnosticsDataOpen:false\n      }\n    this.chessboardWidth = this.getChessboardWidth()\n\n    this.forBrushes = ['paleGrey', 'paleGreen', 'green']\n    this.againstBrushes = ['paleRed', 'paleRed', 'red']\n\n  }\n\n  render() {\n    let lastMoveArray = this.state.lastMove ? [this.state.lastMove.from, this.state.lastMove.to] : null\n    let snackBarOpen = this.state.message?true:false\n    return <div className=\"rootView\"> \n        <GlobalHeader toggleFeedback = {this.toggleFeedback(false)}/>\n        <Container className=\"mainContainer\">\n          <Row><Col lg={{order:0, size:2}} xs={{order:2}}><Navigator fen = {this.state.fen} move={this.state.lastMove} onChange ={this.navigateTo.bind(this)}/>\n    </Col><Col lg=\"6\"><Chessground\n      height={this.chessboardWidth}\n      width={this.chessboardWidth}\n      orientation={this.orientation()}\n      turnColor={this.turnColor()}\n      movable={this.calcMovable()}\n      \n      lastMove={lastMoveArray}\n      fen={this.state.fen}\n      onMove={this.onMoveAction.bind(this)}\n      drawable ={{\n        enabled: true,\n        visible: true,\n        autoShapes: this.autoShapes()\n      }}\n      style={{ margin: 'auto' }}\n    />\n    </Col><Col lg=\"4\" className=\"paddingTop\"><ControlsContainer fen={this.state.fen}\n                gamesProcessed={this.state.gamesProcessed} \n                updateProcessedGames={this.updateProcessedGames.bind(this)}\n                settingsChange={this.settingsChange.bind(this)}\n                settings={this.state.settings}\n                reset={this.reset.bind(this)}\n                clear={this.clear.bind(this)}\n                movesToShow={this.movesToShow()}\n                gameResults={this.gameResults()}\n                onMove={this.onMove.bind(this)}\n                turnColor={this.turnColor()}\n                showError={this.showError.bind(this)}\n                showInfo={this.showInfo.bind(this)}\n                setDownloading={this.setDownloading.bind(this)}\n                isDownloading={this.state.downloadingGames}\n                openingGraph={this.state.openingGraph}\n                importCallback={this.importGameState.bind(this)}\n                /></Col>\n    </Row></Container>\n    <Snackbar anchorOrigin={{ vertical:'bottom', horizontal:\"left\" }} \n            open={snackBarOpen} autoHideDuration={6000} \n            onClose={this.closeError.bind(this)}\n    >\n    <SnackbarContentWrapper\n                            onClose={this.closeError.bind(this)}\n                            variant={this.state.messageSeverity}\n                            message={this.state.message}\n                            subMessage={this.state.subMessage}\n                            showReportButton={this.state.messageSeverity==='error'}\n                            action={this.state.errorAction}\n                            actionText={this.state.errorActionText}\n                        />\n    </Snackbar>\n\n    <Modal isOpen={this.state.feedbackOpen} toggle={this.toggleFeedback(false)}>\n        <ModalHeader toggle={this.toggleFeedback(false)}>Feedback</ModalHeader>\n        <ModalBody>\n          Your feedback is greatly appreciated. Reach out to me for feedback, suggestions, bug report or just a game of chess.\n          <ul>\n            <li>Email me: <a rel=\"noopener noreferrer\" href={this.getEmailLink()} target=\"_blank\">{Constants.OPENING_TREE_EMAIL}</a></li>\n            <li>Message me on reddit <a rel=\"noopener noreferrer\" href={this.getRedditLink()} target=\"_blank\">u/{Constants.OPENNIG_TREE_REDDIT}</a></li>\n            <li>Message me on lichess: <a rel=\"noopener noreferrer\" href={`https://lichess.org/inbox/${Constants.OPENING_TREE_LICHESS}`} target=\"_blank\">{Constants.OPENING_TREE_LICHESS}</a></li>\n            <li>Message me on chess.com: <a rel=\"noopener noreferrer\" href={`https://www.chess.com/messages/compose/${Constants.OPENING_TREE_CHESS_COM}`} target=\"_blank\">{Constants.OPENING_TREE_CHESS_COM}</a></li>\n            <li>Join my <a rel=\"noopener noreferrer\" href={Constants.OPENING_TREE_DISCORD}target=\"_blank\">discord server</a> to chat</li>\n          </ul>\n          <FormControlLabel\n        control={\n          <Checkbox\n            checked={this.state.diagnosticsDataOpen}\n            onChange={this.toggleDiagnosticsData}\n            name=\"diagnostics\"\n            color=\"primary\"\n          />\n        }\n        label=\"Add diagnostics data to message\"\n      />\n          <Collapse isOpen={this.state.diagnosticsDataOpen}>\n            <TextField id=\"diagnosticsText\" label=\"Click to copy.\" variant=\"outlined\" \n            className=\"fullWidth\" value={this.getDiagnosticsValue()} \n            rowsMax={4} onClick={this.copyDiagnostics} multiline/>\n            </Collapse>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={this.toggleFeedback(false)}>Done</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  }\n}\n","import ReactDOM from 'react-dom'\nimport MainContainer from './pres/MainContainer'\nimport React from 'react'\nimport {trackPageView} from './app/Analytics'\n\nReactDOM.render(<MainContainer />, document.getElementById('root'))\ntrackPageView()","import * as Constants from './Constants'\n\nexport const LICHESS_TIME_CONTROLS = [\n    Constants.TIME_CONTROL_ULTRA_BULLET,\n    Constants.TIME_CONTROL_BULLET,\n    Constants.TIME_CONTROL_BLITZ,\n    Constants.TIME_CONTROL_RAPID,\n    Constants.TIME_CONTROL_CLASSICAL,\n    Constants.TIME_CONTROL_CORRESPONDENCE\n]\nexport const CHESS_DOT_COM_TIME_CONTROLS = [\n    Constants.TIME_CONTROL_BULLET,\n    Constants.TIME_CONTROL_BLITZ,\n    Constants.TIME_CONTROL_RAPID,\n    Constants.TIME_CONTROL_DAILY,\n]\n\nexport const TIME_CONTROL_LABELS = {\n    [Constants.TIME_CONTROL_ULTRA_BULLET]: \"Ultrabullet\",\n    [Constants.TIME_CONTROL_BULLET]: \"Bullet\",\n    [Constants.TIME_CONTROL_BLITZ]: \"Blitz\",\n    [Constants.TIME_CONTROL_RAPID]: \"Rapid\",\n    [Constants.TIME_CONTROL_CLASSICAL]: \"Classical\",\n    [Constants.TIME_CONTROL_CORRESPONDENCE]: \"Correspondence\",\n    [Constants.TIME_CONTROL_DAILY]: \"Daily\"\n}\n\nexport function trimString(str) {\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nexport const DP_TABLE = {\n    \"100\":800,   \"99\":677,    \"98\":589,    \"97\":538,\n    \"96\":501,    \"95\":470,    \"94\":444,    \"93\":422,\n    \"92\":401,    \"91\":383,    \"90\":366,    \"89\":351,\n    \"88\":336,    \"87\":322,    \"86\":309,    \"85\":296,\n    \"84\":284,    \"83\":273,    \"82\":262,    \"81\":251,\n    \"80\":240,    \"79\":230,    \"78\":220,    \"77\":211,\n    \"76\":202,    \"75\":193,    \"74\":184,    \"73\":175,\n    \"72\":166,    \"71\":158,    \"70\":149,    \"69\":141,\n    \"68\":133,    \"67\":125,    \"66\":117,    \"65\":110,\n    \"64\":102,    \"63\":95,     \"62\":87,     \"61\":80,\n    \"60\":72,     \"59\":65,     \"58\":57,     \"57\":50,\n    \"56\":43,     \"55\":36,     \"54\":29,     \"53\":21,\n    \"52\":14,     \"51\":7,      \"50\":0,      \"49\":-7,\n    \"48\":-14,    \"47\":-21,    \"46\":-29,    \"45\":-36,\n    \"44\":-43,    \"43\":-50,    \"42\":-57,    \"41\":-65,\n    \"40\":-72,    \"39\":-80,    \"38\":-87,    \"37\":-95,\n    \"36\":-102,   \"35\":-110,   \"34\":-117,   \"33\":-125,\n    \"32\":-133,   \"31\":-141,   \"30\":-149,   \"29\":-158,\n    \"28\":-166,   \"27\":-175,   \"26\":-184,   \"25\":-193,\n    \"24\":-202,   \"23\":-211,   \"22\":-220,   \"21\":-230,\n    \"20\":-240,   \"19\":-251,   \"18\":-262,   \"17\":-273,\n    \"16\":-284,   \"15\":-296,   \"14\":-309,   \"13\":-322,\n    \"12\":-336,   \"11\":-351,   \"10\":-366,   \"9\":-383,\n    \"8\":-401,    \"7\":-422,    \"6\":-444,    \"5\":-470,\n    \"4\":-501,    \"3\":-538,    \"2\":-589,    \"1\":-677,\n    \"0\":-800,\n}","import * as Constants from './Constants'\n\nexport function isAdvancedFiltersEnabled(source) {\n    return source === Constants.SITE_CHESS_DOT_COM ||\n        source === Constants.SITE_LICHESS\n}\n\n\nexport function isFilterPanelEnabled(source, playerName) {\n    if(source === Constants.SITE_EVENT_DB ||\n        source === Constants.SITE_OPENING_TREE_FILE) {\n            return false\n    }\n    return !!playerName\n}\n\nexport function treeSaveDisabledReason(loadedSite, selectedSite, gamesProcessed, isDownloading){\n    if(selectedSite !== Constants.SITE_LICHESS && \n        selectedSite !== Constants.SITE_CHESS_DOT_COM) {\n        return \"Only supported for chess.com and lichess\"\n    }\n    if(loadedSite !== selectedSite || gamesProcessed<=0) {\n        return \"You need to analyze games before saving\"\n    }\n    if(isDownloading) {\n        return \"Action not supported while games are loading\"\n    }\n    return ''\n}\nexport function exportFileName(source, playerName, playerColor, selectedEvent, extension) {\n    if(source === Constants.SITE_EVENT_DB) {\n        return `${selectedEvent.name}.${extension}`\n    }\n    if(playerName) {\n        return `${playerName}-${playerColor}.${extension}`\n    }\n    return `openingtree-exportedgames.${extension}`\n}"],"sourceRoot":""}