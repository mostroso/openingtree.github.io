{"version":3,"sources":["app/CookieManager.js","app/Analytics.js","app/OpeningTreeSerializer.js","pres/loader/Common.js","app/Constants.js","pres/loader/Filters.js","pres/loader/Actions.js","app/PGNReaderWorker.js","pres/loader/TimeControlLabels.js","pres/loader/FilterLabels.js","pres/loader/AdvancedFilters.js","app/Common.js","app/PGNReader.js","app/util.js","app/chess/RacingKingsChess.js","app/chess/ChessLogic.js","app/OpeningGraph.js","app/OpeningManager.js","pres/Navigator.js","pres/GlobalHeader.js","pres/loader/Source.js","pres/loader/Dropzone.js","pres/loader/NotableChessGames.js","pres/loader/User.js","pres/loader/PGNLoader.js","pres/Settings.js","pres/ReportControls.js","pres/MovesList.js","pres/ControlsContainer.js","pres/StateManagement.js","pres/SnackbarContentWrapper.js","pres/MainContainer.js","index.js","app/SitePolicy.js"],"names":["CookieManager","Cookies","get","remove","path","domain","trackPageView","ReactGA","pageview","window","location","pathname","trackEvent","category","action","label","value","event","initialize","serializeOpeningTree","treeData","filename","callback","chunkedArray","chunks","chunk","header","index","arraySizes","arrays","map","arr","length","forEach","array","Array","prototype","push","apply","chunkSize","startIndex","i","chunkIndex","slice","chunkArray","deflatedChunks","packControlWord","remainingChunks","hasError","zlib","deflate","Buffer","JSON","stringify","error","data","byteLength","saveAs","Blob","type","deserializeOpeningTree","file","reader","FileReader","onload","evt","target","result","version","unpackControlWord","numChunks","handleInflate","console","log","parse","e","sortedChunks","sort","a","b","flattenedChunks","el","flat","size","reconstructObjectFromChunks","inflate","from","getInflatedChunks","onerror","name","message","readAsArrayBuffer","control","view","DataView","getUint16","getUint32","buffer","ArrayBuffer","setUint16","setUint32","Accordion","withStyles","root","border","boxShadow","borderBottom","display","margin","expanded","MUIAccordion","getNumberIcon","n","alt","className","src","height","advancedFilters","state","createSubObjectWithProperties","Constants","copyText","elementId","document","getElementById","select","setSelectionRange","execCommand","TIME_CONTROL_ULTRA_BULLET","TIME_CONTROL_BULLET","TIME_CONTROL_BLITZ","TIME_CONTROL_RAPID","TIME_CONTROL_CLASSICAL","TIME_CONTROL_CORRESPONDENCE","TIME_CONTROL_DAILY","FILTER_NAME_RATED","FILTER_NAME_SELECTED_TIMEFRAME","FILTER_NAME_DOWNLOAD_LIMIT","FILTER_NAME_ELO_RANGE","SITE_LICHESS","SITE_CHESS_DOT_COM","SITE_PGN_FILE","SITE_EVENT_DB","SITE_PLAYER_DB","SITE_OPENING_TREE_FILE","SITE_ONLINE_TOURNAMENTS","MAX_DOWNLOAD_LIMIT","MAX_ELO_RATING","EVENT_CATEGORY_PGN_LOADER","EVENT_CATEGORY_MOVES_LIST","EVENT_CATEGORY_CONTROLS","EVENT_CATEGORY_NAVIGATOR","EVENT_CATEGORY_CHESSBOARD","EVENT_CATEGORY_MESSAGE_SHOWN","ROOT_FEN","RACING_KINGS_ROOT_FEN","PLAYER_COLOR_WHITE","PLAYER_COLOR_BLACK","LOADER_ANIMATION_DURATION_MS","OPENING_TREE_EMAIL","OPENNIG_TREE_REDDIT","OPENING_TREE_LICHESS","OPENING_TREE_CHESS_COM","OPENING_TREE_DISCORD","OPENING_TREE_FILE_CURRENT_VERSION","ERROR_ACTION_VISIT_OLD_SITE","ERROR_ACTION_NONE","LICHESS_NOT_LOGGED_IN","LICHESS_STATE_PENDING","LICHESS_LOGGED_IN","LICHESS_FAILED_FETCH","ERROR_SEVERITY_ERROR","ERROR_SEVERITY_SUCCESS","VARIANT_RACING_KINGS","LICHESS_HEADER_RACING_KINGS","LICHESS_HEADER_STANDARD","User","props","playerColor","isAdvancedFiltersOpen","timeframeSteps","Object","assign","defaultAdvancedFilters","this","rated","setState","property","newState","site","SitePolicy","setImmediate","setFilters","bind","checked","newValue","colorError","filtersChange","isDisabled","areAdvancedFiltersApplied","newProps","entries","key","deepEqual","playerName","selectedNotablePlayer","expandedPanel","TransitionComponent","MuiCollapse","TransitionProps","timeout","onChange","handleExpansionChange","disabled","expandIcon","getSummary","component","playerColorChange","color","onClick","toggleState","icon","faCaretUp","faCaretDown","isOpen","toggleRated","handleTimeControlChange","handleTimeframeChange","handleEloRangeChange","handleDownloadLimitChange","React","Component","Actions","unload","pgnReader","stopDownloading","isGamesSubsectionOpen","exportingInProgress","streamsaver","mitm","encoder","TextEncoder","addEventListener","removeEventListener","importOpeningTree","files","err","subMesage","showError","success","importOpeningTreeObject","showInfo","exportOpeningTree","exportOpeningTreeObject","info","fileWriter","close","game","headers","join","moves","moveObject","move","pendingDownloads","write","encode","getPgnString","then","abortDownloading","shouldDownloadToFile","fileStream","createWriteStream","selectedNotableEvent","getWriter","PGNReader","variant","readerInstance","fetchPGNFromSite","selectedOnlineTournament","proxy","notify","downloadResponse","getTokens","lichess","cookieManager","getLichessAccessToken","readPgn","gamesProcessed","clear","loadedSite","setDownloading","importTreeClicked","startIcon","disableElevation","downloadDisabledReason","isDownloading","load","download","placement","title","exportTreeClicked","stopDownloadingAction","switchToMovesTab","faList","openingTreeLoadActions","regularActions","mainComponent","in","wrap","Worker","timeClasses","selectedTimeControls","unselectedTimeControls","includesAll","subArray","every","v","includes","getTimeControlLabel","timeControlState","getTimeControlsArray","Common","timeClass","filter","lichessTimeControlLabel","AdvancedFilters","currentlyOpenAdvancedFilter","timeframeMarks","downloadLimitMarks","eloRangeMarks","filterName","subSectionComponent","setCurrentlyOpenAdvancedFilter","Collapse","getTimeControlFilters","timeframe","getSelectedTimeFrameData","getTimeFrameFilters","selectedEloRange","getEloRangeFilters","downloadLimit","getDownloadLimitFilters","Slider","valueLabelDisplay","valueLabelFormat","val","step","min","marks","max","firstRow","middleRow","lastRow","colWidth","FormControl","FormGroup","Container","getTimeControlFilterRow","controls","firstColumnWidth","position","clsName","Row","Col","sm","FormControlLabel","Checkbox","changeCallback","children","getFilters","LICHESS_TIME_CONTROLS","CHESS_DOT_COM_TIME_CONTROLS","TIME_CONTROL_LABELS","rootFen","DP_TABLE","module","exports","mainObject","properties","subObject","simplifiedFen","fen","fenComponents","split","selected","timeControl","monthLabels","getTimeframeSteps","steps","year","startYear","currentYear","Date","getFullYear","currentMonth","getMonth","toLongLabel","fromLongLabel","month","fromIndex","toIndex","fromTimeframe","toTimeframe","currentDate","fromMonth","fromYear","fromTimeStamp","getTimeStampInfoFor","toYear","toMonth","toTimeStamp","minOrMax","getTime","getDate","getDaysInMonth","getPerformanceDetails","totalElo","white","draws","black","totalGames","averageElo","Math","round","playerWins","playerLosses","score","scorePercentage","ratingChange","results","performanceRating","Number","isInteger","toFixed","abs","isDateMoreRecentThan","date","than","RacingKingsChess","chess","Chess","SQUARES","turn","options","san","endsWith","substring","disambiguatedMove","problematicMove","potentialMoves","filteredMoves","potentialMove","charAt","disambiguate","chessLogic","OpeningGraph","graph","Graph","hasMoves","arrayEntries","pgnStats","parsedMoves","lastFen","parsedMove","addMoveForFen","sourceFen","targetFen","moveSan","addGameResultOnFen","addStatsToRoot","fullFen","resultIndex","currNode","getNodeFromGraph","gameResults","targetNode","details","blackWins","whiteWins","totalOpponentElo","lastPlayed","newDetails","getUpdatedMoveDetails","node","updateCalculatedValues","bestWin","bestWinGame","bestWinElo","getOpponentElo","worstLoss","worstLossGame","worstLossElo","lastPlayedGame","count","fullSourceFen","fullTargetFen","resultObject","playedByMax","getTargetDetailsCount","playedBy","targetDetails","addIfNull","nodes","GraphNode","set","currentMoveDetails","whiteWin","blackWin","draw","resultInt","opponentElo","currentBestWinGame","parseInt","currentWorstLossGame","currentLastPlayedGame","blackElo","whiteElo","entry","sloppy","targetNodeDetails","getDetailsForFen","orig","dest","to","level","levelFor","moveCount","maxCount","Map","OpeningManager","plys","currentIndex","pgn","pgnAsList","moveForward","pgnList","pgnSoFar","pgnListSoFar","moveNumber","whitePly","blackPly","currMove","floor","moveTo","Navigator","openingManager","currentMove","keyHandler","keyCode","previous","next","addPly","device","moveBack","opening","ChessEcoCodes","openingCode","code","lg","Button","faStepBackward","faStepForward","GlobalHeader","useState","setIsOpen","modal","setModal","toggleModal","launch","url","open","Navbar","light","expand","width","NavbarBrand","href","NavbarToggler","navbar","Nav","NavItem","NavLink","faDiscord","toggleFeedback","faComments","UncontrolledDropdown","DropdownToggle","nav","DropdownMenu","right","DropdownItem","divider","Modal","toggle","ModalHeader","ListGroup","ListGroupItem","tag","ModalFooter","Source","source","addNumber","faChessRook","Badge","AccordionSummary","aria-controls","id","getSourceOption","AccordionDetails","RadioGroup","siteChange","Radio","Divider","Dropzone","newFiles","filesChange","acceptedFiles","dropzoneText","handleFileChange","dropzoneParagraphClass","showFileNames","useChipsForPreview","previewChipProps","dropzoneClass","filesLimit","maxFileSize","NotableChessGames","updateDetails","option","profile","imageUrl","subText","list","selectedDetail","placeholder","renderOption","renderDetails","tournamentUrl","selectedPlayer","selectedEvent","playerNameError","tournamentUrlError","player","nextProps","trim","startsWith","parsedUrl","URL","hostname","tournamentSite","pathComponents","tournamentId","tournamentType","validateInputDetailsSet","playerDetailsChange","finalPlayerName","setTimeout","getLichessCardBody","getPlayerNameInput","lichessLoginState","Card","Spinner","CardBody","CardTitle","faInfoCircle","faSync","refreshLichessStatus","faSignOutAlt","logoutOfLichess","launchLichessOauth","lichessLoginName","faCheck","CardText","rel","helperText","TextField","editPlayerName","onKeyUp","playerNameKeyUp","getOnlineTournamentCard","getOnlineTournamentInput","editTournamentUrl","setPlayerDetails","notablePlayers","notablePlayerChange","notableEvents","notableEventChange","getPgnFileSelection","getLichessSelection","getChessComSelection","getGoatDBEventSelection","getGoatDBSelection","getOpeningTreeSelection","getOnlineTournamentSelection","getInputsToShow","AccordionActions","PGNLoader","selectedSite","URLSearchParams","search","settings","fetchLichessLoginStatus","panel","newExpanded","timestamp","now","playername","openingGraph","openingTreeSave","saveVersion","setEntries","importCallback","request","response","gamesDetails","body","newSite","fetchGOATGames","auth","bearer","responseObj","username","deleteLichessAccessToken","filters","pgnUrl","Filters","SettingsView","srcElement","tagName","eventName","reset","faRetweet","clearAction","faTrashAlt","resetAction","faFastBackward","analyse","faDesktop","ReportControls","stopPropagation","simplifiedView","multiline","rowsMax","inputProps","style","fontSize","spellCheck","copyFen","moveDetails","getFenField","switchToUserTab","faUser","performanceDetails","Table","eatClicks","isNaN","TableHead","TableRow","TableCell","TableBody","launchGame","faExternalLinkAlt","removeQuestionMarksFromDate","TableFooter","colSpan","indexOf","MovesList","openPerformanceIndex","onMove","prevProps","prevState","turnColor","moveIndex","movesToShow","resultsTable","movesTable","whitePlayer","blackPlayer","elo","performancePopoverOpen","openMove","Popover","trigger","togglePerformancePopover","sampleResultWhite","sampleResultBlack","sampleResult","getPopover","Progress","multi","bar","ControlsContainer","activeTab","activeGame","tab","tabs","classnames","active","faChartBar","faCog","TabContent","TabPane","tabId","settingsChange","updateProcessedGames","brushes","againstBrushes","forBrushes","calcMovable","dests","s","ms","square","verbose","m","free","orientation","promotion","lastMove","onMoveAction","navigateTo","previousMove","parsedGame","totalGamesProcessed","addPGN","latestFen","downloadingGames","moveToShape","brush","autoShapes","shapes","fillArray","movesForFen","gameResultsForFen","len","trackingEvent","subMessage","severity","errorActionText","errorAction","messageSeverity","trackingLabel","closeError","diagnosticsOpen","feedbackOpen","diagnosticsDataOpen","toggleDiagnosticsData","copyDiagnostics","importGameState","importState","getChessboardWidth","nearestMultipleOf8","innerWidth","innerHeight","getDiagnosticsValue","navigator","userAgent","getRedditLink","getSubject","getBody","getEmailLink","addStateManagement","obj","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","InfoIcon","theme","backgroundColor","green","palette","dark","primary","amber","iconVariant","opacity","marginRight","spacing","alignItems","classes","onClose","actionText","showReportButton","other","Icon","SnackbarContent","clsx","aria-describedby","IconButton","aria-label","MainContainer","urlVariant","selectedVariant","resize","chessboardWidth","handleResize","lastMoveArray","snackBarOpen","order","xs","movable","drawable","enabled","visible","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ModalBody","ReactDOM","render","isAdvancedFiltersEnabled","isFilterPanelEnabled","treeSaveDisabledReason","exportFileName","extension"],"mappings":"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","file":"static/js/main.4279520f.chunk.js","sourcesContent":["import Cookies from 'js-cookie'\n\nclass CookieManager {\n    getLichessAccessToken() {\n        return Cookies.get('at')\n    }\n    deleteLichessAccessToken() {\n        Cookies.remove('at', { path: '/', domain:'www.openingtree.com' })\n    }\n}\n\nexport default new CookieManager();","import ReactGA from 'react-ga';\nReactGA.initialize('UA-159149755-1');\n\nexport function trackPageView() {\n    ReactGA.pageview(window.location.pathname);\n}\n\nexport function trackEvent(category, action, label, value) {\n    ReactGA.event({\n        category: category,\n        action: action,\n        label: label,\n        value: value\n      })\n}\n\n","import zlib from 'zlib'\nimport {Buffer} from 'buffer'\nimport { saveAs } from 'file-saver';\n\nexport function serializeOpeningTree(treeData, filename, callback) {\n    let chunkedArray = chunk(treeData)\n    let deflatedChunks = []\n    //push version number 1 for later backward compatibility\n    deflatedChunks.push(packControlWord(0x1))\n    deflatedChunks.push(packControlWord(chunkedArray.length))\n    let remainingChunks = chunkedArray.length\n    let hasError = false;\n    chunkedArray.forEach((chunk)=>{\n        zlib.deflate(\n            new Buffer(JSON.stringify(chunk)), \n            (error,data)=>{\n                remainingChunks--\n                if(error) {\n                    hasError = true\n                }\n                deflatedChunks.push(packControlWord(data.byteLength))\n                deflatedChunks.push(data)\n                if(remainingChunks<=0) {\n                    if(hasError) {\n                        callback(\"Could not save file\")\n                        return\n                    }\n                    saveAs(new Blob(deflatedChunks, {type: \"application/octet-stream\"}), filename)\n                    callback(null, `Saved opening tree to file ${filename}`)\n                }\n            });\n        })\n}\n\nexport function deserializeOpeningTree(file, callback) {\n    let reader = new FileReader()\n    reader.onload = function(evt) {\n        let data = evt.target.result\n        let index = 0\n        let version = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        if(version !== 0x1) {\n            callback(\"File is not an openingtree save file.\", null,\"Are you loading the correct file?\")\n            return\n        }\n        let numChunks = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        if(!numChunks) {\n            callback(\"Input file not in correct format\", null)\n            return\n        }\n        getInflatedChunks(data, index, numChunks, callback)\n    };\n    reader.onerror = function(e) {\n        callback(\"Failed to read openingtree file\", null, `${e.target.error.name}:${e.target.error.message}`)\n    }\n    reader.readAsArrayBuffer(file)\n}\n\nfunction getInflatedChunks(data, startIndex, numChunks, callback) {\n    let index = startIndex\n    let deflatedChunks = []\n    let remainingChunks = numChunks\n    let hasError=false\n    let handleInflate = (error, data)=> {\n        remainingChunks--\n        if(error) {\n            console.log(error)\n            hasError=true\n        }\n        try {\n            deflatedChunks.push(JSON.parse(data))\n        } catch (e) {\n            console.log(e)\n            hasError=true\n        }\n        if(remainingChunks===0) {\n            if(hasError) {\n                callback(\"Input file seems corrupted\", null)\n            }\n            \n            callback(null, reconstructObjectFromChunks(deflatedChunks))\n        }\n        \n    }\n    while(numChunks>0) {\n        let chunkSize = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        zlib.inflate(\n            Buffer.from(data,index,chunkSize), handleInflate)\n        index = index + chunkSize\n        numChunks--\n    }\n}\n\nfunction reconstructObjectFromChunks(deflatedChunks) {\n    let sortedChunks = deflatedChunks.sort((a,b)=>a.index-b.index)\n    let flattenedChunks = sortedChunks.slice(1).map(el=>el.chunk).flat()\n    let header = sortedChunks[0]\n    let arrays = []\n    let index = 0\n    let arraySizes = header.arraySizes || [flattenedChunks.length]\n    arraySizes.forEach((size)=>{\n        arrays.push(flattenedChunks.slice(index,index+size))\n        index+=size\n    })\n    return {\n        header:header.chunk,\n        arrays:arrays\n    }\n}\n\nfunction unpackControlWord(control) {\n    let view = new DataView(control)\n    if(view.getUint16(0)!==0x1337 || view.getUint16(6)!==0xC0D3) {\n        return null\n    }\n    return view.getUint32(2)\n}\n\nfunction packControlWord(control) {\n    var buffer = new ArrayBuffer(8); \n    var view = new DataView(buffer); \n    view.setUint16(0, 0x1337)\n    view.setUint32(2, control>>>0)\n    view.setUint16(6, 0xC0D3)\n    return buffer\n}\n\nfunction chunk(treeData) {\n    let chunk1 = {chunk:treeData.header, index:0, \n        arraySizes:treeData.arrays.map(arr=>arr.length)}\n    let chunks = [chunk1]\n    treeData.arrays.forEach((array)=>{\n        Array.prototype.push.apply(chunks, chunkArray(array, 1000, chunks.length));\n    })\n    return chunks\n}\n\nfunction chunkArray(array, chunkSize, startIndex) {\n    let chunkedArray=[]\n    \n    for (let i=0, chunkIndex=1; i<array.length; i+=chunkSize, chunkIndex++) {\n        chunkedArray.push({chunk:array.slice(i,i+chunkSize), index:startIndex+chunkIndex});\n    }\n    return chunkedArray\n}\n","import { withStyles } from '@material-ui/core/styles';\nimport MUIAccordion from '@material-ui/core/Accordion';\nimport React from 'react'\nimport { createSubObjectWithProperties } from '../../app/util'\nimport * as Constants from '../../app/Constants'\n\nexport const Accordion = withStyles({\n    root: {\n        border: '1px solid rgba(0, 0, 0, .125)',\n        boxShadow: 'none',\n        '&:not(:last-child)': {\n            borderBottom: 0,\n        },\n        '&:before': {\n            display: 'none',\n        },\n        '&$expanded': {\n            margin: 'auto',\n        },\n    },\n    expanded: {},\n})(MUIAccordion);\n\nexport function getNumberIcon(n) {\n    return <img alt={`step ${n}`} className = 'lowOpacity styledNumbers' src={`/images/styled-${n}.png`} height={24}/>\n}\n\nexport function advancedFilters(state) {\n    return createSubObjectWithProperties(state,\n        [Constants.TIME_CONTROL_ULTRA_BULLET, Constants.TIME_CONTROL_BULLET,\n        Constants.TIME_CONTROL_BLITZ, Constants.TIME_CONTROL_RAPID,\n        Constants.TIME_CONTROL_CORRESPONDENCE, Constants.TIME_CONTROL_DAILY,\n        Constants.TIME_CONTROL_CLASSICAL, Constants.FILTER_NAME_RATED,\n        Constants.FILTER_NAME_SELECTED_TIMEFRAME, Constants.FILTER_NAME_DOWNLOAD_LIMIT,\n        Constants.FILTER_NAME_ELO_RANGE])\n}\n\nexport function copyText(elementId) {\n    /* Get the text field */\n    var copyText = document.getElementById(elementId);\n    try {\n        /* Select the text field */\n        copyText.select();\n        copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n        /* Copy the text inside the text field */\n        document.execCommand(\"copy\");\n        return true\n    } catch(e) {\n        return false\n    }\n}","export const TIME_CONTROL_ULTRA_BULLET = \"ultraBullet\"\nexport const TIME_CONTROL_BULLET = \"bullet\"\nexport const TIME_CONTROL_BLITZ = \"blitz\"\nexport const TIME_CONTROL_RAPID = \"rapid\"\nexport const TIME_CONTROL_CLASSICAL = \"classical\"\nexport const TIME_CONTROL_CORRESPONDENCE = \"correspondence\"\nexport const TIME_CONTROL_DAILY = \"daily\"\nexport const FILTER_NAME_RATED = \"rated\"\nexport const FILTER_NAME_SELECTED_TIMEFRAME = \"selectedTimeframe\"\nexport const FILTER_NAME_DOWNLOAD_LIMIT = \"downloadLimit\"\nexport const FILTER_NAME_ELO_RANGE = \"eloRange\"\n\nexport const SITE_LICHESS = \"lichess\"\nexport const SITE_CHESS_DOT_COM = \"chesscom\"\nexport const SITE_PGN_FILE = \"pgnfile\"\nexport const SITE_EVENT_DB = \"eventdb\"\nexport const SITE_PLAYER_DB = \"playerdb\"\nexport const SITE_OPENING_TREE_FILE = \"opntfile\"\nexport const SITE_ONLINE_TOURNAMENTS = \"tournament\"\n\nexport const MAX_DOWNLOAD_LIMIT = 2000\nexport const MAX_ELO_RATING = 3000\n\nexport const EVENT_CATEGORY_PGN_LOADER = \"loader\"\nexport const EVENT_CATEGORY_MOVES_LIST = \"moves\"\nexport const EVENT_CATEGORY_CONTROLS = \"controls\"\nexport const EVENT_CATEGORY_NAVIGATOR = \"navigator\"\nexport const EVENT_CATEGORY_CHESSBOARD = \"chessboard\"\nexport const EVENT_CATEGORY_ERROR = \"error\"\nexport const EVENT_CATEGORY_MESSAGE_SHOWN = \"message\"\n\nexport const ROOT_FEN = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nexport const RACING_KINGS_ROOT_FEN=\"8/8/8/8/8/8/krbnNBRK/qrbnNBRQ w - - 0 1\"\n\nexport const PLAYER_COLOR_WHITE = 'white'\nexport const PLAYER_COLOR_BLACK = 'black'\n\nexport const LOADER_ANIMATION_DURATION_MS = 500\n\nexport const OPENING_TREE_EMAIL = 'feedback@openingtree.com'\nexport const OPENNIG_TREE_REDDIT = 'opening_tree'\nexport const OPENING_TREE_LICHESS = 'vannooz'\nexport const OPENING_TREE_CHESS_COM = 'vannooz'\nexport const OPENING_TREE_DISCORD = 'https://discord.gg/hCwKkN8'\n\nexport const OPENING_TREE_FILE_CURRENT_VERSION = 2\n\nexport const ERROR_ACTION_REPORT = 'report'\nexport const ERROR_ACTION_VISIT_OLD_SITE = 'visitOld'\nexport const ERROR_ACTION_NONE = 'noAction'\nexport const LICHESS_NOT_LOGGED_IN = 0;\nexport const LICHESS_STATE_PENDING = 1;\nexport const LICHESS_LOGGED_IN = 2;\nexport const LICHESS_FAILED_FETCH = 3;\n\nexport const ERROR_SEVERITY_ERROR = \"error\";\nexport const ERROR_SEVERITY_WARNING = \"warning\";\nexport const ERROR_SEVERITY_SUCCESS = \"success\";\n\nexport const VARIANT_STANDARD = \"standard\";\nexport const VARIANT_RACING_KINGS = \"racingKings\";\n\nexport const LICHESS_HEADER_RACING_KINGS = \"Racing Kings\"\nexport const LICHESS_HEADER_STANDARD = \"Standard\"","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport {Accordion} from './Common'\nimport * as Constants from '../../app/Constants'\nimport { Collapse } from 'reactstrap'\nimport { trackEvent } from '../../app/Analytics'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Button as MaterialUIButton } from '@material-ui/core'\nimport { faCaretDown, faCaretUp} from '@fortawesome/free-solid-svg-icons'\nimport AdvancedFilters from './AdvancedFilters'\nimport {advancedFilters} from './Common'\nimport MuiCollapse from '@material-ui/core/Collapse';\nimport * as SitePolicy from '../../app/SitePolicy'\nimport { Radio, FormControlLabel, RadioGroup, FormHelperText, FormControl, FormLabel} from '@material-ui/core';\nimport deepEqual from 'deep-equal'\n\nexport default class User extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerColor: this.props.playerColor,\n            isAdvancedFiltersOpen: false\n        }\n        this.timeframeSteps=this.props.timeframeSteps\n        Object.assign(this.state, this.props.advancedFilters)\n        this.defaultAdvancedFilters = this.props.advancedFilters\n    }\n\n    toggleRated() {\n        if (this.state.rated === 'all') {\n            this.setState({ rated: 'rated' })\n        } else if (this.state.rated === 'rated') {\n            this.setState({ rated: 'casual' })\n        } else {\n            this.setState({ rated: 'all' })\n        }\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"AdvancedFilterChange\", \"rated\")\n    }\n    toggleState(property) {\n        return () => {\n            let newState = {}\n            newState[property] = !this.state[property]\n            this.setState(newState)\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ToggleAdvancedFilters\", this.state.site)\n        }\n    }\n    playerColorChange(event) {\n        let playerColor = event.target.value\n        this.setState({ playerColor: playerColor })\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ColorChange\", playerColor)\n        if(!SitePolicy.isAdvancedFiltersEnabled(this.props.site)) {\n            setImmediate(this.setFilters.bind(this))\n        }\n}\n    handleTimeControlChange(event) {\n        this.setState({ [event.target.name]: event.target.checked });\n    }\n    handleTimeframeChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_SELECTED_TIMEFRAME]: newValue });\n    }\n    handleEloRangeChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_ELO_RANGE]: newValue });\n    }\n    handleDownloadLimitChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_DOWNLOAD_LIMIT]: newValue });\n    }\n\n    setFilters(){\n        if(!this.state.playerColor) {\n            this.setState({colorError:\"Please select a color\"})\n            return\n        }\n        this.setState({colorError:\"\", isAdvancedFiltersOpen:false})\n        this.props.filtersChange(this.state)\n    }\n    getSummary(isDisabled) {\n        if(this.props.playerColor && !isDisabled) {\n            return <span>\n                {getNumberIcon('done')}\n                Color: <b>{this.props.playerColor===Constants.PLAYER_COLOR_WHITE?\"White\":\"Black\"} </b>\n                {this.areAdvancedFiltersApplied()?<span className=\"smallText\">(Filters applied)</span>:null}</span>\n\n        }\n        return <span>{getNumberIcon(3)} Color and filters</span>\n    }\n    componentWillReceiveProps(newProps) {\n        this.setState({...newProps.advancedFilters, playerColor:newProps.playerColor})\n    }\n\n    areAdvancedFiltersApplied(){\n        for (let [key, value] of Object.entries(this.defaultAdvancedFilters)) {\n            if(this.props.advancedFilters[key]===value) {\n                continue\n            }\n            if(!deepEqual(this.props.advancedFilters[key], value)) {\n                return true\n            } \n        }\n        return false\n    }\n\n    \n    render(){\n        let isDisabled = !SitePolicy.isFilterPanelEnabled(this.props.site, this.props.playerName, this.props.selectedNotablePlayer)\n        return <Accordion expanded={this.props.expandedPanel === 'filters'}\n                    TransitionComponent={MuiCollapse}\n                    TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n            onChange={this.props.handleExpansionChange}\n            disabled={isDisabled}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>{this.getSummary(isDisabled)}</AccordionSummary>\n            <ExpansionPanelDetails>\n                <div className=\"pgnloaderfirstsection\">\n                <FormControl component=\"fieldset\" error={!!this.state.colorError}>\n                    <FormLabel component=\"legend\">Games where <b>{this.props.playerName}</b> is playing as:</FormLabel>\n                    <RadioGroup onChange={this.playerColorChange.bind(this)} value={this.state.playerColor}>\n                        <FormControlLabel className=\"whitelabel\" control={<Radio color=\"primary\" />} value={Constants.PLAYER_COLOR_WHITE} label={this.state.playerColor === Constants.PLAYER_COLOR_WHITE?<b>White</b>:\"White\"}/>\n                        <FormControlLabel className=\"blacklabel\" control={<Radio color=\"primary\" />} value={Constants.PLAYER_COLOR_BLACK} label={this.state.playerColor === Constants.PLAYER_COLOR_BLACK?<b>Black</b>:\"Black\"}/>\n                    </RadioGroup>\n                    <FormHelperText>{this.state.colorError}</FormHelperText>\n                </FormControl>\n                </div>\n                {SitePolicy.isAdvancedFiltersEnabled(this.props.site)?<div className=\"pgnloadersection\"><span className=\"linkStyle\" onClick={this.toggleState('isAdvancedFiltersOpen').bind(this)}>Advanced filters <FontAwesomeIcon icon={this.state.isAdvancedFiltersOpen ? faCaretUp : faCaretDown} /></span>\n                    <Collapse isOpen={this.state.isAdvancedFiltersOpen}>\n                            <AdvancedFilters\n                                site={this.props.site}\n                                toggleRated={this.toggleRated.bind(this)}\n                                handleTimeControlChange={this.handleTimeControlChange.bind(this)}\n                                handleTimeframeChange={this.handleTimeframeChange.bind(this)}\n                                handleEloRangeChange={this.handleEloRangeChange.bind(this)}\n                                timeframeSteps={this.timeframeSteps}\n                                handleDownloadLimitChange={this.handleDownloadLimitChange.bind(this)}\n                                advancedFilters={advancedFilters(this.state)}\n                            />\n                    </Collapse>\n                </div>:null}\n                </ExpansionPanelDetails>\n                <Divider />\n                <AccordionActions>\n                    <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.setFilters.bind(this)}>Continue</MaterialUIButton>\n                </AccordionActions></Accordion>\n    \n    }\n}","import React from 'react'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Button as MaterialUIButton } from '@material-ui/core'\nimport PGNReader from '../../app/PGNReaderWorker'\nimport { faList} from '@fortawesome/free-solid-svg-icons'\nimport GetApp from '@material-ui/icons/GetApp'\nimport Equalizer from '@material-ui/icons/Equalizer'\nimport Fade from '@material-ui/core/Fade'\nimport Save from '@material-ui/icons/Save';\nimport * as SitePolicy from '../../app/SitePolicy'\nimport {Tooltip} from '@material-ui/core'\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport {serializeOpeningTree, deserializeOpeningTree} from '../../app/OpeningTreeSerializer'\nimport {proxy} from 'comlink'\nimport streamsaver from 'streamsaver'\nimport cookieManager from '../../app/CookieManager'\n\nexport default class Actions extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {\n            isGamesSubsectionOpen : false,\n            exportingInProgress : false\n        }\n        streamsaver.mitm = \"download/download-mitm.html\"\n        this.encoder = new TextEncoder()\n\n    }\n    unload = () => {\n        if (this.pgnReader) {\n            this.pgnReader.stopDownloading()\n        }\n    }\n    componentDidMount() {\n        window.addEventListener(\"beforeunload\", this.unload);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"beforeunload\", this.unload);\n    }\n    importTreeClicked() {\n        this.setState({exportingInProgress:true})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"LoadTree\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n        setImmediate(this.importOpeningTree.bind(this))\n    }\n    importOpeningTree() {\n        deserializeOpeningTree(this.props.files[0], \n            (err,data, subMesage)=> {\n                if(err) {\n                    this.props.showError(err, null, subMesage)\n                    this.setState({exportingInProgress:false})\n                    return\n                }\n                let success = this.props.importOpeningTreeObject(data)\n                this.setState({exportingInProgress:false})\n                if(success) {\n                    this.props.showInfo(\"Successfuly loaded openingtree\")                \n                }\n            })\n    }\n    exportTreeClicked() {\n        this.setState({exportingInProgress:true})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"SaveTree\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n        setImmediate(this.exportOpeningTree.bind(this))\n    }\n    exportOpeningTree() {\n        serializeOpeningTree(this.props.exportOpeningTreeObject(), \n            SitePolicy.exportFileName(this.props.site, this.props.playerName, this.props.playerColor, null, \"tree\"), \n            (err, info) => {\n                if(err) {\n                    this.props.showError(err)                    \n                } else {\n                    this.props.showInfo(info)\n                }\n                this.setState({exportingInProgress:false})\n            })\n    }\n    abortDownloading() {\n        if(this.fileWriter) {\n            this.fileWriter.close()\n            this.fileWriter = null\n        }\n    }\n\n    getPgnString(game){\n        return `${Object.entries(game.headers).map(header=>`[${header[0]} \"${header[1]}\"]`).join(\"\\n\")}\n                \\n${game.moves.map((moveObject, index)=>{\n                    return `${index%2!==0?'':index/2+1+\".\"} ${moveObject.move}`\n                }).join(' ')} ${game.result}\\n\\n\\n`\n    }\n    downloadResponse(result, pendingDownloads) {\n        this.fileWriter.write(this.encoder.encode(result.map(game=>this.getPgnString(game)).join(\"\"))).then(()=>{\n            if(!pendingDownloads) {\n                this.abortDownloading()\n                return false\n            }\n        })\n        return true\n    }\n\n    readPgn(shouldDownloadToFile) {\n        if(shouldDownloadToFile) {\n            let fileStream =  streamsaver.createWriteStream(\n                SitePolicy.exportFileName(\n                    this.props.site, this.props.playerName, \n                    this.props.playerColor, this.props.selectedNotableEvent, \"pgn\"))\n            this.fileWriter = fileStream.getWriter()\n        }\n\n        new PGNReader(this.props.variant).then((readerInstance) => {\n            this.pgnReader = readerInstance\n            this.pgnReader.fetchPGNFromSite(this.props.playerName,\n                this.props.playerColor,\n                this.props.site,\n                this.props.selectedNotablePlayer,\n                this.props.selectedNotableEvent,\n                this.props.selectedOnlineTournament,\n                shouldDownloadToFile,\n                this.props.advancedFilters,\n                proxy(this.props.notify),\n                proxy(this.props.showError),\n                proxy(this.stopDownloading.bind(this)),\n                this.props.files,\n                proxy(this.downloadResponse.bind(this)),\n                this.getTokens())\n        })\n    }\n    \n    getTokens(){\n        return {\n            lichess:cookieManager.getLichessAccessToken()\n        }\n    }\n    download() {\n        this.readPgn(true)\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"Download\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n\n    }\n\n    getPlayerName() {\n        if(this.props.site === Constants.SITE_PLAYER_DB) {\n            return this.props.selectedNotablePlayer.name\n        }\n        return this.props.playerName\n    }\n    componentWillReceiveProps(newProps) {\n        if(newProps.gamesProcessed>0) {\n            this.setState({isGamesSubsectionOpen:true})\n        }\n    }\n\n    load() {\n        this.props.clear()\n        this.setState({ isGamesSubsectionOpen: true, loadedSite:this.props.site })\n        // set the player name and color in the global state\n        this.props.onChange(\"playerName\", this.props.playerName)\n        this.props.onChange(\"playerColor\", this.props.playerColor)\n        this.readPgn(false)\n        this.props.setDownloading(true)\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"Load\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n    }\n    stopDownloading() {\n        this.props.setDownloading(false)\n    }\n    stopDownloadingAction() {\n        this.stopDownloading()\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"StopDownloading\", this.props.site)\n    }\n    openingTreeLoadActions() {\n        return <div className=\"pgnloadersection\">\n            <MaterialUIButton\n            onClick={this.importTreeClicked.bind(this)}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={this.state.exportingInProgress?<HourglassEmptyIcon/>:<GetApp/>}\n            className=\"mainButton\" disableElevation\n            disabled={this.state.exportingInProgress}\n            >\n                {this.state.exportingInProgress?\"Loading from file\":\"Load openingtree\"}\n        </MaterialUIButton></div>\n    }\n    regularActions() {\n        let downloadDisabledReason = SitePolicy.treeSaveDisabledReason(\n                                        this.state.loadedSite, \n                                        this.props.site,\n                                        this.props.gamesProcessed, \n                                        this.props.isDownloading)\n        return <div>\n        <div className=\"pgnloadersection\"><MaterialUIButton\n            onClick={this.load.bind(this)}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Equalizer />}\n            className=\"mainButton\" disableElevation\n        >\n            Analyze games\n        </MaterialUIButton></div>\n        <div className=\"pgnloadersection\"><MaterialUIButton\n            onClick={this.download.bind(this)}\n            variant=\"contained\"\n            color=\"default\"\n            startIcon={<GetApp />}\n            className=\"mainButton\" disableElevation\n        >\n            Export as PGN\n        </MaterialUIButton></div>\n        {\n            <div className=\"pgnloadersection\"><Tooltip placement=\"top\" title={downloadDisabledReason||\"Save a .tree file locally for faster reload later\"}>\n                <span><MaterialUIButton\n                onClick={this.exportTreeClicked.bind(this)}\n                variant=\"contained\"\n                color=\"default\"\n                startIcon={this.state.exportingInProgress?<HourglassEmptyIcon/>:<Save/>}\n                className=\"mainButton\" disableElevation\n                disabled={!!downloadDisabledReason || this.state.exportingInProgress}\n                >\n                    {this.state.exportingInProgress?\"Saving to file\":\"Save .tree file\"}\n                </MaterialUIButton></span></Tooltip></div>\n            }\n        {\n            this.state.isGamesSubsectionOpen ?\n                <div>\n                    <div className=\"pgnloadersection\">\n                        {!this.props.playerColor?\"Games\":this.props.playerColor === Constants.PLAYER_COLOR_WHITE?\"White games\":\"Black games\"}{` loaded: ${this.props.gamesProcessed} `}{this.props.isDownloading ? <span className=\"stopDownloading\">[<span className=\"linkStyle\" onClick={this.stopDownloadingAction.bind(this)}><img alt=\"loading spinner\" src=\"./spinner.gif\" height=\"15\" />stop</span>]</span> : \"\"}\n                    </div>\n                    <div onClick={() => this.props.switchToMovesTab()} className=\"navLinkButton pgnloadersection\">\n                        <FontAwesomeIcon icon={faList} /> View Moves&gt;&gt;\n                </div>\n                </div>\n                : \"\"\n        }\n        </div>\n    }\n    mainComponent() {\n        if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            return this.openingTreeLoadActions()\n        }\n        return this.regularActions()\n    }\n    render(){\n        if(this.props.expandedPanel) {\n            return <Fade timeout={Constants.LOADER_ANIMATION_DURATION_MS*2}>\n            {this.mainComponent()}\n        </Fade>\n        }\n        return <Fade in timeout={Constants.LOADER_ANIMATION_DURATION_MS*3}>\n            {this.mainComponent()}\n        </Fade>\n    }\n}","import {wrap} from 'comlink'\n\nconst PGNReader = wrap(new Worker('./PGNReader.js', { type: 'module' }))\n\nexport default PGNReader","import * as Constants from '../../app/Constants'\nimport * as Common from '../../app/Common'\nimport {getTimeControlsArray} from '../../app/util'\n\nlet timeClasses = [\n    {\n        label:\"Fast time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ]\n    },\n    {\n        label:\"Slow time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ\n        ]\n    },\n    {\n        label:\"Reasonable time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BLITZ,\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET\n        ]\n    },\n    {\n        label:\"Exclude slow time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ,\n            Constants.TIME_CONTROL_RAPID\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ]\n    }\n]\n        \n\n\nexport function timeControlLabel(site, timeControlState) {\n    let selectedTimeControls = getTimeControlsArray(site, timeControlState, true)\n    let unselectedTimeControls = getTimeControlsArray(site, timeControlState, false)\n    if(unselectedTimeControls.length === 0 || selectedTimeControls.length === 0) {\n        return \"All time controls\"\n    }\n    if(selectedTimeControls.length === 1) {\n        return Common.TIME_CONTROL_LABELS[selectedTimeControls[0]]\n    }\n    if(unselectedTimeControls.length === 1) {\n        return `All except ${Common.TIME_CONTROL_LABELS[unselectedTimeControls[0]]}`\n    }\n    if(selectedTimeControls.length === 2) {\n        return `${Common.TIME_CONTROL_LABELS[selectedTimeControls[0]]} and ${Common.TIME_CONTROL_LABELS[selectedTimeControls[1]]}`\n    }\n\n    return lichessTimeControlLabel(selectedTimeControls, unselectedTimeControls)\n}\n\nfunction lichessTimeControlLabel(selectedTimeControls, unselectedTimeControls) {\n    let timeClass = timeClasses.filter(\n        (timeClass) => {\n            return includesAll(unselectedTimeControls,timeClass.unselectedTimeControls)\n                && includesAll(selectedTimeControls,timeClass.selectedTimeControls)\n    })\n    if(timeClass.length) {\n        return timeClass[0].label\n    } \n    return selectedTimeControls.map(control=>Common.TIME_CONTROL_LABELS[control]).join(', ')\n}\n\nfunction includesAll(arr, subArray) {\n    return subArray.every(v => arr.includes(v));\n}\n","import {timeControlLabel} from './TimeControlLabels'\nimport {getSelectedTimeFrameData} from '../../app/util'\nimport * as Constants from '../../app/Constants'\n\nexport const getTimeControlLabel = timeControlLabel\n\nexport function getRatedLabel(rated) {\n    if(rated === 'all') {\n        return \"Rated and casual\"\n    } else if (rated === 'rated') {\n        return \"Rated only\"\n    } else if (rated === 'casual') {\n        return \"Casual only\"\n    }\n}\n\nexport function getWhenPlayedLabel(timeframe, timeframeSteps) {\n    return getSelectedTimeFrameData(timeframe, timeframeSteps).label\n}\n\nexport function getELORangeLabel(selectedEloRange) {\n    if(selectedEloRange[0] === 0 && selectedEloRange[1]===Constants.MAX_ELO_RATING) {\n        return \"All elo ratings\"\n    } else if (selectedEloRange[0] === 0) {\n        return `Below ${selectedEloRange[1]}`\n    } else if (selectedEloRange[1] === Constants.MAX_ELO_RATING) {\n        return `Above ${selectedEloRange[0]}`\n    } else {\n        return `Between ${selectedEloRange[0]} and ${selectedEloRange[1]}`\n    }\n}\nexport function getDownloadLimitLabel(downloadLimit) {\n    return downloadLimit>= Constants.MAX_DOWNLOAD_LIMIT?\"No limit\":`${downloadLimit} games`\n}\n","import FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport React from 'react'\nimport {Collapse, Container, Row, Col} from 'reactstrap'\nimport { FormControlLabel,Slider } from '@material-ui/core';\nimport * as Constants from '../../app/Constants'\nimport {getTimeControlLabel, getELORangeLabel, getRatedLabel, getWhenPlayedLabel, getDownloadLimitLabel} from './FilterLabels'\nimport * as Common from '../../app/Common'\nimport {trackEvent} from '../../app/Analytics'\n\nexport default class AdvancedFilters extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentlyOpenAdvancedFilter:'',\n        }\n        this.timeframeMarks=[\n            {\n                value:0,\n                label:\"Big bang\"\n            }, {\n                value:props.timeframeSteps.length-1,\n                label:\"Now\"\n            }]\n        this.downloadLimitMarks=[\n            {\n                value:0,\n                label:\"0\"\n            }, {\n                value:Constants.MAX_DOWNLOAD_LIMIT,\n                label:`No limit`\n            }]\n        this.eloRangeMarks=[\n            {\n                value:0,\n                label:\"0\"\n            }, {\n                value:Constants.MAX_ELO_RATING,\n                label:`No limit`\n            }]\n    \n    }\n    setCurrentlyOpenAdvancedFilter(filterName) {\n        return () => {\n            if(this.state.currentlyOpenAdvancedFilter === filterName) {\n                //close if already open\n                filterName = ''\n            }\n            this.setState({currentlyOpenAdvancedFilter:filterName})\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"AdvancedFilterChange\", filterName)\n        }\n    }\n\n    getFilters(site){\n        return <div>\n            {this.subSectionComponent('Mode', getRatedLabel(this.props.advancedFilters.rated), this.props.toggleRated)}\n            {this.subSectionComponent('Time control', getTimeControlLabel(this.props.site, this.props.advancedFilters), \n                    this.setCurrentlyOpenAdvancedFilter('timeControl').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'timeControl'}>\n                    {this.getTimeControlFilters(site, 4)}\n                </Collapse>\n            )}\n            {this.subSectionComponent('When played', getWhenPlayedLabel(this.props.advancedFilters[Constants.FILTER_NAME_SELECTED_TIMEFRAME], this.props.timeframeSteps), \n                this.setCurrentlyOpenAdvancedFilter('whenPlayed').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'whenPlayed'}>\n                    {this.getTimeFrameFilters()}\n                </Collapse>)}\n            {this.subSectionComponent('Opponent elo range', getELORangeLabel(this.props.advancedFilters[Constants.FILTER_NAME_ELO_RANGE]), \n                this.setCurrentlyOpenAdvancedFilter('eloRange').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'eloRange'}>\n                    {this.getEloRangeFilters()}\n                </Collapse>)}\n            {this.subSectionComponent('Download limit', getDownloadLimitLabel(this.props.advancedFilters[Constants.FILTER_NAME_DOWNLOAD_LIMIT]), \n                this.setCurrentlyOpenAdvancedFilter('downloadLimit').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'downloadLimit'}>\n                    {this.getDownloadLimitFilters()}\n                </Collapse>)}\n      </div>\n    }\n\n    getDownloadLimitFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_DOWNLOAD_LIMIT]}\n            onChange={this.props.handleDownloadLimitChange}\n            valueLabelDisplay=\"auto\"\n            valueLabelFormat={(val)=>val>=Constants.MAX_DOWNLOAD_LIMIT?\"All\":val}\n            step={100}\n            min={0}\n            marks={this.downloadLimitMarks}\n            max={Constants.MAX_DOWNLOAD_LIMIT}\n        />\n    }\n\n    getTimeFrameFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_SELECTED_TIMEFRAME]}\n            onChange={this.props.handleTimeframeChange}\n            valueLabelDisplay=\"off\"\n            valueLabelFormat={(val)=>this.props.timeframeSteps[val].label}\n            step={1}\n            marks={this.timeframeMarks}\n            min={0}\n            max={this.props.timeframeSteps.length-1}\n        />\n    }\n\n    getEloRangeFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_ELO_RANGE]}\n            onChange={this.props.handleEloRangeChange}\n            valueLabelDisplay=\"off\"\n            marks={this.eloRangeMarks}\n            min={0}\n            max={Constants.MAX_ELO_RATING}\n        />\n    }\n\n    getTimeControlFilters(site){\n        let firstRow = null, middleRow = null, lastRow = null\n        let colWidth = null\n        if(site === 'lichess') {\n            firstRow = [Constants.TIME_CONTROL_BULLET,\n                        Constants.TIME_CONTROL_ULTRA_BULLET]\n            middleRow = [Constants.TIME_CONTROL_BLITZ,\n                        Constants.TIME_CONTROL_CLASSICAL]\n            lastRow = [Constants.TIME_CONTROL_RAPID,\n                        Constants.TIME_CONTROL_CORRESPONDENCE]\n            colWidth = '4'\n                    \n        } else {\n            firstRow = [Constants.TIME_CONTROL_BULLET,\n                        Constants.TIME_CONTROL_BLITZ]\n            lastRow = [Constants.TIME_CONTROL_RAPID, \n                        Constants.TIME_CONTROL_DAILY]\n            colWidth = '6'\n        }\n        return <FormControl><FormGroup><Container>\n            {this.getTimeControlFilterRow(firstRow,colWidth,'first')}\n            {middleRow?this.getTimeControlFilterRow(middleRow,colWidth,'middle'):null}\n            {this.getTimeControlFilterRow(lastRow,colWidth,'last')}\n          </Container>\n        </FormGroup></FormControl>\n      \n    }\n\n    getTimeControlFilterRow(controls,firstColumnWidth, position){\n        let clsName = 'topBottomNegativeMargin'\n        if(position === \"first\") {\n            clsName = 'bottomNegativeMargin'\n        } else if (position === \"last\") {\n            clsName = 'topNegativeMargin'\n        } \n        return <Row className={clsName}>\n            {controls.map((control) => \n            <Col sm={firstColumnWidth} key={`ctrl${control}`}>\n                \n            <FormControlLabel className = \"nomargin\"\n                control={<Checkbox checked={this.props.advancedFilters[control]} color=\"primary\" \n                onChange={this.props.handleTimeControlChange} name={control} />}\n                label={Common.TIME_CONTROL_LABELS[control]}\n          /></Col>)}</Row>\n    }\n\n    subSectionComponent(title, label, changeCallback, children) {\n        return <div className=\"pgnloadersection\">{title}: <span className=\"smallText\">[<span className=\"linkStyle\" onClick={changeCallback}>change</span>]</span>\n        <div><b>{label}</b></div>{children}\n        </div>\n    }\n\n\n    render() {\n        return this.getFilters(this.props.site)\n    }\n\n}","import * as Constants from './Constants'\n\nexport const LICHESS_TIME_CONTROLS = [\n    Constants.TIME_CONTROL_ULTRA_BULLET,\n    Constants.TIME_CONTROL_BULLET,\n    Constants.TIME_CONTROL_BLITZ,\n    Constants.TIME_CONTROL_RAPID,\n    Constants.TIME_CONTROL_CLASSICAL,\n    Constants.TIME_CONTROL_CORRESPONDENCE\n]\nexport const CHESS_DOT_COM_TIME_CONTROLS = [\n    Constants.TIME_CONTROL_BULLET,\n    Constants.TIME_CONTROL_BLITZ,\n    Constants.TIME_CONTROL_RAPID,\n    Constants.TIME_CONTROL_DAILY,\n]\n\nexport const TIME_CONTROL_LABELS = {\n    [Constants.TIME_CONTROL_ULTRA_BULLET]: \"Ultrabullet\",\n    [Constants.TIME_CONTROL_BULLET]: \"Bullet\",\n    [Constants.TIME_CONTROL_BLITZ]: \"Blitz\",\n    [Constants.TIME_CONTROL_RAPID]: \"Rapid\",\n    [Constants.TIME_CONTROL_CLASSICAL]: \"Classical\",\n    [Constants.TIME_CONTROL_CORRESPONDENCE]: \"Correspondence\",\n    [Constants.TIME_CONTROL_DAILY]: \"Daily\"\n}\n\nexport function trimString(str) {\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nexport function rootFen(variant) {\n    if(variant === Constants.VARIANT_RACING_KINGS) {\n        return Constants.RACING_KINGS_ROOT_FEN\n    }\n    return Constants.ROOT_FEN\n}\n\nexport function lichessVariantHeader(variant) {\n    if(variant === Constants.VARIANT_RACING_KINGS) {\n        return Constants.LICHESS_HEADER_RACING_KINGS\n    }\n    return Constants.LICHESS_HEADER_STANDARD\n}\n\nexport const DP_TABLE = {\n    \"100\":800,   \"99\":677,    \"98\":589,    \"97\":538,\n    \"96\":501,    \"95\":470,    \"94\":444,    \"93\":422,\n    \"92\":401,    \"91\":383,    \"90\":366,    \"89\":351,\n    \"88\":336,    \"87\":322,    \"86\":309,    \"85\":296,\n    \"84\":284,    \"83\":273,    \"82\":262,    \"81\":251,\n    \"80\":240,    \"79\":230,    \"78\":220,    \"77\":211,\n    \"76\":202,    \"75\":193,    \"74\":184,    \"73\":175,\n    \"72\":166,    \"71\":158,    \"70\":149,    \"69\":141,\n    \"68\":133,    \"67\":125,    \"66\":117,    \"65\":110,\n    \"64\":102,    \"63\":95,     \"62\":87,     \"61\":80,\n    \"60\":72,     \"59\":65,     \"58\":57,     \"57\":50,\n    \"56\":43,     \"55\":36,     \"54\":29,     \"53\":21,\n    \"52\":14,     \"51\":7,      \"50\":0,      \"49\":-7,\n    \"48\":-14,    \"47\":-21,    \"46\":-29,    \"45\":-36,\n    \"44\":-43,    \"43\":-50,    \"42\":-57,    \"41\":-65,\n    \"40\":-72,    \"39\":-80,    \"38\":-87,    \"37\":-95,\n    \"36\":-102,   \"35\":-110,   \"34\":-117,   \"33\":-125,\n    \"32\":-133,   \"31\":-141,   \"30\":-149,   \"29\":-158,\n    \"28\":-166,   \"27\":-175,   \"26\":-184,   \"25\":-193,\n    \"24\":-202,   \"23\":-211,   \"22\":-220,   \"21\":-230,\n    \"20\":-240,   \"19\":-251,   \"18\":-262,   \"17\":-273,\n    \"16\":-284,   \"15\":-296,   \"14\":-309,   \"13\":-322,\n    \"12\":-336,   \"11\":-351,   \"10\":-366,   \"9\":-383,\n    \"8\":-401,    \"7\":-422,    \"6\":-444,    \"5\":-470,\n    \"4\":-501,    \"3\":-538,    \"2\":-589,    \"1\":-677,\n    \"0\":-800,\n}","module.exports = __webpack_public_path__ + \"static/js/0.fcb1abbe.chunk.worker.js\"","import * as Constants from '../app/Constants'\nimport * as Common from '../app/Common'\n\nexport function createSubObjectWithProperties(mainObject, properties) {\n    let subObject = {}\n    properties.forEach(property => {\n        subObject[property] = mainObject[property]\n    });\n    return subObject\n}\nexport function simplifiedFen(fen) {\n    let fenComponents = fen.split(' ')\n    if(fenComponents.length <=4) {\n        return fen\n    }\n    //exclude move and halfMove components\n    return `${fenComponents[0]} ${fenComponents[1]} ${fenComponents[2]}`\n}\n\nexport function getTimeControlsArray(site,timeControlState, selected) {\n    let allTimeControls = site === Constants.SITE_LICHESS ? \n        Common.LICHESS_TIME_CONTROLS : Common.CHESS_DOT_COM_TIME_CONTROLS\n    return allTimeControls.filter((timeControl)=>!!timeControlState[timeControl] === selected)\n}\nlet monthLabels = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n]\nexport function getTimeframeSteps() {\n    let steps = [{\n        year:2007,\n        value:0\n    }]\n    let value = 1;\n    let startYear = 2010\n    let currentYear = new Date().getFullYear()\n    let currentMonth = new Date().getMonth()\n    while(startYear < currentYear-1) {\n        steps.push({\n            toLongLabel:`${monthLabels[11]} ${startYear}`,\n            fromLongLabel:`${monthLabels[0]} ${startYear}`,\n            year:startYear,\n            value:value\n        })\n        startYear++\n        value++\n    }\n    for(let i=11;i>0;i--) {\n\n        let month = (currentMonth+12-i)%12\n        let year = month<currentMonth?currentYear:currentYear-1\n        steps.push({\n            fromLongLabel: `${monthLabels[month]} ${year}`,\n            toLongLabel: `${monthLabels[month]} ${year}`,\n            month:month,\n            year: year,\n            value:value\n        })\n        value++\n    }\n    steps.push({\n        month:12,\n        year: currentYear,\n        value:value\n    })\n    return steps\n}\n\nexport function getSelectedTimeFrameData(timeframe, timeframeSteps) {\n    let fromIndex = timeframe[0]\n    let toIndex = timeframe[1]\n    let fromTimeframe = timeframeSteps[fromIndex]\n    let toTimeframe = timeframeSteps[toIndex]\n    \n    if(fromIndex === timeframeSteps.length-1 && toIndex === timeframeSteps.length-1) {\n        let currentDate = new Date()\n        return {\n            label:\"Current month\",\n            fromMonth:currentDate.getMonth(),\n            fromYear:currentDate.getFullYear(),\n            fromTimeStamp:getTimeStampInfoFor(currentDate.getMonth(), currentDate.getFullYear(), \"min\")\n        }\n    }\n    if(fromIndex === 0 && toIndex === 0) {\n        return {label:\"Anytime\"}\n    }\n    if(fromIndex === 0 && toIndex === timeframeSteps.length-1) {\n        return {label:\"Anytime\"}\n    }\n    if(toIndex === timeframeSteps.length-1) {\n        let month = fromTimeframe.month ? fromTimeframe.month : 0\n        return {\n            label:`Since ${fromTimeframe.fromLongLabel}`,\n            fromYear: fromTimeframe.year,\n            fromMonth: month,\n            fromTimeStamp: getTimeStampInfoFor(month, fromTimeframe.year, \"min\")\n        }\n    }\n    if(fromIndex === 0) {\n        let month = toTimeframe.month ? toTimeframe.month : 11\n        return {\n            label:`Until ${toTimeframe.toLongLabel}`,\n            toYear: toTimeframe.year,\n            toMonth: month,\n            toTimeStamp: getTimeStampInfoFor(month, toTimeframe.year, \"max\")\n        }\n    }\n    let fromMonth = fromTimeframe.month ? fromTimeframe.month : 0\n    let toMonth = toTimeframe.month ? toTimeframe.month : 11\n    return {\n        label:`From ${fromTimeframe.fromLongLabel} to ${toTimeframe.toLongLabel}`,\n        fromYear: fromTimeframe.year,\n        fromMonth: fromMonth,\n        fromTimeStamp: getTimeStampInfoFor(fromMonth, fromTimeframe.year, \"min\"),\n        toYear: toTimeframe.year,\n        toMonth: toMonth,\n        toTimeStamp: getTimeStampInfoFor(toMonth, toTimeframe.year, \"max\")\n    }\n}\n\nfunction getTimeStampInfoFor(month, year, minOrMax) {\n    if(minOrMax === \"min\") {\n        return new Date(year, month).getTime()\n    } else {\n        return new Date(year,month,getDaysInMonth(year, month)).getTime()\n    }\n}\n\nfunction getDaysInMonth(year,month) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function getPerformanceDetails(totalElo, white, draws, black, playerColor) {\n    let totalGames = white + draws + black\n    let averageElo = Math.round(totalElo/totalGames)\n    let playerWins = playerColor === Constants.PLAYER_COLOR_BLACK?black:white\n    let playerLosses = playerColor !== Constants.PLAYER_COLOR_BLACK?black:white\n    let score = playerWins+(draws/2)\n    let scorePercentage = Math.round(score*100/totalGames)\n    let ratingChange = Common.DP_TABLE[scorePercentage]\n    return {\n        results:`+${playerWins}-${playerLosses}=${draws}`,\n        performanceRating:averageElo+ratingChange,\n        averageElo: averageElo,\n        score:`${Number.isInteger(score)?score:score.toFixed(1)}/${totalGames}`,\n        ratingChange:`${ratingChange===0?'':(ratingChange>0?'+':'-')}${Math.abs(ratingChange)}`\n    }\n}\n\nexport function isOpponentEloInSelectedRange(elo, range) {\n    if(range[1]===Constants.MAX_ELO_RATING) {\n        return elo>=range[0]\n    }\n    return elo<=range[1] && elo>=range[0]\n}\n\nexport function isDateMoreRecentThan(date, than) {\n    // give priority to game which has a date\n    if(!than) {\n        return false\n    }\n    if(!date) {\n        return true\n    } \n    return new Date(date)>new Date(than)\n}","import Chess from 'chess.js'\n\nexport default class RacingKingsChess {\n    constructor(fen){\n        this.chess = new Chess(fen);\n        this.SQUARES = this.chess.SQUARES\n    }\n    fen(){\n        return this.chess.fen()\n    }\n    turn() {\n        return this.chess.turn()\n    }\n    moves(options) {\n        // checks are not allowed in racing kings \n        // so remove moves that cause a check\n        return this.chess.moves(options).filter((move)=>{\n            let san = move.san || move\n            return !san.endsWith(\"+\") && !san.endsWith(\"#\")\n        })\n    }\n\n    move(moveObject, options) {\n        if(typeof moveObject !== \"string\") {\n            return this.chess.move(moveObject, options)\n        }\n        \n        if (moveObject.endsWith('#')) {\n            // a move ending in checkmate in racing kings will not \n            // be a checkmate under standard rules. so remove the # at the end \n            // to make it pass as a standard notation \n            moveObject = moveObject.substring(0, moveObject.length - 1);\n        } \n        let move = this.chess.move(moveObject, options)\n        if(move) {\n            return move\n        }\n        let disambiguatedMove = disambiguate(moveObject, this.moves())\n        if(!disambiguatedMove) {\n            // disambiguation failed\n            return move\n        }\n        // making this move failed so try disambiguating\n        return this.chess.move(disambiguatedMove, options)\n    }\n\n}\n\n// this is needed because in certain positions, while a disambiguating notation is needed \n// in standard chess, it is not needed in racing kings. \n// for example in this position \"1q4R1/1kN2Q2/8/5K2/8/4Nn2/8/b7 w - - 1 21\"\n// Move Nd5 is ambiguous in standard chess but is clear in Racing kings\n// because Ncd5 will lead to check\n\n// The way this function works is by actually finding the disambiguated move Ned5\n// to pass to the chess.js library. Since the move Ncd5 will end with a check (+) \n// it will fail the filter below\nfunction disambiguate(problematicMove, potentialMoves) {\n    console.log(\"-------------------\")\n    console.log(potentialMoves)\n    let filteredMoves = potentialMoves.filter((potentialMove)=>{\n        if(problematicMove.charAt(0) !== potentialMove.charAt(0)) {\n            return false;\n        }\n        return problematicMove.slice(-2) === potentialMove.slice(-2)\n    })\n    console.log(filteredMoves)\n    console.log(\"-------------------\")\n    if(filteredMoves.length !== 1) {\n        return null\n    }\n    return filteredMoves[0]\n}","import * as Constants from '../Constants'\nimport Chess from 'chess.js'\nimport RacingKingsChess from './RacingKingsChess'\n\nexport function chessLogic(variant, fen) {\n    if(variant === Constants.VARIANT_RACING_KINGS) {\n        return new RacingKingsChess(fen)\n    }\n    return new Chess(fen)\n}","import {simplifiedFen, isDateMoreRecentThan} from './util'\nimport * as Constants from './Constants'\nimport * as Common from './Common'\nimport {chessLogic} from '../app/chess/ChessLogic'\n\nexport default class OpeningGraph {\n    constructor(variant) {\n        this.graph=new Graph()\n        this.hasMoves = false\n        this.variant = variant\n    }\n    setEntries(arrayEntries, pgnStats){\n        this.graph=new Graph(arrayEntries, pgnStats)\n        this.hasMoves = true\n    }\n\n    clear() {\n        this.graph = new Graph()\n        this.hasMoves = false\n    }\n\n    addPGN(pgnStats, parsedMoves, lastFen, playerColor) {\n        pgnStats.index = this.graph.pgnStats.length\n        this.graph.pgnStats.push(pgnStats)\n        this.graph.playerColor = playerColor\n        this.hasMoves = true\n        parsedMoves.forEach(parsedMove => {\n            this.addMoveForFen(parsedMove.sourceFen, parsedMove.targetFen, parsedMove.moveSan, pgnStats)\n        })\n        this.addGameResultOnFen(lastFen, pgnStats.index)\n        this.addStatsToRoot(pgnStats, this.variant)\n    }\n\n    addGameResultOnFen(fullFen, resultIndex) {\n        var currNode = this.getNodeFromGraph(fullFen, true)\n        if(!currNode.gameResults) {\n            currNode.gameResults = []\n        }\n        currNode.gameResults.push(resultIndex)\n    }\n    addStatsToRoot(pgnStats, variant) {\n        var targetNode = this.getNodeFromGraph(Common.rootFen(variant), true)\n        if(!targetNode.details) {\n            targetNode.details = emptyDetails()\n        }\n        let newDetails = this.getUpdatedMoveDetails(targetNode.details, pgnStats)\n        targetNode.details = newDetails\n    }\n\n    getDetailsForFen(fullFen) {\n        let node = this.getNodeFromGraph(simplifiedFen(fullFen), false)\n        let details = node && node.details\n        if (Number.isInteger(details)) {\n            details = this.getUpdatedMoveDetails(emptyDetails(), this.graph.pgnStats[details])\n        } else if(!details) {\n            return emptyDetails()\n        }\n        details = this.updateCalculatedValues(details)   \n        return details\n    }\n\n    updateCalculatedValues(details) {\n        if(Number.isInteger(details.bestWin)) {\n            details.bestWinGame = this.graph.pgnStats[details.bestWin]\n            details.bestWinElo = this.getOpponentElo(this.graph.playerColor,details.bestWinGame)\n        }\n        if(Number.isInteger(details.worstLoss)) {\n            details.worstLossGame = this.graph.pgnStats[details.worstLoss]\n            details.worstLossElo = this.getOpponentElo(this.graph.playerColor,details.worstLossGame)\n        }\n        if(Number.isInteger(details.lastPlayed)) {\n            details.lastPlayedGame = this.graph.pgnStats[details.lastPlayed]\n        }\n        details.count = details.whiteWins+details.blackWins+details.draws\n        return details\n\n    }\n\n    addMoveForFen(fullSourceFen, fullTargetFen, move, resultObject) {\n        var targetNode = this.getNodeFromGraph(fullTargetFen, true)\n        let newDetails = this.getUpdatedMoveDetails(targetNode.details, resultObject)\n        targetNode.details = newDetails\n\n        var currNode = this.getNodeFromGraph(fullSourceFen, true)\n        currNode.playedByMax = Math.max(currNode.playedByMax, this.getTargetDetailsCount(targetNode.details))\n        if(!currNode.playedBy) {\n            currNode.playedBy = {}\n        }\n        currNode.playedBy[move] = ''\n    }\n\n    getTargetDetailsCount(targetDetails) {\n        if(!targetDetails) {\n            return 0\n        }\n        if(Number.isInteger(targetDetails)) {\n            //if details is an integer, then this has been played once\n            return 1\n        }\n        return targetDetails.draws+targetDetails.blackWins+targetDetails.whiteWins\n    }\n\n    getNodeFromGraph(fullFen, addIfNull) {\n        let fen = simplifiedFen(fullFen)\n        var currNode = this.graph.nodes.get(fen)\n        if(!currNode && addIfNull) {\n            currNode = new GraphNode()\n            currNode.fen = fen\n            this.graph.nodes.set(fen, currNode)\n        }\n        return currNode\n    }\n\n    getUpdatedMoveDetails(currentMoveDetails, resultObject) {\n        if(Number.isInteger(currentMoveDetails)) {\n            // if this is the second stat object being added\n            // calculate the first move details and then merge it with the second one\n            currentMoveDetails = this.getUpdatedMoveDetails(emptyDetails(),\n                            this.graph.pgnStats[currentMoveDetails])\n        } else if(!currentMoveDetails) {\n            // if this is the first stat being added to this node,\n            // just write the index to calculate the stats later\n            return resultObject.index\n        }\n        \n        let whiteWin = 0, blackWin = 0, draw = 0, resultInt = 0;\n        let playerColor = this.graph.playerColor\n        if(resultObject.result === '1-0') {\n            whiteWin = 1\n            resultInt = playerColor === Constants.PLAYER_COLOR_WHITE? 1 : -1\n        } else if (resultObject.result === '0-1') {\n            blackWin = 1\n            resultInt = playerColor === Constants.PLAYER_COLOR_BLACK? 1 : -1\n        } else {\n            draw = 1\n        }\n\n        let opponentElo = this.getOpponentElo(playerColor, resultObject)\n        if(resultInt === 1) {\n            let currentBestWinGame = null\n            if(Number.isInteger(currentMoveDetails.bestWin)) {\n                currentBestWinGame = this.graph.pgnStats[currentMoveDetails.bestWin]\n            }\n            if(!currentBestWinGame || parseInt(opponentElo)>parseInt(this.getOpponentElo(playerColor, currentBestWinGame))) {\n                currentMoveDetails.bestWin = resultObject.index\n            }\n        }\n        if(resultInt === -1) {\n            let currentWorstLossGame = null\n            if(Number.isInteger(currentMoveDetails.worstLoss)) {\n                currentWorstLossGame = this.graph.pgnStats[currentMoveDetails.worstLoss]\n            }\n            if(!currentWorstLossGame || parseInt(opponentElo)<parseInt(this.getOpponentElo(playerColor, currentWorstLossGame))) {\n                currentMoveDetails.worstLoss = resultObject.index\n            }\n        }\n        let currentLastPlayedGame = null\n        if(Number.isInteger(currentMoveDetails.lastPlayed)) {\n            currentLastPlayedGame = this.graph.pgnStats[currentMoveDetails.lastPlayed]\n        }\n        if(!currentLastPlayedGame || \n            isDateMoreRecentThan(resultObject.date, currentLastPlayedGame.date)) {\n                currentMoveDetails.lastPlayed = resultObject.index\n        }\n        currentMoveDetails.blackWins += blackWin\n        currentMoveDetails.whiteWins += whiteWin\n        currentMoveDetails.draws += draw\n        currentMoveDetails.totalOpponentElo += parseInt(opponentElo)\n        return currentMoveDetails\n    }\n\n    getOpponentElo(playerColor, resultObject) {\n        if(playerColor === Constants.PLAYER_COLOR_WHITE) {\n            return resultObject.blackElo\n        }\n        return resultObject.whiteElo\n    }\n\n    gameResultsForFen(fullFen) {\n        let fen = simplifiedFen(fullFen)\n\n        var currNode = this.graph.nodes.get(fen)\n        if(currNode && currNode.gameResults) {\n            return currNode.gameResults.map((index)=>this.graph.pgnStats[index])\n        }\n        return null\n    }\n    movesForFen(fullFen) {\n        let fen = simplifiedFen(fullFen)\n\n        var currNode = this.graph.nodes.get(fen)\n        if(currNode && currNode.playedBy) {\n            return Array.from(Object.entries(currNode.playedBy)).map((entry)=> {\n                let chess = chessLogic(this.variant, fullFen)\n                let move = chess.move(entry[0], {sloppy: true})\n                let targetNodeDetails = this.getDetailsForFen(chess.fen())\n                return {\n                    orig:move.from,\n                    dest:move.to,\n                    level:this.levelFor(targetNodeDetails.count, currNode.playedByMax),\n                    san:move.san,\n                    details:targetNodeDetails\n                }\n            })\n        }        \n        return null\n    }\n\n    levelFor(moveCount, maxCount){\n        if(maxCount <= 0 ||moveCount/maxCount > 0.8) {\n            return 2\n        }\n        if(moveCount/maxCount>0.3) {\n            return 1\n        }\n        return 0\n    }\n\n}\n\n\nclass Graph {\n    constructor(arrayEntries, pgnStats){\n        this.nodes = new Map()\n        this.pgnStats = []\n        this.playerColor = ''\n        if(arrayEntries) {\n            arrayEntries.forEach((entry)=> {\n                this.nodes.set(entry[0],entry[1])\n            })\n        }\n        if(pgnStats) {\n            this.pgnStats = pgnStats\n        }\n    }\n}\n\nclass GraphNode {\n            playedByMax = 0 // used to keep track of how many times the most frequent move is played for ease of calculation later\n            //playedBy = {}\n            //gameResults = []\n}\n\nfunction emptyDetails() {\n    return {\n//        count: 0,\n        blackWins: 0,\n        whiteWins: 0,\n        draws: 0,\n        totalOpponentElo: 0,\n//        bestWin:null,\n//        bestWinGame:null,\n//        worstLoss:null,\n//        worstLossGame:null,\n        lastPlayed:null\n//        lastPlayedGame:null\n    }\n}\n","import * as Common from './Common'\n\nexport default class OpeningManager {\n    plys = []\n    currentIndex = 0\n    constructor(variant) {\n        this.plys = [{pgn:'', fen:Common.rootFen(variant), move:null}]\n        this.currentIndex = 0\n    }\n    addPly(fen,move) {\n        if(this.currentIndex<this.plys.length-1 && this.plys[this.currentIndex+1].move.san === move.san) {\n            this.moveForward()\n            return\n        }\n        this.plys = this.plys.slice(0,this.currentIndex+1)\n        this.plys.push({\n            pgnAsList:this.pgnAsList(move.san),\n            fen: fen,\n            move: move\n        })\n        this.currentIndex++;\n        return this.plys[this.currentIndex]\n    }\n\n    pgnAsList(san) {\n        let pgnSoFar = this.pgnListSoFar()\n        let pgnList\n        if (!pgnSoFar) {\n            pgnList = []\n        } else {\n            pgnList = [...pgnSoFar]\n        }\n        let numPlys = this.plys.length\n        if(numPlys%2 !== 0) {\n            pgnList.push({\n                moveNumber:pgnList.length+1,\n                whitePly:san,\n                blackPly:''\n            })\n        } else {\n            let currMove = pgnList[pgnList.length-1]\n            currMove.blackPly = san\n            pgnList[pgnList.length-1] = currMove\n        }\n        return pgnList\n    }\n\n    currentMove() {\n        return Math.floor((this.currentIndex-1)/2);\n    }\n\n    pgnListSoFar(){\n        return this.plys[this.plys.length-1].pgnAsList\n    }\n\n    fen(){\n        return this.plys[this.currentIndex].fen\n    }\n\n    moveForward() {\n        return this.moveTo(this.currentIndex+1)\n    }\n    moveBack() {\n        return this.moveTo(this.currentIndex-1)\n    }\n    moveTo(index) {\n        if(index>=0 && index<this.plys.length) {\n            this.currentIndex = index\n        }\n        return this.plys[this.currentIndex]\n    }\n\n}","import React from 'react'\nimport ChessEcoCodes from 'chess-eco-codes'\nimport OpeningManager from '../app/OpeningManager'\nimport {Container, Row, Col, Button} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStepForward, faStepBackward } from '@fortawesome/free-solid-svg-icons'\nimport * as Constants from '../app/Constants'\nimport {trackEvent} from '../app/Analytics'\n\nexport default class Navigator extends React.Component {\n    \n    constructor(props){\n        super(props)\n        this.openingManager = new OpeningManager(this.props.variant)\n        this.state = {\n            currentMove:0,\n          }      \n          window.addEventListener(\"keydown\",this.keyHandler.bind(this))\n  \n    }\n    keyHandler(e){\n        switch(e.keyCode) {\n          case 37:\n            this.previous(e, \"keyboard\")\n          break\n          case 39:\n            this.next(e, \"keyboard\")\n            break\n          default:\n            break\n\n        }\n      }\n    \n    shouldComponentUpdate(newProps) {\n        //console.log(newProps)\n        if(newProps.fen !== this.openingManager.fen()) {\n            if(newProps.move === null) {\n                this.openingManager = new OpeningManager(newProps.variant)\n                return true\n            }\n            this.openingManager.addPly(newProps.fen, newProps.move)\n            return true\n        }\n        return true\n    }\n\n    previous(e, device) {\n        let newState = this.openingManager.moveBack()\n        this.props.onChange(newState.fen, newState.move)\n        this.setState({currentMove:this.openingManager.currentMove()})\n        trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"Previous\", device?device:\"mouse\")\n    }\n\n    next(e, device) {\n        let newState = this.openingManager.moveForward()\n        this.props.onChange(newState.fen, newState.move)\n        this.setState({currentMove:this.openingManager.currentMove()})\n        trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"Next\", device?device:\"mouse\")\n    }\n\n    moveTo(index) {\n        return () => {\n            let newState = this.openingManager.moveTo(index*2+1)\n            this.props.onChange(newState.fen, newState.move)\n            this.setState({currentMove:this.openingManager.currentMove()})\n            trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"move\", null, index)\n        }\n    }\n\n    render(){\n        let opening = ChessEcoCodes(this.openingManager.fen())\n        if (opening) {\n            this.opening = opening.name\n            this.openingCode = opening.code\n        }\n        if(!this.openingManager.pgnListSoFar()) {\n            return <div></div>\n        }\n        return <Container>\n            <Row>\n            <Col lg=\"6\" className=\"navSection\"><Button color=\"\" className= \"settingButton\" onClick= {this.previous.bind(this)}><FontAwesomeIcon icon={faStepBackward} /> prev</Button> </Col>\n            <Col lg=\"6\" className=\"navSection\"><Button color=\"\" className= \"settingButton\" onClick = {this.next.bind(this)}>next <FontAwesomeIcon icon={faStepForward} /></Button></Col></Row>\n            <Row className=\"greyText\">{this.openingCode}: {this.opening}</Row>\n            {\n                this.openingManager.pgnListSoFar().map((move, index)=>\n                    <Row key={`${move.moveNumber}`} onClick={this.moveTo(index).bind(this)} className={`navCol ${this.openingManager.currentMove() === index? 'selectedMove':''}`}>\n                        <Col sm=\"12\" className = \"navMove border\">{`${move.moveNumber}. ${move.whitePly} ${move.blackPly}`}</Col>\n                    </Row>)\n            }\n        </Container>\n    }\n}","import React, { useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faComments, faCaretDown} from '@fortawesome/free-solid-svg-icons'\nimport { faDiscord } from '@fortawesome/free-brands-svg-icons'\nimport * as Constants from '../app/Constants'\n\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalFooter,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  NavItem, NavLink\n} from 'reactstrap'\n\nconst GlobalHeader = (props) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen)\n  const toggleModal = () => setModal(!modal)\n\n  const launch = (url) => {\n    return () => {\n      window.open(url, \"_blank\")\n    }\n  }\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <img src=\"/opening-tree-logo.png\" height=\"32px\" width=\"32px\" alt=\"Logo\"/>\n        <NavbarBrand href=\"/\">&nbsp;OpeningTree.com</NavbarBrand>\n        <NavbarToggler onClick={toggle}/>\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n          <NavItem><NavLink className=\"navLinkButton\" onClick={launch(\"https://www.youtube.com/watch?v=AJ66-HqdpXE\")}>\"It's so powerful\" - IM Eric Rosen <span className=\"smallText\">[Watch video]</span></NavLink></NavItem>\n          </Nav>\n          <Nav className=\"ml-auto\" navbar>\n          <NavItem><NavLink className=\"navLinkButton\" onClick={launch(Constants.OPENING_TREE_DISCORD)}><FontAwesomeIcon icon={faDiscord} className=\"discordIcon\"/> Join our discord</NavLink></NavItem>\n          </Nav>\n          <Nav className=\"\" navbar>\n          <NavItem><NavLink className=\"navLinkButton\" onClick={props.toggleFeedback}><FontAwesomeIcon icon={faComments} className=\"feedbackIcon\"/> Send feedback</NavLink></NavItem>\n          </Nav>\n          <UncontrolledDropdown>\n              <DropdownToggle className=\"bootNavColor\" nav>\n              <FontAwesomeIcon icon={faCaretDown} className=\"moreIcon\"/>More\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem onClick={toggleModal}>\n                  Acknowledgements\n                </DropdownItem>\n                <DropdownItem onClick={launch(\"https://www.openingtree.com/old\")}>\n                  Old version\n                </DropdownItem>\n                <DropdownItem onClick={launch(\"https://github.com/openingtree/openingtree\")}>\n                  Github\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem onClick={launch(\"https://lichess.org/\")}>\n                  Lichess\n                </DropdownItem>\n                <DropdownItem onClick={launch(\"https://www.lichess4545.com/\")}>\n                  Lichess4545\n                </DropdownItem>\n                <DropdownItem onClick={launch(\"https://www.chess.com\")}>\n                  Chess.com\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n        </Collapse>\n      </Navbar>\n      \n      <Modal isOpen={modal} toggle={toggleModal}>\n        <ModalHeader toggle={toggleModal}>Acknowledgements</ModalHeader>\n        <ListGroup className=\"acknowledgement\">\n        <ListGroupItem tag=\"a\" href=\"https://lichess.org/api\" target=\"_blank\" action>Lichess API</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.chess.com/club/chess-com-developer-community\" target=\"_blank\" action>Chess.com API</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/ruilisi/react-chessground\" target=\"_blank\" action>ChessGround</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/jhlywa/chess.js\" target=\"_blank\" action>Chess.js</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/niklasf/eco\" target=\"_blank\" action>Eco</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/jimmywarting/StreamSaver.js\" target=\"_blank\" action>StreamSaver.js</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.flaticon.com/authors/google/\" target=\"_blank\" action>Icons made by google</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.flaticon.com/\" target=\"_blank\" action>FlatIcons.com</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.freelogodesign.org\" target=\"_blank\" action>Free logo design</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/kevinludwig/pgn-parser\" target=\"_blank\" action>PGN Parser</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.npmjs.com/package/material-ui-dropzone\" target=\"_blank\" action>Dropzone</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.pgnmentor.com\" target=\"_blank\" action>PGN Mentor</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.twitch.tv/imrosen\" target=\"_blank\" action>IM Eric Rosen</ListGroupItem>\n        </ListGroup>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>Done</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  )\n}\n\nexport default GlobalHeader\n","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport { Radio, FormControlLabel, RadioGroup } from '@material-ui/core';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport {Accordion} from './Common'\nimport * as Constants from '../../app/Constants'\nimport Backup from '@material-ui/icons/Backup';\nimport People from '@material-ui/icons/People';\nimport Save from '@material-ui/icons/Save';\nimport Divider from '@material-ui/core/Divider';\nimport DateRange from '@material-ui/icons/DateRange';\nimport {Badge} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChessRook } from '@fortawesome/free-solid-svg-icons'\n\n\nexport default class Source extends React.Component {\n    getSourceOption(source, addNumber) {\n        if (source === Constants.SITE_LICHESS) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<img alt=\"lichess\" className=\"siteimage\" src=\"./lichesslogo.png\" /><span className=\"sourceName\"> lichess.org </span></span>\n        } else if (source === Constants.SITE_CHESS_DOT_COM) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<img alt=\"chess.com\" className=\"siteimage\" src=\"./chesscomlogo.png\" /></span>\n        } else if (source === Constants.SITE_PGN_FILE) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<Backup className=\"lowOpacity\"/><span className=\"sourceName\"> Load <i>PGN</i> file</span></span>\n        } else if (source === Constants.SITE_EVENT_DB) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<DateRange className=\"lowOpacity\"/><span className=\"sourceName\"> Notable chess events</span></span>\n        } else if (source === Constants.SITE_PLAYER_DB) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<People className=\"lowOpacity\"/><span className=\"sourceName\"> Notable chess players</span></span>\n        }  else if (source === Constants.SITE_OPENING_TREE_FILE) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<Save className=\"lowOpacity\"/><span className=\"sourceName\"> Load <b>.tree</b> file</span></span>\n        } else if (source === Constants.SITE_ONLINE_TOURNAMENTS) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}{addNumber?<FontAwesomeIcon icon={faChessRook} className=\"lowOpacity\" />:<Badge className=\"sourceName\" color=\"info\">New!</Badge>}<span className=\"sourceName\"> Lichess tournaments</span></span>\n        }\n        return <span>{getNumberIcon(1, addNumber)}Select a source</span>\n    }\n\n    render() {\n        return <Accordion TransitionComponent={Collapse}\n            TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n            expanded={this.props.expandedPanel === 'source'}\n            onChange={this.props.handleExpansionChange}>\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <div>\n                    {this.getSourceOption(this.props.site, true)}\n                </div>\n            </AccordionSummary>\n            <AccordionDetails>\n                <RadioGroup onChange={this.props.siteChange} value={this.props.site}>\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_LICHESS} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_LICHESS)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_CHESS_DOT_COM} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_CHESS_DOT_COM)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_ONLINE_TOURNAMENTS} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_ONLINE_TOURNAMENTS)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_OPENING_TREE_FILE} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_OPENING_TREE_FILE)} />\n                    <Divider className=\"dividerMargin\"/>\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_PLAYER_DB} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_PLAYER_DB)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_EVENT_DB} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_EVENT_DB)} />\n                    <FormControlLabel className=\"sitelabel\" value={Constants.SITE_PGN_FILE} control={<Radio color=\"primary\" />} label={this.getSourceOption(Constants.SITE_PGN_FILE)} />\n               </RadioGroup>\n            </AccordionDetails>\n        </Accordion>\n        \n    }\n}","import React from 'react'\nimport {DropzoneArea} from 'material-ui-dropzone'\nimport { trackEvent } from '../../app/Analytics'\nimport * as Constants from '../../app/Constants'\n\nexport default class Dropzone extends React.Component{\n    handleFileChange(newFiles) {\n      trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"FileSaved\", newFiles.length>0?newFiles[0].name:null)\n      this.props.filesChange(newFiles)\n    }\n    render(){\n      return (\n        <DropzoneArea \n        acceptedFiles={[]}\n        dropzoneText={this.props.dropzoneText}\n          onChange={this.handleFileChange.bind(this)}\n          dropzoneParagraphClass=\"dropzonetext\"\n          showFileNames={true}\n          useChipsForPreview={true}\n          previewChipProps={{className:\"previewChip\"}}\n          dropzoneClass=\"dropzone\"\n          filesLimit={this.props.filesLimit}\n          maxFileSize={3000000000000}\n          />\n      )  \n    }\n  } ","import SelectSearch from 'react-select-search';\nimport React from 'react'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nexport default class NotableChessGames extends React.Component {\n\n    updateDetails = (value) => {\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"NotableGameSelected\", value.value)\n        this.props.onChange(value)\n    }\n    \n    renderDetails(option) {\n        return (<div>\n                <span><LazyLoadImage alt={option.name} className=\"profilePicture\" width=\"40\" height=\"40\" src={option.profile.imageUrl} /></span>\n                <div>{option.name}</div>\n                <div className=\"smallText\">{option.profile.subText}</div>\n                </div>);\n    }\n    render() {\n        if(!this.props.list) {\n            return <div className=\"lowOpacity textCenter\"><img alt=\"loading\" width='25' height='25' src=\"./spinner.gif\"/> Loading List</div>\n        } else if(!this.props.list.length) {\n            return <div className=\"lowOpacity textCenter\"> Could not fetch list</div>\n        }\n        let options = this.props.list.map(option=>{return {...option, value:option.name}})\n        return <SelectSearch\n            name=\"goatPlayers\"\n            value={this.props.selectedDetail.value}\n            options={options}\n            placeholder={this.props.placeholder}\n            renderOption={this.renderDetails}\n            onChange={this.updateDetails}\n        />\n    }\n}\n","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport { Button as MaterialUIButton, TextField, AccordionDetails } from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle} from '@fortawesome/free-solid-svg-icons'\nimport {faCheck, faSync, faSignOutAlt} from '@fortawesome/free-solid-svg-icons'\nimport Divider from '@material-ui/core/Divider';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport {Accordion} from './Common'\nimport * as Constants from '../../app/Constants'\nimport Collapse from '@material-ui/core/Collapse';\nimport Dropzone from './Dropzone'\nimport NotableChessGames from './NotableChessGames';\nimport {Card, CardBody, CardText, CardTitle} from 'reactstrap'\nimport LockOpen from '@material-ui/icons/Lock'\nimport ExitToApp from '@material-ui/icons/ExitToApp'\nimport {Spinner} from 'reactstrap'\nimport { trackEvent } from '../../app/Analytics'\n\nexport default class User extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerName:'',\n            tournamentUrl:'',\n            files:[],\n            selectedPlayer:{},\n            selectedEvent:{}\n        }\n        \n    }\n\n    editPlayerName(event) {\n        this.setState({\n            playerName: event.target.value,\n            playerNameError:''\n        })\n    }\n    editTournamentUrl(event) {\n        this.setState({\n            tournamentUrl: event.target.value,\n            tournamentUrlError:''\n        })\n    }\n    filesChange(files) {\n        this.setState({files:files})\n    }\n\n    notablePlayerChange(player) {\n        this.setState({\n            selectedPlayer:player})\n    }\n    notableEventChange(event) {\n        this.setState({\n            selectedEvent:event})\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({playerNameError:'', tournamentUrlError: ''})\n    }\n    \n    validateInputDetailsSet() {\n        if(this.props.site === Constants.SITE_EVENT_DB){\n            if(!this.state.selectedEvent){\n                this.props.showError(\"Please select an event\")\n                return false\n            } \n        } else if(this.props.site === Constants.SITE_PLAYER_DB){\n            if(!this.state.selectedPlayer){\n                this.props.showError(\"Please select a player\")\n                return false\n            } \n        } else if(this.props.site === Constants.SITE_LICHESS ||\n            this.props.site === Constants.SITE_CHESS_DOT_COM) {\n                if(!this.state.playerName){\n                    this.setState({\n                        playerNameError:'Please enter a username'\n                    })\n                    return false\n                } \n        } else if(this.props.site === Constants.SITE_PGN_FILE) {\n            if(this.state.files.length === 0) {\n                this.props.showError(\"Please upload a PGN file\")\n                return false\n            }\n        } else if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            if(this.state.files.length === 0) {\n                this.props.showError(\"Please upload an openingtree file\")\n                return false\n            }\n        } else if(this.props.site === Constants.SITE_ONLINE_TOURNAMENTS) {\n            if(!this.state.tournamentUrl){\n                this.setState({\n                    tournamentUrlError:'Please enter a url'\n                })\n                return false\n            } else {\n                \n                let url = this.state.tournamentUrl.trim()\n                if(!url.startsWith(\"http\")) {\n                    url = \"https://\"+url\n                }\n                let parsedUrl = null\n                try {\n                    parsedUrl = new URL(url)\n                } catch (e) {\n                    this.setState({\n                        tournamentUrlError:'Please enter a valid url'\n                    })\n                    return false\n                }\n                let hostname = parsedUrl.hostname\n                let tournamentSite = null;\n                if(hostname === 'lichess.org' || hostname.endsWith('.lichess.org')) {\n                    tournamentSite = Constants.SITE_LICHESS\n                } else if(hostname === 'chess.com' || hostname.endsWith('.chess.com')) {\n                    this.setState({\n                        tournamentUrlError:'chess.com tournaments are not currently supported'\n                    })\n                    return false;\n                }\n                if(!tournamentSite) {\n                    this.setState({\n                        tournamentUrlError:'Please enter a lichess.org url'\n                    })\n                    return false;\n                }\n                let pathComponents = parsedUrl.pathname.split(\"/\")\n                let tournamentId = null\n                let tournamentType = null\n                for(let i=0;i<pathComponents.length;i++) {\n                    if(pathComponents[i]) {\n                        tournamentType = pathComponents[i]\n                        break\n                    }\n                }\n\n                for(let i=pathComponents.length-1;i>=0;i--) {\n                    if(pathComponents[i]) {\n                        tournamentId = pathComponents[i]\n                        break\n                    }\n                }\n                if(!tournamentId) {\n                    this.setState({\n                        tournamentUrlError:'Please enter a valid tournament url'\n                    })\n                    return false;\n                }\n                \n                this.selectedOnlineTournament = {\n                    tournamentSite:tournamentSite,\n                    tournamentId:tournamentId,\n                    tournamentType:tournamentType\n                \n                }\n            }\n        }\n        return true\n    }\n    finalPlayerName(source, playerName, selectedNotablePlayer) {\n        if(source === Constants.SITE_PLAYER_DB) {\n            return selectedNotablePlayer.name\n        }\n        if(source === Constants.SITE_EVENT_DB) {\n            return ''\n        }\n        return playerName\n    }\n    setPlayerDetails() {\n         if(this.validateInputDetailsSet()) {\n            this.props.playerDetailsChange(\n                this.finalPlayerName(\n                    this.props.site, \n                    this.state.playerName,\n                    this.state.selectedPlayer), \n                this.state.files, \n                this.state.selectedEvent, \n                this.state.selectedPlayer,\n                this.selectedOnlineTournament)\n        }\n    }\n    \n    getSummary() {\n        if(this.props.site === Constants.SITE_PLAYER_DB){\n            if(this.props.selectedPlayer && this.props.selectedPlayer.name) {\n                return <span>\n                        {getNumberIcon('done')}\n                        {this.props.selectedPlayer.profile.title}{'\\u00A0'}\n                        <b>{this.props.selectedPlayer.name}</b>\n                    </span>\n            }\n        } else if(this.props.site === Constants.SITE_LICHESS || \n            this.props.site === Constants.SITE_CHESS_DOT_COM){\n            if(this.props.playerName) {\n                return <span>{getNumberIcon('done')}User: <b>{this.props.playerName}</b></span>\n            }\n        } else if(this.props.site === Constants.SITE_PGN_FILE || \n            this.props.site === Constants.SITE_OPENING_TREE_FILE){\n            if(this.props.files.length===1) {\n                return <span>{getNumberIcon('done')}File: <b>{this.props.files[0].name}</b></span>\n            }\n            if(this.props.files.length>1) {\n                return <span>{getNumberIcon('done')}{this.props.files.length} PGN files uploaded</span>\n            }\n        } else if(this.props.site === Constants.SITE_EVENT_DB) {\n            if(this.props.selectedEvent && this.props.selectedEvent.name) {\n                return <span>{getNumberIcon('done')}{this.props.selectedEvent.name}</span>\n            }\n        }\n        else if(this.props.site === Constants.SITE_ONLINE_TOURNAMENTS) {\n            if(this.props.selectedOnlineTournament) {\n                return <span>{getNumberIcon('done')}Id: <b>{this.props.selectedOnlineTournament.tournamentId}</b></span>\n            }\n        }\n        return <span>{getNumberIcon(2)}{this.title(this.props.site)}</span>\n    }\n\n    title(site){\n        if(site === Constants.SITE_ONLINE_TOURNAMENTS \n            || site === Constants.SITE_EVENT_DB) {\n            return \"Tournament details\"\n        } else if(site === Constants.SITE_OPENING_TREE_FILE \n            || site === Constants.SITE_PGN_FILE) {\n                return \"File details\"\n        } \n        return \"Player details\"\n    }\n\n    launchLichessOauth() {\n        trackEvent(\n            Constants.EVENT_CATEGORY_PGN_LOADER, \"lichessLogin\")\n        setTimeout(()=>{\n            window.location.href = \n                'https://oauth.lichess.org/oauth/authorize?response_type=code&client_id=EBXrB9R9OXpaRvOU&scope=preference:read&redirect_uri=https%3A%2F%2Flichesslogin.openingtree.com&state='+window.location.pathname\n            }, 150)\n        }\n    getLichessSelection() {\n        return <div>\n            {this.getLichessCardBody()}\n            <br/>\n            {this.getPlayerNameInput('lichess username')}\n        </div>\n    }\n\n    getLichessCardBody() {\n        if (this.props.lichessLoginState === Constants.LICHESS_STATE_PENDING) {\n            return <Card>\n                <div className=\"center\">\n                    <Spinner className=\"bigSpinner dividerMargin\" /><br/>\n                </div>\n            </Card>\n        } else if(this.props.lichessLoginState === Constants.LICHESS_FAILED_FETCH) {\n            return <Card><CardBody className=\"singlePadding\">\n            <CardTitle className=\"smallBottomMargin redColor\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> Failed to fetch login status</CardTitle>\n            <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faSync} className=\"lowOpacity smallText leftMargin2\"/>\n            <span onClick={this.props.refreshLichessStatus} className=\"smallText linkStyle leftMargin4\"> Retry fetching status</span>\n            </CardTitle>\n            <CardTitle><FontAwesomeIcon icon={faSignOutAlt} className=\"lowOpacity smallText leftMargin2\"/>\n            <span onClick={this.props.logoutOfLichess} className=\"smallText linkStyle leftMargin4\"> Logout of lichess</span>\n            </CardTitle>\n    \n                    <MaterialUIButton\n                onClick={this.launchLichessOauth}\n                variant=\"contained\"\n                color=\"default\"\n                className=\"mainButton\" disableElevation\n                startIcon={<LockOpen />}\n                >\n                    TRY LOGIN AGAIN\n                </MaterialUIButton>\n            </CardBody></Card>\n        } else if (this.props.lichessLoginState === Constants.LICHESS_LOGGED_IN && this.props.lichessLoginName) {\n            return <Card>\n                <CardBody className=\"singlePadding\">\n                    <CardTitle>\n                        <FontAwesomeIcon icon={faCheck} className=\"lowOpacity greenColor\"/> Logged in as\n                        <b> {this.props.lichessLoginName}</b>\n                        \n                    </CardTitle>\n                    \n                    <MaterialUIButton\n                        onClick={this.props.logoutOfLichess}\n                        variant=\"contained\"\n                        color=\"default\"\n                        className=\"mainButton\" disableElevation\n                        startIcon={<ExitToApp />}\n                        >\n                            LOGOUT\n                    </MaterialUIButton>\n                </CardBody>\n            </Card>\n        }\n        return <Card><CardBody className=\"singlePadding\">\n        <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> Speed up tree building (optional)</CardTitle>\n        <CardText className=\"smallText\">\n            Lichess allows much faster download of games if you login. You can learn more about this <a href = 'https://lichess.org/api#operation/apiGamesUser' rel=\"noopener noreferrer\" target=\"_blank\">here</a>. \n            Recommended for viewing your own games or when your opponent has lots of games.\n        </CardText>\n        <MaterialUIButton\n                onClick={this.launchLichessOauth}\n                variant=\"contained\"\n                color=\"default\"\n                className=\"mainButton\" disableElevation\n                startIcon={<LockOpen />}\n                >\n                    LOGIN TO LICHESS\n                </MaterialUIButton>\n        </CardBody>\n        </Card>\n    }\n\n    getChessComSelection() {\n        return this.getPlayerNameInput('chess.com username')\n    }\n\n    getPlayerNameInput(label, helperText) {\n        return <TextField\n            className=\"playernameField\" name=\"playerName\" id=\"playerNameTextBox\" \n            margin=\"dense\" onChange={this.editPlayerName.bind(this)}\n            label={label} variant=\"outlined\" value={this.state.playerName}\n            helperText={this.state.playerNameError? this.state.playerNameError:helperText}\n            error={this.state.playerNameError?true:false} onKeyUp={this.playerNameKeyUp.bind(this)}/>\n    }\n\n    getOnlineTournamentSelection() {\n        return <div>\n            {this.getOnlineTournamentCard()}\n            <br/>\n            {this.getOnlineTournamentInput('Enter tournament url', 'eg. https://lichess.org/tournament/QlooVt7W')}\n        </div>\n    }\n    getOnlineTournamentCard(){\n        return <Card>\n        <CardBody className=\"singlePadding\">\n        <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> How it works</CardTitle>\n        <CardText className=\"smallText\">\n            You can load all of the games of a lichess tournament by copying the  url from your address bar on those sites and pasting it below.\n            <br/><br/>\n            <b>Why is chess.com not supported?</b>\n            <br/>chess.com API has a few bugs in returning tournament games so we are not able to support them currently. Bugs have been reported to chess.com.\n            \n        </CardText>\n        </CardBody>\n        </Card>\n    }\n    \n\n    getOnlineTournamentInput(label, helperText) {\n        return <TextField\n            className=\"urlField\" name=\"onlineTournament\" id=\"onlineTournamentTextBox\" \n            margin=\"dense\" onChange={this.editTournamentUrl.bind(this)}\n            label={label} variant=\"outlined\" value={this.state.tournamentUrl}\n            helperText={this.state.tournamentUrlError? this.state.tournamentUrlError:helperText}\n            error={this.state.tournamentUrlError?true:false} onKeyUp={this.playerNameKeyUp.bind(this)}/>\n    }\n\n    playerNameKeyUp(evt) {\n        if(evt.keyCode === 13) { // enter key pressed\n            this.setPlayerDetails()\n        }\n    }\n    getGoatDBSelection(){\n        return <NotableChessGames \n            list={this.props.notablePlayers} \n            placeholder=\"Select a player\"\n            onChange={this.notablePlayerChange.bind(this)}\n            selectedDetail={this.state.selectedPlayer}/>\n    }\n    getGoatDBEventSelection(){\n        return <NotableChessGames \n            list={this.props.notableEvents} \n            placeholder=\"Select an event\"\n            onChange={this.notableEventChange.bind(this)}\n            selectedDetail={this.state.selectedEvent}/>\n    }\n\n    getPgnFileSelection() {\n        return <div><Dropzone filesChange={this.filesChange.bind(this)} filesLimit={10}\n        dropzoneText=\"Drag and drop up to 10 pgn files here or click here to select files\"\n                />\n                {this.getPlayerNameInput('player name in PGN', 'Leave blank to load all games')}\n                </div>\n    }\n\n    getOpeningTreeSelection() {\n        return <div>\n            <Card>\n                <CardBody className=\"singlePadding\">\n                <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> How it works</CardTitle>\n                <CardText className=\"smallText\">\n                    If you plan to revisit the same player, you can save a <b>.tree</b> file locally by loading a tree and then clicking <i>\"Save .tree file\"</i>.\n                    To reload the same tree, drop the <b>.tree</b> file in the dropzone below.\n                </CardText>\n                </CardBody>\n                </Card><br/>\n            <Dropzone filesChange={this.filesChange.bind(this)} filesLimit={1}\n                    dropzoneText=\"Drag and drop openingtree save file here or click here to select a file\"\n                />\n        </div>\n    }\n\n    getInputsToShow() {\n        if(this.props.site === Constants.SITE_PGN_FILE) {\n            return this.getPgnFileSelection()\n        } else if (this.props.site === Constants.SITE_LICHESS) {\n            return this.getLichessSelection()\n        } else if (this.props.site === Constants.SITE_CHESS_DOT_COM) {\n            return this.getChessComSelection()\n        } else if (this.props.site === Constants.SITE_EVENT_DB) {\n            return this.getGoatDBEventSelection()\n        } else if (this.props.site === Constants.SITE_PLAYER_DB) {\n            return this.getGoatDBSelection()\n        } else if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            return this.getOpeningTreeSelection()\n        } else if(this.props.site === Constants.SITE_ONLINE_TOURNAMENTS) {\n            return this.getOnlineTournamentSelection()\n        }\n        return <div/>\n    }\n\n    render() {\n        return <Accordion expanded={this.props.expandedPanel === 'user'}\n                TransitionComponent={Collapse}\n                TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n                onChange={this.props.handleExpansionChange} \n                disabled={this.props.site===''}>\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>{this.getSummary()}</AccordionSummary>\n                <AccordionDetails>\n                        {this.getInputsToShow()}\n                </AccordionDetails>\n                <Divider />\n                <AccordionActions>\n                    <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.setPlayerDetails.bind(this)}>Continue</MaterialUIButton>\n                </AccordionActions></Accordion>\n            \n    }\n}","import React from 'react'\nimport { createSubObjectWithProperties, getTimeframeSteps } from '../../app/util'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics'\nimport Source from './Source'\nimport User from './User'\nimport Filters from './Filters'\nimport Actions from './Actions'\nimport request from 'request'\nimport * as SitePolicy from '../../app/SitePolicy'\nimport cookieManager from '../../app/CookieManager'\n\nexport default class PGNLoader extends React.Component {\n\n    constructor(props) {\n        super(props)\n        let selectedSite = new URLSearchParams(window.location.search).get(\"source\")\n\n        this.state = {\n            playerName: '',\n            site: selectedSite?selectedSite:'',\n            playerColor: this.props.settings.playerColor,\n            isAdvancedFiltersOpen: false,\n            isGamesSubsectionOpen: false,\n            expandedPanel: selectedSite?'user':'source',\n            notablePlayers:null,\n            notableEvents:null,\n            files:[],\n            selectedNotableEvent:{},\n            selectedNotablePlayer:{},\n            lichessLoginState: Constants.LICHESS_NOT_LOGGED_IN,\n            lichessLoginName: null\n\n        }\n        if(selectedSite === Constants.SITE_LICHESS) {\n            this.fetchLichessLoginStatus()\n        }\n        this.timeframeSteps = getTimeframeSteps()\n        this.state[Constants.FILTER_NAME_SELECTED_TIMEFRAME] = [0, this.timeframeSteps.length - 1]\n        this.state[Constants.FILTER_NAME_DOWNLOAD_LIMIT] = Constants.MAX_DOWNLOAD_LIMIT\n        this.state[Constants.TIME_CONTROL_ULTRA_BULLET] = true\n        this.state[Constants.TIME_CONTROL_BULLET] = true\n        this.state[Constants.TIME_CONTROL_BLITZ] = true\n        this.state[Constants.TIME_CONTROL_RAPID] = true\n        this.state[Constants.TIME_CONTROL_CLASSICAL] = true\n        this.state[Constants.TIME_CONTROL_CORRESPONDENCE] = true\n        this.state[Constants.TIME_CONTROL_DAILY] = true\n        this.state[Constants.FILTER_NAME_RATED] = \"all\"\n        this.state[Constants.FILTER_NAME_ELO_RANGE] = [0, Constants.MAX_ELO_RATING]\n    }\n\n\n    advancedFilters() {\n        return createSubObjectWithProperties(this.state,\n            [Constants.TIME_CONTROL_ULTRA_BULLET, Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_BLITZ, Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CORRESPONDENCE, Constants.TIME_CONTROL_DAILY,\n            Constants.TIME_CONTROL_CLASSICAL, Constants.FILTER_NAME_RATED,\n            Constants.FILTER_NAME_SELECTED_TIMEFRAME, Constants.FILTER_NAME_DOWNLOAD_LIMIT,\n            Constants.FILTER_NAME_ELO_RANGE])\n    }\n\n\n    handleExpansionChange(panel) {\n        return (event, newExpanded) => {\n            this.setState({ expandedPanel: newExpanded ? panel : false });\n        };\n    }\n\n    exportOpeningTreeObject(){\n        return {\n            header:{\n                version:2,// current openingtree file version. used to check compatibility of files\n                timestamp:Math.floor(Date.now() / 1000),\n                gamesProcessed:this.props.gamesProcessed,\n                settings:this.props.settings,\n                playerName:this.state.playername,\n                site: this.state.site,\n                advancedFilters:this.advancedFilters()\n            },\n            arrays: [[...this.props.openingGraph.graph.nodes.entries()],\n                        [...this.props.openingGraph.graph.pgnStats]]\n        }\n    }\n\n    importOpeningTreeObject(openingTreeSave) {\n        let saveVersion = 1;\n        if(openingTreeSave.header.version) {\n            saveVersion = openingTreeSave.header.version\n        }\n        if(saveVersion < Constants.OPENING_TREE_FILE_CURRENT_VERSION) {\n            this.props.showError(\"This is an old format of openingtree file.\", null, \n                \"You can try loading it by visiting the old website\", Constants.ERROR_ACTION_VISIT_OLD_SITE)\n            return false\n        }\n        this.setState({\n            ...openingTreeSave.header.advancedFilters,\n            playerColor:openingTreeSave.header.settings.playerColor,\n            site:openingTreeSave.header.site,\n            playerName:openingTreeSave.header.settings.playerName\n        })\n        this.props.openingGraph.setEntries(openingTreeSave.arrays[0], openingTreeSave.arrays[1])\n        this.props.importCallback({\n            settings:openingTreeSave.header.settings,\n            gamesProcessed:openingTreeSave.header.gamesProcessed,\n            openingGraph:this.props.openingGraph\n        })\n        return true\n    }\n\n    playerDetailsChange(playerName, files, selectedNotableEvent, selectedNotablePlayer, selectedOnlineTournament) {\n        this.setState({\n            playerName: playerName,\n            expandedPanel:SitePolicy.isFilterPanelEnabled(this.state.site, playerName, selectedNotablePlayer)?'filters':'',\n            files:files,\n            selectedNotableEvent:selectedNotableEvent,\n            selectedNotablePlayer:selectedNotablePlayer,\n            playerColor:'',\n            selectedOnlineTournament:selectedOnlineTournament\n        })\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"PlayerNameSaved\")\n    }\n    fetchGOATGames(url, callback){\n        request.get(url, (error, response) =>{\n            if(error) {\n                this.props.showError(\"Could not fetch player list. Failed to connect to DB.\")\n                callback([])\n                return \n            }\n            let gamesDetails\n            try{\n                gamesDetails = JSON.parse(response.body).list\n            } catch (e) {\n                console.log(e)\n            }\n            if(!gamesDetails) {\n                this.props.showError(\"Failed to load games.\")\n                callback([])\n            } else {\n                callback(gamesDetails)\n            }\n        })\n    }\n\n\n\n    siteChange(event) {\n        let newSite = event.target.value\n        if(newSite === Constants.SITE_PLAYER_DB && !this.state.notablePlayers) {\n            this.fetchGOATGames('https://goatchess.github.io/list.json', (gamesDetails)=>{\n                this.setState({notablePlayers:gamesDetails})\n            })\n        }\n        if(newSite === Constants.SITE_EVENT_DB && !this.state.notableEvents) {\n            this.fetchGOATGames('https://goatevents.github.io/list.json', (gamesDetails)=>{\n                this.setState({notableEvents:gamesDetails})\n            })\n        }\n        if(newSite === Constants.SITE_LICHESS) {\n            this.fetchLichessLoginStatus()\n        }\n\n        this.setState({ site: newSite, expandedPanel:'user'})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ChangeSite\", newSite)\n    }\n    fetchLichessLoginStatus(){\n        let lichessAccessToken = cookieManager.getLichessAccessToken()\n        if(lichessAccessToken) {\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"lichessTokenFound\")\n\n            this.setState({lichessLoginState:Constants.LICHESS_STATE_PENDING})\n            \n            request.get(\"https://lichess.org/api/account\", {timeout:5000, auth:{bearer:cookieManager.getLichessAccessToken()}}, (error, response)=>{\n                if(!error && response) {\n                    let responseObj = JSON.parse(response.body) \n                    if(responseObj && responseObj.username) {\n                        this.setState({\n                            lichessLoginState:Constants.LICHESS_LOGGED_IN,\n                            lichessLoginName:responseObj.username\n                        })\n                        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"lichessFetchSuccess\")\n                        return\n                    } \n                } \n                trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"lichessFetchFailed\")\n                this.setState({lichessLoginState:Constants.LICHESS_FAILED_FETCH})\n            })\n        } else {\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"lichessNoToken\")\n        }\n    }\n    logoutOfLichess() {\n        cookieManager.deleteLichessAccessToken()\n        this.setState({\n            lichessLoginState:Constants.LICHESS_NOT_LOGGED_IN,\n            lichessLoginName:''\n        })\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"lichessLogout\")\n    }\n\n    filtersChange(filters) {\n        this.setState({...filters, expandedPanel:''})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"FitlersSaved\", this.state.site)\n    }\n\n    render() {\n        return <div><div className=\"pgnloadersection\">\n            <Source expandedPanel={this.state.expandedPanel}\n                handleExpansionChange={this.handleExpansionChange('source').bind(this)}\n                site={this.state.site} siteChange={this.siteChange.bind(this)}/>\n            <User expandedPanel={this.state.expandedPanel} playerName={this.state.playerName}\n                handleExpansionChange={this.handleExpansionChange('user').bind(this)} \n                showError={this.props.showError} files={this.state.files} notablePlayers={this.state.notablePlayers}\n                notableEvents={this.state.notableEvents} site={this.state.site} playerDetailsChange={this.playerDetailsChange.bind(this)}\n                pgnUrl={this.state.pgnUrl} selectedPlayer={this.state.selectedNotablePlayer} selectedEvent={this.state.selectedNotableEvent}\n                lichessLoginState={this.state.lichessLoginState} lichessLoginName={this.state.lichessLoginName}\n                logoutOfLichess={this.logoutOfLichess.bind(this)} refreshLichessStatus={this.fetchLichessLoginStatus.bind(this)}\n                selectedOnlineTournament={this.state.selectedOnlineTournament}\n            />\n            <Filters expandedPanel={this.state.expandedPanel} playerColor={this.state.playerColor}\n                handleExpansionChange={this.handleExpansionChange('filters').bind(this)}\n                site={this.state.site} playerName={this.state.playerName} advancedFilters={this.advancedFilters()}\n                timeframeSteps={this.timeframeSteps} filtersChange={this.filtersChange.bind(this)}\n                selectedNotablePlayer={this.state.selectedNotablePlayer} />\n            </div>\n            <Actions expandedPanel={this.state.expandedPanel} playerColor={this.state.playerColor} files={this.state.files}\n                playerName={this.state.playerName} site={this.state.site} advancedFilters={this.advancedFilters()}\n                notify={this.props.notify} showError={this.props.showError} onChange={this.props.onChange}\n                setDownloading={this.props.setDownloading} clear={this.props.clear} isDownloading={this.props.isDownloading}\n                switchToMovesTab={this.props.switchToMovesTab} gamesProcessed={this.props.gamesProcessed} \n                selectedNotablePlayer={this.state.selectedNotablePlayer} selectedNotableEvent={this.state.selectedNotableEvent}\n                exportOpeningTreeObject={this.exportOpeningTreeObject.bind(this)} showInfo={this.props.showInfo}\n                importOpeningTreeObject={this.importOpeningTreeObject.bind(this)} selectedOnlineTournament={this.state.selectedOnlineTournament}\n                variant={this.props.variant}/>\n        </div>\n    }\n\n}","import React from 'react'\nimport {Button} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faRetweet, faTrashAlt, faFastBackward, faDesktop } from '@fortawesome/free-solid-svg-icons'\nimport {Container, Row, Col} from 'reactstrap'\nimport {trackEvent} from '../app/Analytics'\nimport * as Constants from '../app/Constants'\n\nexport default class SettingsView extends React.Component {\n    constructor(props){\n        super(props)\n        window.addEventListener(\"keydown\",this.keyHandler.bind(this))\n  \n    }\n    keyHandler(e){\n        if(e.srcElement && e.srcElement.tagName === 'INPUT') {\n            console.log(\"ignore input\")\n            return \n        }\n        switch(e.keyCode) {\n          case 70: // F key\n          this.toggle('orientation')()\n          break\n          default:\n            break\n\n        }\n      }\n    toggle(eventName){\n        return (()=> {\n            let newValue = this.props.settings[eventName] === Constants.PLAYER_COLOR_WHITE ? Constants.PLAYER_COLOR_BLACK:Constants.PLAYER_COLOR_WHITE\n            this.props.onChange(eventName, newValue)\n            trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"ChangeOrientation\")\n        })\n    }\n    analyse() {\n        window.open(`https://www.lichess.org/analysis/standard/${this.props.fen}`, '_blank');\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"AnalyzeGame\")\n\n    }\n    resetAction() {\n        this.props.reset()\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"Reset\")\n    }\n    clearAction() {\n        this.props.clear()\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"Clear\")\n    }\n\n    render() {\n        return <div>\n            <Container>\n                <Row sm=\"12\">\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.toggle('orientation')} color=\"\"><h3><FontAwesomeIcon icon={faRetweet} /></h3> Flip board</Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.clearAction.bind(this)} color=\"\"><h3><FontAwesomeIcon icon={faTrashAlt} /></h3> Clear games</Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.resetAction.bind(this)} color=\"\"><h3><FontAwesomeIcon icon={faFastBackward} /></h3> Starting position</Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.analyse.bind(this)} color=\"\"><h3><FontAwesomeIcon icon={faDesktop} /></h3> Computer analysis</Button>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    }\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExternalLinkAlt, faUser } from '@fortawesome/free-solid-svg-icons'\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableFooter, TextField } from '@material-ui/core';\nimport React from 'react'\nimport {getPerformanceDetails} from '../app/util'\nimport {copyText} from './loader/Common'\n\nexport default class ReportControls extends React.Component {\n    eatClicks(e) {\n        e.stopPropagation()\n    }\n\n    copyFen() {\n        copyText(\"fenField\")/* Get the text field */\n        /* Alert the copied text */\n        this.props.showInfo(\"FEN copied\");\n    }\n\n    getFenField() {\n        return this.props.simplifiedView?null:\n            <div className=\"fenDiv\">\n            <TextField\n                id=\"fenField\"\n                multiline\n                label=\"FEN\"\n                rowsMax=\"2\"\n                value={this.props.fen} \n                inputProps={{\n                    style: {fontSize: 12},\n                    spellCheck: false,\n                  }} \n                  variant=\"outlined\"\n                className=\"fenField\"\n                margin=\"dense\"\n                onClick = {this.copyFen.bind(this)}\n                /></div>\n    }\n\n      \n    render() {\n        if(!this.props.moveDetails.lastPlayedGame) {\n            return <div>{this.getFenField()}<div className = \"infoMessage\" >No data to show. Please enter a lichess or chess.com user name in the \n                <span className = \"navLinkButton\" onClick={()=>this.props.switchToUserTab()}> <FontAwesomeIcon icon={faUser} /> User</span> tab and click \"Load\"</div>\n                </div>\n        }\n        let performanceDetails = {}\n        if(this.props.isOpen) {\n            performanceDetails = getPerformanceDetails(this.props.moveDetails.totalOpponentElo, \n                                                        this.props.moveDetails.whiteWins, \n                                                        this.props.moveDetails.draws, \n                                                        this.props.moveDetails.blackWins, \n                                                        this.props.settings.playerColor)\n        } \n\n        return <div>\n            {this.getFenField()}\n            <Table onClick={this.eatClicks}>\n            {(isNaN(performanceDetails.performanceRating) || !this.props.settings.playerName)?null:            <TableHead className={`performanceRatingRow${this.props.simplifiedView?\" performanceHeader\":\"\"}`}><TableRow>\n                <TableCell className=\"performanceRatingRow\"><b>Performance</b></TableCell>\n                <TableCell className=\"performanceRatingRow\"><b>{performanceDetails.performanceRating}</b></TableCell>\n                </TableRow></TableHead>}\n            <TableBody>\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Results</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.results}</TableCell>\n            </TableRow>\n            {(isNaN(performanceDetails.averageElo) || !this.props.settings.playerName)?null:\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Avg opponent</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.averageElo}</TableCell>\n            </TableRow>}\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Score</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.score}</TableCell>\n            </TableRow>\n            {((this.props.simplifiedView || isNaN(performanceDetails.averageElo)) || !this.props.settings.playerName)?null:\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Rating change</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.ratingChange}</TableCell>\n            </TableRow>\n            }\n            {(this.props.settings.playerName && !this.props.simplifiedView && this.props.moveDetails.bestWinElo)?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Best win</TableCell>\n                <TableCell className=\"performanceRatingRow\">{this.props.moveDetails.bestWinElo} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(this.props.moveDetails.bestWinGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            {(this.props.settings.playerName && !this.props.simplifiedView && this.props.moveDetails.worstLossElo)?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Worst loss</TableCell>\n                <TableCell className=\"performanceRatingRow\">{this.props.moveDetails.worstLossElo} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(this.props.moveDetails.worstLossGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Last played</TableCell>\n                <TableCell className=\"performanceRatingRow\">{this.removeQuestionMarksFromDate(this.props.moveDetails.lastPlayedGame.date)} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(this.props.moveDetails.lastPlayedGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>\n            </TableBody>\n            {this.props.simplifiedView?null:\n            <TableFooter>\n                <TableRow>\n                    <TableCell colSpan=\"2\">Calculated based on <a href=\"https://handbook.fide.com/chapter/B022017\" target=\"_blank\" rel=\"noopener noreferrer\">FIDE regulations</a></TableCell>\n                </TableRow>\n            </TableFooter>\n            }\n        </Table></div>\n    }\n\n    removeQuestionMarksFromDate(date) {\n        if(date.indexOf('?') === -1) {\n            return date\n        }\n        return date.slice(0, date.indexOf('.'))\n    }\n}","import {Progress, Popover } from \"reactstrap\"\nimport React from 'react'\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableFooter } from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser, faExternalLinkAlt, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\nimport * as Constants from '../app/Constants'\nimport {trackEvent} from '../app/Analytics'\nimport ReportControls from './ReportControls'\n\nexport default class MovesList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            openPerformanceIndex: null\n        }\n    }\n\n    move(from, to) {\n        return () => {\n            this.props.onMove(from, to)\n            trackEvent(Constants.EVENT_CATEGORY_MOVES_LIST, \"MoveClicked\")\n        }\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.turnColor !== this.props.turnColor) {\n            this.setState({\n                openPerformanceIndex: null,\n            })\n        }\n    }\n    togglePerformancePopover(moveIndex) {\n        return (e) => {\n            if(this.state.openPerformanceIndex !== null) {\n                this.setState({openPerformanceIndex:null})\n            } else {\n                this.setState({openPerformanceIndex: moveIndex})\n            }\n            e.stopPropagation()\n        }\n    }\n    render(){\n        if(!this.props.movesToShow) {\n            return <div className = \"infoMessage\" >No moves to show. Please select a source from the \n                <span className = \"navLinkButton\" onClick={()=>this.props.switchToUserTab()}> <FontAwesomeIcon icon={faUser} /> User</span> tab and enter the details.</div>\n        }\n    return <div>{(this.props.gameResults && this.props.gameResults.length>0)?this.resultsTable():null}\n                {this.movesTable()}</div>\n    }\n    resultsTable() {\n        return <Table>\n            <TableBody>\n                {\n                this.props.gameResults.map(result => {\n                    let whitePlayer = this.player(result.white, result.whiteElo)\n                    let blackPlayer = this.player(result.black, result.blackElo)\n                    return <TableRow className=\"moveRow\" key = {`${result.url}`} onClick={this.props.launchGame(result)}>\n                        <TableCell>\n                            {result.result===\"1-0\"?<b>{whitePlayer}</b>:whitePlayer} {result.result} {result.result === \"0-1\"?<b>{blackPlayer}</b>:blackPlayer}\n                        </TableCell>\n                    </TableRow>\n                })}\n            </TableBody>\n        </Table>\n    }\n    player(name, elo) {\n        return `${name}${elo?`(${elo})`:''}`\n    }\n    getPopover(moveIndex) {\n        let performancePopoverOpen = this.state.openPerformanceIndex === moveIndex\n        let openMove = this.props.movesToShow[moveIndex]\n\n        return <Popover trigger=\"hover\" placement=\"right\" isOpen={performancePopoverOpen} target={`performancePopover${moveIndex}`} toggle={this.togglePerformancePopover(moveIndex)}>\n                <ReportControls moveDetails={openMove.details} simplifiedView={true} isOpen = {performancePopoverOpen} launchGame={this.props.launchGame} settings={this.props.settings}/>\n            </Popover>\n    }\n    movesTable() {\n        let hasMoves = (this.props.movesToShow && this.props.movesToShow.length>0)\n        return <Table>\n            {hasMoves?\n        <TableHead>\n        <TableRow>\n            <TableCell size=\"small\" className=\"smallCol\"><b>Move</b></TableCell>\n            <TableCell size=\"small\" className=\"smallCol\"><b>Games</b></TableCell>\n            <TableCell><b>Results</b></TableCell>\n        </TableRow></TableHead>  \n        :null}\n        {hasMoves?\n        <TableBody>\n        {\n        this.props.movesToShow.map((move, moveIndex) => {\n            let sampleResultWhite = this.player(move.details.lastPlayedGame.white, move.details.lastPlayedGame.whiteElo)\n            let sampleResultBlack = this.player(move.details.lastPlayedGame.black, move.details.lastPlayedGame.blackElo)\n            let sampleResult = move.details.lastPlayedGame.result\n\n            return move.details.count > 1?<TableRow className=\"moveRow\" key = {`${move.orig}${move.dest}`} onClick={this.move(move.orig, move.dest)}>\n                <TableCell size=\"small\" className=\"smallCol\">{move.san} </TableCell>\n                <TableCell size=\"small\" id={`performancePopover${moveIndex}`} className=\"smallCol\" onClick ={this.togglePerformancePopover(moveIndex)}>\n                    {move.details.count} <FontAwesomeIcon className=\"lowOpacity\" icon={faInfoCircle}/>\n                    {this.getPopover(moveIndex)}\n                </TableCell>\n                <TableCell>\n                    <Progress className = \"border\" multi>\n                        <Progress bar className=\"whiteMove\" value={`${move.details.whiteWins/move.details.count*100}`}>{move.details.whiteWins/move.details.count>0.1?move.details.whiteWins:''}</Progress>\n                        <Progress bar className=\"grayMove\" value={`${move.details.draws/move.details.count*100}`}>{move.details.draws/move.details.count>0.1?move.details.draws:''}</Progress>\n                        <Progress bar className=\"blackMove\" value={`${move.details.blackWins/move.details.count*100}`}>{move.details.blackWins/move.details.count>0.1?move.details.blackWins:''}</Progress>\n                    </Progress>\n                    <div style={{width:'100%', height:5, border:1}}>\n\n                    </div>\n                </TableCell>\n            </TableRow>:\n            <TableRow className=\"moveRow\" key = {`${move.orig}${move.dest}`} onClick={this.move(move.orig, move.dest)}>\n                <TableCell size=\"small\" className=\"smallCol\">{move.san}</TableCell>\n                <TableCell colSpan = \"2\">\n        {sampleResultWhite} {sampleResult} {sampleResultBlack} {<FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(move.details.lastPlayedGame)} icon={faExternalLinkAlt}/>}\n                </TableCell>\n            </TableRow>\n            }\n        )}\n    </TableBody>\n    :null}\n        <TableFooter><TableRow>\n        {this.props.settings.playerName?\n\n            hasMoves?\n                <TableCell colSpan=\"3\">\n                Showing moves that have been \n                played {this.props.turnColor === this.props.settings.playerColor? \"by\" : \"by others against\"} <b>{this.props.settings.playerName}</b> in \n                this position. <b>{this.props.settings.playerName}</b> is playing as <b>{this.props.settings.playerColor}</b>.\n                </TableCell>:\n                <TableCell colSpan=\"3\">\n                No moves found played by {this.props.turnColor === this.props.settings.playerColor? \"by\" : \"by others against\"} <b>{this.props.settings.playerName}</b> in \n                this position. <b>{this.props.settings.playerName}</b> is playing as <b>{this.props.settings.playerColor}</b>.\n                </TableCell>\n            :\n            hasMoves?\n                <TableCell colSpan=\"3\">\n                Showing all moves that have been \n                played by <b>{this.props.turnColor}</b> in \n                this position.\n                </TableCell>:                \n                <TableCell colSpan=\"3\">\n                No moves found \n                played by <b>{this.props.turnColor}</b> in \n                this position.\n                </TableCell>\n\n\n        }</TableRow></TableFooter>\n    </Table>\n    }\n}","import React from 'react'\nimport PGNLoader from './loader/PGNLoader'\nimport SettingsView from './Settings'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col,Button } from 'reactstrap';\nimport classnames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser, faList, faCog, faChartBar } from '@fortawesome/free-solid-svg-icons'\nimport MovesList from './MovesList';\nimport {trackEvent} from '../app/Analytics'\nimport * as Constants from '../app/Constants'\nimport ReportControls from './ReportControls'\nimport {Modal, ModalHeader, ModalFooter} from 'reactstrap'\nimport {Table, TableRow, TableBody, TableCell} from '@material-ui/core'\n\nexport default class ControlsContainer extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {\n          activeTab:'user',\n          activeGame:null\n      }\n      this.toggleModal = ()=>{\n        this.setState({activeGame:null})\n      }\n    }\n    \n\n    launchGame(game) {\n      if(game.url) {\n          return (e) => {\n              e.stopPropagation()\n              window.open(game.url, '_blank');\n              trackEvent(Constants.EVENT_CATEGORY_MOVES_LIST, \"ViewGameExternal\")\n          }\n      }\n      return ((e) => {\n        e.stopPropagation()\n        this.setState({activeGame:game})\n      })\n    }\n\n    toggle(tab) {\n        if(this.state.activeTab !== tab) {\n            this.setState({activeTab:tab})\n            trackEvent(Constants.EVENT_CATEGORY_CONTROLS,`activeTab:${tab}`)\n        }\n    }\n    switchToUserTab() {\n      this.toggle('user')\n    }\n    switchToMovesTab() {\n      this.toggle('moves')\n    }\n\n    render(){\n        return <div>\n              <Modal isOpen={this.state.activeGame} toggle={this.toggleModal}>\n              <ModalHeader toggle={this.toggleModal}>Game details</ModalHeader>\n              {!this.state.activeGame?null:\n              <Table>\n                \n                <TableBody>\n                  {\n                    Object.entries(this.state.activeGame.headers).map((entry)=>!entry[1]?null:<TableRow className=\"performanceRatingRow\">\n                        <TableCell className=\"performanceRatingRow\">{entry[0]}</TableCell>\n                        <TableCell className=\"performanceRatingRow\">{entry[1]}</TableCell>\n                    </TableRow>\n                    )}\n                  \n                </TableBody>\n              </Table>\n              }\n              <ModalFooter>\n          <Button color=\"secondary\" onClick={this.toggleModal}>Done</Button>\n        </ModalFooter>\n              </Modal>\n            <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'user' })}\n            onClick={() => { this.toggle('user'); }}\n          >\n            <FontAwesomeIcon icon={faUser} /> {this.state.activeTab === 'user'?\"User\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'moves' })}\n            onClick={() => { this.toggle('moves'); }}\n          >\n            <FontAwesomeIcon icon={faList} /> {this.state.activeTab === 'moves'?\"Moves\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'report' })}\n            onClick={() => { this.toggle('report'); }}\n          >\n            <FontAwesomeIcon icon={faChartBar} /> {this.state.activeTab === 'report'?\"Report\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'settings' })}\n            onClick={() => { this.toggle('settings'); }}\n          >\n            <FontAwesomeIcon icon={faCog} /> {this.state.activeTab === 'settings'?\"Controls\":\"\"}\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={this.state.activeTab}>\n        <TabPane tabId=\"user\">\n            <PGNLoader \n              switchToMovesTab={this.switchToMovesTab.bind(this)} \n              clear = {this.props.clear} \n              gamesProcessed = {this.props.gamesProcessed} \n              settings = {this.props.settings} \n              onChange = {this.props.settingsChange} \n              notify = {this.props.updateProcessedGames}\n              showError = {this.props.showError}\n              showInfo = {this.props.showInfo}\n              setDownloading = {this.props.setDownloading}\n              isDownloading = {this.props.isDownloading}\n              openingGraph={this.props.openingGraph}\n              importCallback={this.props.importCallback}\n              variant={this.props.variant}\n              />\n            </TabPane>\n        <TabPane tabId=\"moves\">\n            <MovesList \n              switchToUserTab={this.switchToUserTab.bind(this)} \n              movesToShow={this.props.movesToShow} \n              gameResults={this.props.gameResults}\n              onMove={this.props.onMove}\n              settings={this.props.settings}\n              turnColor={this.props.turnColor}\n              settingsChange={this.props.settingsChange}\n              launchGame = {this.launchGame.bind(this)}\n              />\n        </TabPane>\n        <TabPane tabId=\"report\">\n          <ReportControls fen={this.props.fen} simplifiedView = {false}\n            moveDetails = {this.props.openingGraph.getDetailsForFen(this.props.fen)}\n            launchGame={this.launchGame.bind(this)} settings={this.props.settings}\n            switchToUserTab={this.switchToUserTab.bind(this)} \n            isOpen = {this.state.activeTab === \"report\"}\n            showInfo = {this.props.showInfo}/>\n        </TabPane>\n        <TabPane tabId=\"settings\">\n          <Row>\n            <Col sm=\"6\">\n            <SettingsView fen={this.props.fen} settings={this.props.settings} isOpen = {true} clear = {this.props.clear} reset = {this.props.reset} onChange = {this.props.settingsChange}/>\n            \n            </Col>\n          </Row>\n        </TabPane>\n      </TabContent>\n        </div>\n    }\n}","import * as Constants from '../app/Constants'\nimport * as Common from '../app/Common'\nimport {trackEvent} from '../app/Analytics'\nimport {copyText} from './loader/Common'\nimport {chessLogic} from '../app/chess/ChessLogic'\n\nfunction turnColor() {\n    return fullTurnName(this.chess.turn())\n}\n\nfunction fullTurnName(shortName) {\n    return shortName === 'w' ? Constants.PLAYER_COLOR_WHITE : Constants.PLAYER_COLOR_BLACK\n}\n\nfunction playerColor() {\n    return this.state.settings.playerColor\n}\n\nfunction brushes() {\n    if(!this.playerColor() || this.playerColor() === this.turnColor()) {\n        return this.forBrushes\n    }\n    return this.againstBrushes\n}\n\nfunction calcMovable() {\nconst dests = {}\n    this.chess.SQUARES.forEach(s => {\n        const ms = this.chess.moves({square: s, verbose: true})\n        if (ms.length) dests[s] = ms.map(m => m.to)\n    })\n    return {\n        free: false,\n        dests,\n        color: this.turnColor()\n    }\n}\n\nfunction orientation() {\n    return this.state.settings.orientation\n}\n\nfunction onMove(from, to) {\n    const chess = this.chess\n    let move = chess.move({ from, to, promotion: 'q'})\n    this.setState({ fen: chess.fen(), lastMove: move})\n}\n\n\nfunction onMoveAction(from, to) {\n    this.onMove(from,to)\n    trackEvent(Constants.EVENT_CATEGORY_CHESSBOARD, \"Move\")\n}\n\nfunction navigateTo(fen, previousMove){\n    this.chess = chessLogic(this.state.variant, fen)\n    this.setState({fen:fen, lastMove:previousMove})\n}\nfunction updateProcessedGames(downloadLimit, n, parsedGame) {\n    let totalGamesProcessed = this.state.gamesProcessed+n\n    this.state.openingGraph.addPGN(parsedGame.pgnStats, parsedGame.parsedMoves,\n            parsedGame.latestFen,parsedGame.playerColor, this.state.variant)\n    this.setState({\n        gamesProcessed: totalGamesProcessed,\n        downloadingGames: (totalGamesProcessed<downloadLimit || downloadLimit>=Constants.MAX_DOWNLOAD_LIMIT)?this.state.downloadingGames:false\n    })\n    // continue to download games if \n    // 1. we have not reached download limit OR\n    //    there is no download limit set (downloadLimit>MAX condition)\n    // 2. user did not hit stop button\n    return (totalGamesProcessed < downloadLimit || downloadLimit>=Constants.MAX_DOWNLOAD_LIMIT)&& this.state.downloadingGames\n}\nfunction moveToShape(move) {\n    return {\n        orig:move.orig,\n                    dest: move.dest,\n                    brush: this.brushes()[move.level]\n    }\n}\n\nfunction autoShapes() {\n    var moves = this.movesToShow()\n    if(moves) {\n        var shapes = moves.map(this.moveToShape.bind(this))\n        return this.fillArray(shapes,  25)\n    }\n    return this.fillArray([], 25) // dummy arrow to clear out existing arrows\n}\n\nfunction movesToShow() {\n    if(!this.state.openingGraph.hasMoves) {\n        return null;\n    }\n    var moves = this.state.openingGraph.movesForFen(this.chess.fen())\n    return moves?moves.sort((a,b)=>b.details.count-a.details.count):[]\n}\n\n\n\nfunction gameResults() {\n    return this.state.openingGraph.gameResultsForFen(this.chess.fen())\n}\n\nfunction fillArray(arr, len) {\n    for (var i = arr.length; i < len; i++) {\n        arr.push({'orig':'i'+i, 'dest':'i'+(i+1), brush:this.brushes()[0]});\n    }\n    return arr;\n}\n\nfunction reset() {\n    this.chess = chessLogic(this.state.variant, Common.rootFen(this.state.variant))\n    this.setState({fen: this.chess.fen(), lastMove:null})\n}\n\nfunction clear() {\n    this.state.openingGraph.clear()\n    this.state.gamesProcessed = 0\n    this.reset()\n}\n\nfunction settingsChange(name, value) {\n    let settings = this.state.settings\n    settings[name] = value;\n    this.setState({\n        'settings':settings\n    })\n}\n\nfunction launch(url) {\n    return () => {\n      window.open(url, \"_blank\")\n    }\n  }\n\n\nfunction showError(message, trackingEvent, subMessage, action, severity) {\n    let errorActionText, errorAction\n    let messageSeverity = severity || Constants.ERROR_SEVERITY_ERROR\n    if(action === Constants.ERROR_ACTION_VISIT_OLD_SITE) {\n        errorActionText=\"Visit old site\"\n        errorAction = launch(\"https://www.openingtree.com/old\")\n    } else if(action !== Constants.ERROR_ACTION_NONE){\n        errorActionText=\"Report this\"\n        errorAction = this.toggleFeedback(true)\n    }\n    this.setState({message:message, subMessage:subMessage,\n        errorAction:errorAction, errorActionText:errorActionText,\n        messageSeverity:messageSeverity})\n    let eventName = messageSeverity+\"Shown\"\n    if(trackingEvent) {\n        eventName = eventName+\":\"+trackingEvent\n    }\n    trackEvent(Constants.EVENT_CATEGORY_MESSAGE_SHOWN,eventName, message)\n}\n\nfunction showInfo(message, trackingLabel) {\n    this.setState({message:message, messageSeverity:Constants.ERROR_SEVERITY_SUCCESS})\n    trackEvent(Constants.EVENT_CATEGORY_MESSAGE_SHOWN,\"infoShown\",\n        trackingLabel?trackingLabel:message)\n}\n\n\nfunction closeError() {\n    this.setState({message:'', subMessage:''})\n}\n\nfunction toggleFeedback(diagnosticsOpen) {\n    return () => {\n        let feedbackOpen = this.state.feedbackOpen\n        this.closeError()\n        this.setState({feedbackOpen:!feedbackOpen,\n                diagnosticsDataOpen:diagnosticsOpen})\n    }\n}\n\nfunction setDownloading(val) {\n    this.setState({downloadingGames:val})\n}\n\nfunction toggleDiagnosticsData() {\n    this.setState({diagnosticsDataOpen:!this.state.diagnosticsDataOpen})\n}\n\nfunction copyDiagnostics() {\n    copyText(\"diagnosticsText\")\n    this.showInfo(\"Copied Diagnostics data\")\n}\n\n\nfunction importGameState(importState) {\n    this.setState({\n      settings:importState.settings,\n      openingGraph:importState.openingGraph,\n      gamesProcessed:importState.gamesProcessed\n    })\n  }\n  function getChessboardWidth(){\n    // getting nearest multiple of 8 because chessground has \n    // css alignment issues if board width is not a multple of 8\n    \n    return `${nearestMultipleOf8(getChessboardWidthInternal())}px`\n  }\n  function nearestMultipleOf8(n){\n      while(n%8!==0) {\n          n++;\n      }\n      return n;\n  }\n  function getChessboardWidthInternal(){\n    // have to manually set the width to pixels instead of \"vw\" value\n    // this is because chessground component does not behave well with \"vw\" values\n    if (window.innerWidth<=768) {\n      return Math.round(window.innerWidth*95/100) //95vw\n    } else if ((window.innerWidth<=1424)) {\n      return Math.round(Math.min(window.innerWidth*48/100),window.innerHeight-100) // 40vw\n    } else {\n      return Math.round(Math.min(712,window.innerHeight-100))// innherHeight-100 to leave some space for header and footer\n    }\n\n  }\n\nfunction getDiagnosticsValue() {\n  return `--------------------\n  ${navigator.userAgent}\n  -------------------\n  ${JSON.stringify(this.state)}\n  -------------------\n  `\n}\nfunction getRedditLink() {\n    return `https://www.reddit.com/message/compose/?to=${Constants.OPENNIG_TREE_REDDIT}&subject=${this.getSubject()}&message=%0D%0A%0D%0A%0D%0A${this.getBody()}`\n}\n\nfunction getEmailLink() {\n    return `mailto:${Constants.OPENING_TREE_EMAIL}?subject=${this.getSubject()}&body=%0D%0A%0D%0A%0D%0A${this.getBody()}`\n}\n\nfunction getSubject() {\n    return this.state.diagnosticsDataOpen?\"Possible Openingtree bug\":\"Feedback on Openingtree\"\n}\nfunction getBody() {\n    return this.state.diagnosticsDataOpen?this.getDiagnosticsValue():\"\"\n}\n\n\nfunction addStateManagement(obj){\n    obj.orientation  = orientation\n    obj.turnColor = turnColor\n    obj.calcMovable = calcMovable\n    obj.onMove = onMove\n    obj.onMoveAction = onMoveAction\n    obj.autoShapes = autoShapes\n    obj.updateProcessedGames = updateProcessedGames\n    obj.settingsChange = settingsChange\n    obj.reset = reset\n    obj.clear = clear\n    obj.navigateTo = navigateTo\n    obj.playerColor = playerColor\n    obj.fillArray = fillArray\n    obj.brushes = brushes\n    obj.moveToShape = moveToShape\n    obj.movesToShow = movesToShow\n    obj.gameResults = gameResults\n    obj.showError = showError\n    obj.showInfo = showInfo\n    obj.closeError = closeError\n    obj.toggleFeedback = toggleFeedback.bind(obj)\n    obj.setDownloading = setDownloading\n    obj.toggleDiagnosticsData = toggleDiagnosticsData.bind(obj)\n    obj.copyDiagnostics = copyDiagnostics.bind(obj)\n    obj.importGameState = importGameState\n    obj.getDiagnosticsValue = getDiagnosticsValue\n    obj.getChessboardWidth = getChessboardWidth\n    obj.getEmailLink = getEmailLink\n    obj.getSubject = getSubject\n    obj.getBody = getBody.bind(obj)\n    obj.getRedditLink = getRedditLink\n}\n\nexport {addStateManagement}","import green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Button from '@material-ui/core/Button'\nimport {withStyles} from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, subMessage, action, actionText, showReportButton, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <div><span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message} \n                    \n                </span>\n                {!subMessage?null:<div className=\"smallText\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{subMessage}</div>}\n                </div>\n            }\n            action={[ \n                !showReportButton?null:<Button key=\"report\" onClick = {action} color=\"inherit\" size=\"small\">\n                  {actionText}\n                </Button>,\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.close}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    onReport: PropTypes.func,\n    subMessage: PropTypes.string,\n    showReportButton: PropTypes.bool,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles)(SnackbarContentWrapper);","import React from 'react'\nimport Chessground from 'react-chessground'\nimport 'react-chessground/dist/styles/chessground.css'\nimport OpeningGraph from '../app/OpeningGraph'\nimport Navigator from './Navigator'\nimport GlobalHeader from './GlobalHeader'\nimport {Container, Row, Col} from 'reactstrap'\nimport ControlsContainer from './ControlsContainer'\nimport {addStateManagement} from './StateManagement'\nimport {Snackbar, TextField} from '@material-ui/core'\nimport SnackbarContentWrapper from './SnackbarContentWrapper'\nimport * as Constants from '../app/Constants'\nimport {  Modal, ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Button,Collapse\n} from 'reactstrap'\nimport * as Common from '../app/Common'\nimport {chessLogic} from '../app/chess/ChessLogic'\n\nimport {FormControlLabel, Checkbox} from '@material-ui/core'\n\nexport default class MainContainer extends React.Component {\n  \n  constructor(props){\n    super(props)\n    let urlVariant = new URLSearchParams(window.location.search).get(\"variant\")\n    let selectedVariant = urlVariant?urlVariant:Constants.VARIANT_RACING_KINGS\n    this.chess = chessLogic(selectedVariant, Common.rootFen(selectedVariant))\n    addStateManagement(this)\n    this.state = {\n        resize:0,\n        fen: this.chess.fen(),\n        lastMove: null,\n        gamesProcessed:0,\n        openingGraph:new OpeningGraph(selectedVariant),\n        settings:{\n          playerName:'',\n          orientation:Constants.PLAYER_COLOR_WHITE,\n          playerColor:''\n        },\n        message:'',\n        downloadingGames:false,\n        feedbackOpen:false,\n        diagnosticsDataOpen:false,\n        variant:selectedVariant\n      }\n    this.chessboardWidth = this.getChessboardWidth()\n\n    this.forBrushes = ['paleGrey', 'paleGreen', 'green']\n    this.againstBrushes = ['paleRed', 'paleRed', 'red']\n    window.addEventListener('resize', this.handleResize.bind(this))\n  }\n  handleResize() {\n    this.setState({resize:this.state.resize+1})\n    this.chessboardWidth = this.getChessboardWidth()\n    console.log(this.state.resize)\n  }\n\n\n  render() {\n    let lastMoveArray = this.state.lastMove ? [this.state.lastMove.from, this.state.lastMove.to] : null\n    let snackBarOpen = this.state.message?true:false\n    return <div className=\"rootView\"> \n        <GlobalHeader toggleFeedback = {this.toggleFeedback(false)}/>\n        <Container className=\"mainContainer\">\n          <Row><Col lg={{order:0, size:2}} xs={{order:2}}>\n            <Navigator fen = {this.state.fen} move={this.state.lastMove} \n              onChange ={this.navigateTo.bind(this)}\n              variant = {this.state.variant}\n            />\n    </Col><Col lg=\"6\"><Chessground key={this.state.resize}\n      height={this.chessboardWidth}\n      width={this.chessboardWidth}\n      orientation={this.orientation()}\n      turnColor={this.turnColor()}\n      movable={this.calcMovable()}\n      \n      lastMove={lastMoveArray}\n      fen={this.state.fen}\n      onMove={this.onMoveAction.bind(this)}\n      drawable ={{\n        enabled: true,\n        visible: true,\n        autoShapes: this.autoShapes()\n      }}\n      style={{ margin: 'auto' }}\n    />\n    </Col><Col lg=\"4\" className=\"paddingTop\"><ControlsContainer fen={this.state.fen}\n                gamesProcessed={this.state.gamesProcessed} \n                updateProcessedGames={this.updateProcessedGames.bind(this)}\n                settingsChange={this.settingsChange.bind(this)}\n                settings={this.state.settings}\n                reset={this.reset.bind(this)}\n                clear={this.clear.bind(this)}\n                movesToShow={this.movesToShow()}\n                gameResults={this.gameResults()}\n                onMove={this.onMove.bind(this)}\n                turnColor={this.turnColor()}\n                showError={this.showError.bind(this)}\n                showInfo={this.showInfo.bind(this)}\n                setDownloading={this.setDownloading.bind(this)}\n                isDownloading={this.state.downloadingGames}\n                openingGraph={this.state.openingGraph}\n                importCallback={this.importGameState.bind(this)}\n                variant={this.state.variant}\n                /></Col>\n    </Row></Container>\n    <Snackbar anchorOrigin={{ vertical:'bottom', horizontal:\"left\" }} \n            open={snackBarOpen} autoHideDuration={6000} \n            onClose={this.closeError.bind(this)}\n    >\n    <SnackbarContentWrapper\n                            onClose={this.closeError.bind(this)}\n                            variant={this.state.messageSeverity}\n                            message={this.state.message}\n                            subMessage={this.state.subMessage}\n                            showReportButton={this.state.messageSeverity==='error'}\n                            action={this.state.errorAction}\n                            actionText={this.state.errorActionText}\n                        />\n    </Snackbar>\n\n    <Modal isOpen={this.state.feedbackOpen} toggle={this.toggleFeedback(false)}>\n        <ModalHeader toggle={this.toggleFeedback(false)}>Feedback</ModalHeader>\n        <ModalBody>\n          Your feedback is greatly appreciated. Reach out to me for feedback, suggestions, bug report or just a game of chess.\n          <ul>\n            <li>Email me: <a rel=\"noopener noreferrer\" href={this.getEmailLink()} target=\"_blank\">{Constants.OPENING_TREE_EMAIL}</a></li>\n            <li>Message me on reddit <a rel=\"noopener noreferrer\" href={this.getRedditLink()} target=\"_blank\">u/{Constants.OPENNIG_TREE_REDDIT}</a></li>\n            <li>Message me on lichess: <a rel=\"noopener noreferrer\" href={`https://lichess.org/inbox/${Constants.OPENING_TREE_LICHESS}`} target=\"_blank\">{Constants.OPENING_TREE_LICHESS}</a></li>\n            <li>Message me on chess.com: <a rel=\"noopener noreferrer\" href={`https://www.chess.com/messages/compose/${Constants.OPENING_TREE_CHESS_COM}`} target=\"_blank\">{Constants.OPENING_TREE_CHESS_COM}</a></li>\n            <li>Join my <a rel=\"noopener noreferrer\" href={Constants.OPENING_TREE_DISCORD}target=\"_blank\">discord server</a> to chat</li>\n          </ul>\n          <FormControlLabel\n        control={\n          <Checkbox\n            checked={this.state.diagnosticsDataOpen}\n            onChange={this.toggleDiagnosticsData}\n            name=\"diagnostics\"\n            color=\"primary\"\n          />\n        }\n        label=\"Add diagnostics data to message\"\n      />\n          <Collapse isOpen={this.state.diagnosticsDataOpen}>\n            <TextField id=\"diagnosticsText\" label=\"Click to copy.\" variant=\"outlined\" \n            className=\"fullWidth\" value={this.getDiagnosticsValue()} \n            rowsMax={4} onClick={this.copyDiagnostics} multiline/>\n            </Collapse>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={this.toggleFeedback(false)}>Done</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  }\n}\n","import ReactDOM from 'react-dom'\nimport MainContainer from './pres/MainContainer'\nimport React from 'react'\nimport {trackPageView} from './app/Analytics'\n\nReactDOM.render(<MainContainer />, document.getElementById('root'))\ntrackPageView()","import * as Constants from './Constants'\n\nexport function isAdvancedFiltersEnabled(source) {\n    return source === Constants.SITE_CHESS_DOT_COM ||\n        source === Constants.SITE_LICHESS\n}\n\n\nexport function isFilterPanelEnabled(source, playerName) {\n    if(source === Constants.SITE_EVENT_DB ||\n        source === Constants.SITE_OPENING_TREE_FILE ||\n        source === Constants.SITE_ONLINE_TOURNAMENTS) {\n            return false\n    }\n    return !!playerName\n}\n\nexport function treeSaveDisabledReason(loadedSite, selectedSite, gamesProcessed, isDownloading){\n    if(selectedSite === Constants.SITE_ONLINE_TOURNAMENTS) {\n        return \"Not currently supported for tournaments\"\n    }\n    if(selectedSite !== Constants.SITE_LICHESS && \n        selectedSite !== Constants.SITE_CHESS_DOT_COM) {\n        return \"Only supported for chess.com and lichess\"\n    }\n    if(loadedSite !== selectedSite || gamesProcessed<=0) {\n        return \"You need to analyze games before saving\"\n    }\n    if(isDownloading) {\n        return \"Action not supported while games are loading\"\n    }\n    return ''\n}\nexport function exportFileName(source, playerName, playerColor, selectedEvent, extension) {\n    if(source === Constants.SITE_EVENT_DB) {\n        return `${selectedEvent.name}.${extension}`\n    }\n    if(playerName) {\n        return `${playerName}-${playerColor}.${extension}`\n    }\n    return `openingtree-exportedgames.${extension}`\n}"],"sourceRoot":""}